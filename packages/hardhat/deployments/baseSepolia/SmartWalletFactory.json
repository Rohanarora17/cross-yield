{
  "address": "0x4bcB0b682d2e500F03A42715B36080655316A15c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_backendCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidUser",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletCreationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCoordinator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCoordinator",
          "type": "address"
        }
      ],
      "name": "BackendCoordinatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "WalletCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "agentToUser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "backendCoordinator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "createWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "createWalletsBatch",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "wallets",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "disableWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalWallets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agentWallet",
          "type": "address"
        }
      ],
      "name": "getUserForAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWalletBytecodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getWalletOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasWallet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isValidWallet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "isWalletValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "predictWalletAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "predictedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb194ba00acfc933fa36bfd8252f9ce81420cff6fb957df3a2f48cab7eb7257e8",
  "receipt": {
    "to": null,
    "from": "0xCE54cF5a0dE3843011cF20389C1b6a4AaC442d6A",
    "contractAddress": "0x4bcB0b682d2e500F03A42715B36080655316A15c",
    "transactionIndex": 14,
    "gasUsed": "5022643",
    "logsBloom": "0x
    "blockHash": "0x1fd2dc9d4b73186a240f8fa06fcac329272bcabd9c154bd45bb96948e77e8623",
    "transactionHash": "0xb194ba00acfc933fa36bfd8252f9ce81420cff6fb957df3a2f48cab7eb7257e8",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 31838115,
        "transactionHash": "0xb194ba00acfc933fa36bfd8252f9ce81420cff6fb957df3a2f48cab7eb7257e8",
        "address": "0x4bcB0b682d2e500F03A42715B36080655316A15c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ce54cf5a0de3843011cf20389c1b6a4aac442d6a"
        ],
        "data": "0x",
        "logIndex": 62,
        "blockHash": "0x1fd2dc9d4b73186a240f8fa06fcac329272bcabd9c154bd45bb96948e77e8623"
      }
    ],
    "blockNumber": 31838115,
    "cumulativeGasUsed": "6597958",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCE54cF5a0dE3843011cF20389C1b6a4AaC442d6A",
    "0x036CbD53842c5426634e7929541eC2318f3dCF7e",
    "0xCE54cF5a0dE3843011cF20389C1b6a4AaC442d6A"
  ],
  "numDeployments": 3,
  "solcInputHash": "e4a2eaa710d08ead0969ce7f56f635d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backendCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidUser\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletCreationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCoordinator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCoordinator\",\"type\":\"address\"}],\"name\":\"BackendCoordinatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"agentToUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backendCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"createWalletsBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"disableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWallets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agentWallet\",\"type\":\"address\"}],\"name\":\"getUserForAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWalletBytecodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isWalletValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"predictWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"predictedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uses CREATE2 for predictable wallet addresses across chains\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_backendCoordinator\":\"Address of the backend coordinator\",\"_owner\":\"Address of the contract owner\",\"_usdcAddress\":\"Address of the USDC token for this chain\"}},\"createWallet(address)\":{\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"wallet\":\"Address of the created smart wallet\"}},\"createWalletsBatch(address[])\":{\"params\":{\"users\":\"Array of user addresses\"},\"returns\":{\"wallets\":\"Array of created wallet addresses\"}},\"disableWallet(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"wallet\":\"Address of the wallet to disable\"}},\"getTotalWallets()\":{\"returns\":{\"count\":\"Total wallet count\"}},\"getUserForAgent(address)\":{\"params\":{\"agentWallet\":\"Address of the agent wallet\"},\"returns\":{\"user\":\"Address of the user who owns this agent wallet\"}},\"getWallet(address)\":{\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"wallet\":\"Address of the user's smart wallet (0x0 if doesn't exist)\"}},\"getWalletBytecodeHash()\":{\"returns\":{\"hash\":\"The bytecode hash\"}},\"getWalletOwner(address)\":{\"params\":{\"wallet\":\"Address of the smart wallet\"},\"returns\":{\"owner\":\"Address of the wallet owner\"}},\"hasWallet(address)\":{\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"exists\":\"True if wallet exists\"}},\"isWalletValid(address)\":{\"params\":{\"wallet\":\"Address to check\"},\"returns\":{\"valid\":\"True if it's a valid wallet\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"predictWalletAddress(address)\":{\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"predictedAddress\":\"The predicted wallet address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"version()\":{\"returns\":{\"_0\":\"version The contract version\"}}},\"title\":\"SmartWalletFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"createWallet(address)\":{\"notice\":\"Create a smart wallet for a user\"},\"createWalletsBatch(address[])\":{\"notice\":\"Create smart wallet for multiple users in batch\"},\"disableWallet(address)\":{\"notice\":\"Emergency function to disable a compromised wallet\"},\"getTotalWallets()\":{\"notice\":\"Get total number of wallets created\"},\"getUserForAgent(address)\":{\"notice\":\"Get the user address for a given agent wallet\"},\"getWallet(address)\":{\"notice\":\"Get the smart wallet address for a user\"},\"getWalletBytecodeHash()\":{\"notice\":\"Get wallet creation bytecode hash (for verification)\"},\"getWalletOwner(address)\":{\"notice\":\"Get the owner of a smart wallet\"},\"hasWallet(address)\":{\"notice\":\"Check if a wallet exists for a user\"},\"isWalletValid(address)\":{\"notice\":\"Check if an address is a valid smart wallet created by this factory\"},\"predictWalletAddress(address)\":{\"notice\":\"Predict the smart wallet address for a user (before creation)\"},\"version()\":{\"notice\":\"Get contract version\"}},\"notice\":\"Factory contract for creating deterministic user smart wallets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartWalletFactory.sol\":\"SmartWalletFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/SmartWalletFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./UserSmartWallet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SmartWalletFactory\\n * @notice Factory contract for creating deterministic user smart wallets\\n * @dev Uses CREATE2 for predictable wallet addresses across chains\\n */\\ncontract SmartWalletFactory is Ownable {\\n\\n    // State variables\\n    mapping(address => address) public userWallets;\\n    mapping(address => bool) public isValidWallet;\\n    mapping(address => address) public agentToUser; // Reverse mapping: agent => user\\n    address public immutable backendCoordinator;\\n    address public immutable usdcAddress;\\n\\n    // Events\\n    event WalletCreated(address indexed user, address indexed wallet, bytes32 salt);\\n    event BackendCoordinatorUpdated(address indexed oldCoordinator, address indexed newCoordinator);\\n\\n    // Errors\\n    error WalletAlreadyExists();\\n    error InvalidUser();\\n    error WalletCreationFailed();\\n\\n    /**\\n     * @notice Constructor\\n     * @param _backendCoordinator Address of the backend coordinator\\n     * @param _usdcAddress Address of the USDC token for this chain\\n     * @param _owner Address of the contract owner\\n     */\\n    constructor(address _backendCoordinator, address _usdcAddress, address _owner) Ownable(_owner) {\\n        require(_backendCoordinator != address(0), \\\"Invalid backend coordinator\\\");\\n        require(_usdcAddress != address(0), \\\"Invalid USDC address\\\");\\n        backendCoordinator = _backendCoordinator;\\n        usdcAddress = _usdcAddress;\\n    }\\n\\n    /**\\n     * @notice Create a smart wallet for a user\\n     * @param user Address of the user\\n     * @return wallet Address of the created smart wallet\\n     */\\n    function createWallet(address user) external returns (address wallet) {\\n        if (user == address(0)) revert InvalidUser();\\n        if (userWallets[user] != address(0)) revert WalletAlreadyExists();\\n\\n        // Generate deterministic salt based on user address\\n        bytes32 salt = _generateSalt(user);\\n\\n        // Deploy smart wallet using CREATE2\\n        wallet = address(new UserSmartWallet{salt: salt}(\\n            user,\\n            backendCoordinator,\\n            address(this),\\n            usdcAddress\\n        ));\\n\\n        if (wallet == address(0)) revert WalletCreationFailed();\\n\\n        // Store wallet mapping\\n        userWallets[user] = wallet;\\n        isValidWallet[wallet] = true;\\n        agentToUser[wallet] = user; // Store reverse mapping\\n\\n        emit WalletCreated(user, wallet, salt);\\n    }\\n\\n    /**\\n     * @notice Get the smart wallet address for a user\\n     * @param user Address of the user\\n     * @return wallet Address of the user's smart wallet (0x0 if doesn't exist)\\n     */\\n    function getWallet(address user) external view returns (address wallet) {\\n        return userWallets[user];\\n    }\\n\\n    /**\\n     * @notice Predict the smart wallet address for a user (before creation)\\n     * @param user Address of the user\\n     * @return predictedAddress The predicted wallet address\\n     */\\n    function predictWalletAddress(address user) external view returns (address predictedAddress) {\\n        bytes32 salt = _generateSalt(user);\\n\\n        bytes memory bytecode = abi.encodePacked(\\n            type(UserSmartWallet).creationCode,\\n            abi.encode(user, backendCoordinator, address(this), usdcAddress)\\n        );\\n\\n        bytes32 hash = keccak256(abi.encodePacked(\\n            bytes1(0xff),\\n            address(this),\\n            salt,\\n            keccak256(bytecode)\\n        ));\\n\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    /**\\n     * @notice Check if a wallet exists for a user\\n     * @param user Address of the user\\n     * @return exists True if wallet exists\\n     */\\n    function hasWallet(address user) external view returns (bool exists) {\\n        return userWallets[user] != address(0);\\n    }\\n\\n    /**\\n     * @notice Check if an address is a valid smart wallet created by this factory\\n     * @param wallet Address to check\\n     * @return valid True if it's a valid wallet\\n     */\\n    function isWalletValid(address wallet) external view returns (bool valid) {\\n        return isValidWallet[wallet];\\n    }\\n\\n    /**\\n     * @notice Get the owner of a smart wallet\\n     * @param wallet Address of the smart wallet\\n     * @return owner Address of the wallet owner\\n     */\\n    function getWalletOwner(address wallet) external view returns (address owner) {\\n        if (!isValidWallet[wallet]) return address(0);\\n        return UserSmartWallet(payable(wallet)).owner();\\n    }\\n\\n    /**\\n     * @notice Get the user address for a given agent wallet\\n     * @param agentWallet Address of the agent wallet\\n     * @return user Address of the user who owns this agent wallet\\n     */\\n    function getUserForAgent(address agentWallet) external view returns (address user) {\\n        return agentToUser[agentWallet];\\n    }\\n\\n    /**\\n     * @notice Get total number of wallets created\\n     * @return count Total wallet count\\n     */\\n    function getTotalWallets() external view returns (uint256 count) {\\n        // This would require additional tracking in production\\n        // For now, we'll implement a basic counter\\n        return 0; // TODO: Implement counter\\n    }\\n\\n    /**\\n     * @notice Emergency function to disable a compromised wallet\\n     * @param wallet Address of the wallet to disable\\n     * @dev Only owner can call this function\\n     */\\n    function disableWallet(address wallet) external onlyOwner {\\n        require(isValidWallet[wallet], \\\"Wallet not valid\\\");\\n        isValidWallet[wallet] = false;\\n\\n        // Find and remove from userWallets mapping\\n        // This is gas-intensive but needed for security\\n        // In production, consider using a different approach\\n    }\\n\\n    /**\\n     * @notice Create smart wallet for multiple users in batch\\n     * @param users Array of user addresses\\n     * @return wallets Array of created wallet addresses\\n     */\\n    function createWalletsBatch(address[] calldata users)\\n        external\\n        returns (address[] memory wallets)\\n    {\\n        uint256 length = users.length;\\n        require(length > 0 && length <= 100, \\\"Invalid batch size\\\"); // Limit batch size\\n\\n        wallets = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            // Skip if wallet already exists\\n            if (userWallets[users[i]] != address(0)) {\\n                wallets[i] = userWallets[users[i]];\\n                continue;\\n            }\\n\\n            wallets[i] = this.createWallet(users[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate deterministic salt for CREATE2\\n     * @param user Address of the user\\n     * @return salt The generated salt\\n     */\\n    function _generateSalt(address user) internal pure returns (bytes32 salt) {\\n        return keccak256(abi.encodePacked(\\\"CrossYield_SmartWallet_\\\", user));\\n    }\\n\\n    /**\\n     * @notice Get wallet creation bytecode hash (for verification)\\n     * @return hash The bytecode hash\\n     */\\n    function getWalletBytecodeHash() external pure returns (bytes32 hash) {\\n        return keccak256(type(UserSmartWallet).creationCode);\\n    }\\n\\n    /**\\n     * @notice Get contract version\\n     * @return version The contract version\\n     */\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n}\",\"keccak256\":\"0x5db95f13b5c6f612a589266dc1a26874e8cf31f83a68521453bb7236386bfd56\",\"license\":\"MIT\"},\"contracts/UserSmartWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IProtocolAdapter.sol\\\";\\n\\n/**\\n * @title Circle CCTP Interfaces\\n * @notice Official Circle Cross-Chain Transfer Protocol interfaces\\n */\\ninterface ITokenMessenger {\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken\\n    ) external returns (uint64 nonce);\\n}\\n\\ninterface IMessageTransmitter {\\n    function receiveMessage(\\n        bytes memory message,\\n        bytes memory attestation\\n    ) external returns (bool success);\\n}\\n\\n/**\\n * @title UserSmartWallet\\n * @notice Individual smart wallet for non-custodial USDC yield optimization\\n * @dev Each user gets their own wallet with automated execution capabilities\\n */\\ncontract UserSmartWallet is ReentrancyGuard {\\n\\n    // State variables\\n    address public immutable owner;\\n    address public immutable backendCoordinator;\\n    address public immutable factory;\\n\\n    // USDC token address (will be set per chain)\\n    IERC20 public immutable USDC;\\n\\n    // Wallet state\\n    bool public isActive;\\n    uint256 public totalDeposited;\\n    uint256 public totalWithdrawn;\\n\\n    // Protocol allocations tracking\\n    mapping(string => uint256) public protocolBalances;\\n    mapping(address => uint256) public adapterBalances;\\n    string[] public activeProtocols;\\n\\n    // CCTP Integration - Circle's official contract addresses\\n    mapping(uint256 => address) public tokenMessengerAddresses;\\n    mapping(uint256 => address) public messageTransmitterAddresses;\\n    mapping(uint256 => uint32) public cctpDomains;\\n\\n    // CCTP Transfer State Management\\n    struct CCTPTransfer {\\n        uint64 nonce;\\n        uint256 amount;\\n        uint32 destinationDomain;\\n        address recipient;\\n        bytes32 messageHash;\\n        uint8 status; // 0=pending, 1=burned, 2=completed, 3=failed\\n        uint256 timestamp;\\n        uint256 retryCount;\\n        string destinationChain;\\n    }\\n\\n    mapping(uint64 => CCTPTransfer) public cctpTransfers;\\n    mapping(bytes32 => bool) public processedMessages;\\n    uint64[] public activeCCTPTransfers;\\n\\n    // Events\\n    event Deposited(address indexed user, uint256 amount, string strategy, uint256 timestamp);\\n    event Withdrawn(address indexed user, uint256 amount, uint256 timestamp);\\n    event EmergencyWithdrawal(address indexed user, uint256 amount, uint256 timestamp);\\n    event ProtocolAllocation(string indexed protocol, address adapter, uint256 amount, uint256 timestamp);\\n    event ProtocolWithdrawal(string indexed protocol, address adapter, uint256 amount, uint256 timestamp);\\n    event WalletDeactivated(uint256 timestamp);\\n    event BackendActionExecuted(string action, bytes data, uint256 timestamp);\\n    event AllocationExecuted(string[] protocolNames, address[] adapters, uint256[] amounts);\\n\\n    // Enhanced CCTP Events\\n    event CCTPBurnExecuted(uint64 indexed nonce, uint256 amount, uint32 destinationDomain, address recipient, string destinationChain, uint256 timestamp);\\n    event CCTPMintCompleted(uint64 indexed nonce, bytes32 messageHash, uint256 amount, uint256 timestamp);\\n    event CCTPTransferFailed(uint64 indexed nonce, string reason, uint256 timestamp);\\n    event CCTPTransferCancelled(uint64 indexed nonce, uint256 timestamp);\\n    event CCTPConfigUpdated(uint256 chainId, address tokenMessenger, address messageTransmitter, uint32 domain);\\n\\n    // Errors\\n    error OnlyOwner();\\n    error OnlyBackendOrOwner();\\n    error OnlyFactory();\\n    error WalletNotActive();\\n    error CCTPNotSupported();\\n    error InvalidDestinationDomain();\\n    error TransferNotFound();\\n    error TransferAlreadyCompleted();\\n    error MessageAlreadyProcessed();\\n    error CCTPMintFailed();\\n    error InvalidNonce();\\n    error TransferTooOld();\\n    error InsufficientBalance();\\n    error InvalidAmount();\\n    error InvalidProtocol();\\n    error TransferFailed();\\n    error ZeroAddress();\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert OnlyOwner();\\n        _;\\n    }\\n\\n    modifier onlyBackendOrOwner() {\\n        if (msg.sender != backendCoordinator && msg.sender != owner) revert OnlyBackendOrOwner();\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        if (msg.sender != factory) revert OnlyFactory();\\n        _;\\n    }\\n\\n    modifier onlyActive() {\\n        if (!isActive) revert WalletNotActive();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _owner Address of the wallet owner (user)\\n     * @param _backendCoordinator Address of the backend coordinator\\n     * @param _factory Address of the factory contract\\n     * @param _usdcAddress Address of the USDC token for this chain\\n     */\\n    constructor(\\n        address _owner,\\n        address _backendCoordinator,\\n        address _factory,\\n        address _usdcAddress\\n    ) {\\n        if (_owner == address(0) || _backendCoordinator == address(0) || _factory == address(0) || _usdcAddress == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        owner = _owner;\\n        backendCoordinator = _backendCoordinator;\\n        factory = _factory;\\n        USDC = IERC20(_usdcAddress);\\n        isActive = true;\\n\\n        // Initialize CCTP addresses for current chain\\n        _initializeCCTPAddresses();\\n    }\\n\\n    /**\\n     * @notice Initialize CCTP contract addresses for supported chains\\n     * @dev Uses Circle's official contract addresses\\n     */\\n    function _initializeCCTPAddresses() internal {\\n        // Ethereum Sepolia (Testnet)\\n        tokenMessengerAddresses[11155111] = 0x8FE6B999Dc680CcFDD5Bf7EB0974218be2542DAA;\\n        messageTransmitterAddresses[11155111] = 0xE737e5cEBEEBa77EFE34D4aa090756590b1CE275;\\n        cctpDomains[11155111] = 0;\\n\\n        // Base Sepolia (Testnet)\\n        tokenMessengerAddresses[84532] = 0x8FE6B999Dc680CcFDD5Bf7EB0974218be2542DAA;\\n        messageTransmitterAddresses[84532] = 0xE737e5cEBEEBa77EFE34D4aa090756590b1CE275;\\n        cctpDomains[84532] = 6;\\n\\n        // Arbitrum Sepolia (Testnet)\\n        tokenMessengerAddresses[421614] = 0x8FE6B999Dc680CcFDD5Bf7EB0974218be2542DAA;\\n        messageTransmitterAddresses[421614] = 0xE737e5cEBEEBa77EFE34D4aa090756590b1CE275;\\n        cctpDomains[421614] = 3;\\n\\n        // Ethereum Mainnet\\n        tokenMessengerAddresses[1] = 0x28b5a0e9C621a5BadaA536219b3a228C8168cf5d;\\n        messageTransmitterAddresses[1] = 0x81D40F21F12A8F0E3252Bccb954D722d4c464B64;\\n        cctpDomains[1] = 0;\\n\\n        // Base Mainnet\\n        tokenMessengerAddresses[8453] = 0x28b5a0e9C621a5BadaA536219b3a228C8168cf5d;\\n        messageTransmitterAddresses[8453] = 0x81D40F21F12A8F0E3252Bccb954D722d4c464B64;\\n        cctpDomains[8453] = 6;\\n\\n        // Arbitrum One Mainnet\\n        tokenMessengerAddresses[42161] = 0x28b5a0e9C621a5BadaA536219b3a228C8168cf5d;\\n        messageTransmitterAddresses[42161] = 0x81D40F21F12A8F0E3252Bccb954D722d4c464B64;\\n        cctpDomains[42161] = 3;\\n    }\\n\\n    /**\\n     * @notice Deposit USDC to start yield optimization\\n     * @param amount Amount of USDC to deposit\\n     * @param strategy Strategy preference (\\\"conservative\\\", \\\"balanced\\\", \\\"aggressive\\\")\\n     */\\n    function deposit(uint256 amount, string memory strategy)\\n        external\\n        onlyOwner\\n        onlyActive\\n        nonReentrant\\n    {\\n        if (amount == 0) revert InvalidAmount();\\n\\n        // Transfer USDC from owner to this wallet\\n        USDC.transferFrom(owner, address(this), amount);\\n\\n        // Update tracking\\n        totalDeposited += amount;\\n\\n        emit Deposited(owner, amount, strategy, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Execute CCTP cross-chain transfer using Circle's official contracts\\n     * @param amount Amount to transfer (in USDC wei - 6 decimals)\\n     * @param destinationChainId Destination chain ID\\n     * @param recipient Recipient address on destination chain\\n     * @param destinationChain Human-readable destination chain name\\n     * @return nonce CCTP nonce for tracking the transfer\\n     */\\n    function executeCCTP(\\n        uint256 amount,\\n        uint256 destinationChainId,\\n        address recipient,\\n        string memory destinationChain\\n    ) external onlyBackendOrOwner onlyActive nonReentrant returns (uint64 nonce) {\\n        if (amount == 0) revert InvalidAmount();\\n        if (recipient == address(0)) revert ZeroAddress();\\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\\n\\n        // Get CCTP contract addresses for current chain\\n        address tokenMessenger = tokenMessengerAddresses[block.chainid];\\n        uint32 destinationDomain = cctpDomains[destinationChainId];\\n\\n        if (tokenMessenger == address(0)) revert CCTPNotSupported();\\n        if (destinationDomain == 0 && destinationChainId != 11155111 && destinationChainId != 1) {\\n            revert InvalidDestinationDomain();\\n        }\\n\\n        // Convert recipient address to bytes32 format for CCTP\\n        bytes32 mintRecipient = bytes32(uint256(uint160(recipient)));\\n\\n        // Approve USDC spending by Circle's TokenMessenger\\n        USDC.approve(tokenMessenger, amount);\\n\\n        // Execute burn using Circle's official CCTP contract\\n        nonce = ITokenMessenger(tokenMessenger).depositForBurn(\\n            amount,\\n            destinationDomain,\\n            mintRecipient,\\n            address(USDC)\\n        );\\n\\n        // Track the transfer state\\n        cctpTransfers[nonce] = CCTPTransfer({\\n            nonce: nonce,\\n            amount: amount,\\n            destinationDomain: destinationDomain,\\n            recipient: recipient,\\n            messageHash: bytes32(0), // Will be set when completed\\n            status: 1, // burned\\n            timestamp: block.timestamp,\\n            retryCount: 0,\\n            destinationChain: destinationChain\\n        });\\n\\n        activeCCTPTransfers.push(nonce);\\n\\n        emit CCTPBurnExecuted(nonce, amount, destinationDomain, recipient, destinationChain, block.timestamp);\\n        return nonce;\\n    }\\n\\n    /**\\n     * @notice Complete CCTP transfer by minting on destination chain\\n     * @param message Message from source chain burn transaction\\n     * @param attestation Circle's attestation signature\\n     * @param nonce CCTP nonce to complete\\n     * @return success True if mint was successful\\n     */\\n    function completeCCTP(\\n        bytes memory message,\\n        bytes memory attestation,\\n        uint64 nonce\\n    ) external onlyBackendOrOwner onlyActive nonReentrant returns (bool success) {\\n        // Verify transfer exists and is in correct state\\n        CCTPTransfer storage transfer = cctpTransfers[nonce];\\n        if (transfer.amount == 0) revert TransferNotFound();\\n        if (transfer.status == 2) revert TransferAlreadyCompleted();\\n        if (transfer.status == 3) revert CCTPMintFailed();\\n\\n        // Generate message hash for duplicate protection\\n        bytes32 messageHash = keccak256(message);\\n        if (processedMessages[messageHash]) revert MessageAlreadyProcessed();\\n\\n        // Get MessageTransmitter for current chain\\n        address messageTransmitter = messageTransmitterAddresses[block.chainid];\\n        if (messageTransmitter == address(0)) revert CCTPNotSupported();\\n\\n        // Execute mint using Circle's official CCTP contract\\n        success = IMessageTransmitter(messageTransmitter).receiveMessage(\\n            message,\\n            attestation\\n        );\\n\\n        if (!success) {\\n            transfer.retryCount++;\\n            if (transfer.retryCount >= 3) {\\n                transfer.status = 3; // failed\\n                emit CCTPTransferFailed(nonce, \\\"Max retries exceeded\\\", block.timestamp);\\n            }\\n            revert CCTPMintFailed();\\n        }\\n\\n        // Mark as completed\\n        transfer.status = 2; // completed\\n        transfer.messageHash = messageHash;\\n        processedMessages[messageHash] = true;\\n\\n        emit CCTPMintCompleted(nonce, messageHash, transfer.amount, block.timestamp);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get CCTP transfer details\\n     * @param nonce CCTP nonce\\n     * @return transfer CCTPTransfer struct\\n     */\\n    function getCCTPTransfer(uint64 nonce) external view returns (CCTPTransfer memory transfer) {\\n        return cctpTransfers[nonce];\\n    }\\n\\n    /**\\n     * @notice Verify if a CCTP transfer was completed\\n     * @param nonce CCTP nonce\\n     * @return exists True if transfer exists\\n     * @return completed True if transfer was completed\\n     * @return amount Transfer amount\\n     * @return recipient Recipient address\\n     */\\n    function verifyCCTPTransfer(uint64 nonce) external view returns (\\n        bool exists,\\n        bool completed,\\n        uint256 amount,\\n        address recipient\\n    ) {\\n        CCTPTransfer memory transfer = cctpTransfers[nonce];\\n        return (\\n            transfer.amount > 0,\\n            transfer.status == 2,\\n            transfer.amount,\\n            transfer.recipient\\n        );\\n    }\\n\\n    /**\\n     * @notice Get all active CCTP transfer nonces\\n     * @return nonces Array of active transfer nonces\\n     */\\n    function getActiveCCTPTransfers() external view returns (uint64[] memory nonces) {\\n        return activeCCTPTransfers;\\n    }\\n\\n    /**\\n     * @notice Cancel a pending CCTP transfer (emergency only)\\n     * @param nonce CCTP nonce to cancel\\n     */\\n    function cancelCCTPTransfer(uint64 nonce) external onlyOwner {\\n        CCTPTransfer storage transfer = cctpTransfers[nonce];\\n        if (transfer.amount == 0) revert TransferNotFound();\\n        if (transfer.status != 0) revert TransferAlreadyCompleted();\\n\\n        transfer.status = 3; // failed\\n        emit CCTPTransferCancelled(nonce, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Mark a CCTP transfer as failed (backend only)\\n     * @param nonce CCTP nonce\\n     * @param reason Failure reason\\n     */\\n    function markCCTPFailed(uint64 nonce, string memory reason) external onlyBackendOrOwner {\\n        CCTPTransfer storage transfer = cctpTransfers[nonce];\\n        if (transfer.amount == 0) revert TransferNotFound();\\n        if (transfer.status == 2) revert TransferAlreadyCompleted();\\n\\n        transfer.status = 3; // failed\\n        emit CCTPTransferFailed(nonce, reason, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Allocate funds to a DeFi protocol\\n     * @param protocolName Name of the protocol\\n     * @param adapter Address of the protocol adapter\\n     * @param amount Amount to allocate\\n     */\\n    function allocateToProtocol(\\n        string memory protocolName,\\n        address adapter,\\n        uint256 amount\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (adapter == address(0)) revert ZeroAddress();\\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\\n\\n        // Approve and deposit to protocol\\n        USDC.transfer(adapter, amount);\\n        IProtocolAdapter(adapter).deposit(owner, amount);\\n\\n        // Update tracking\\n        if (protocolBalances[protocolName] == 0) {\\n            activeProtocols.push(protocolName);\\n        }\\n        protocolBalances[protocolName] += amount;\\n        adapterBalances[adapter] += amount;\\n\\n        emit ProtocolAllocation(protocolName, adapter, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from a DeFi protocol\\n     * @param protocolName Name of the protocol\\n     * @param adapter Address of the protocol adapter\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawFromProtocol(\\n        string memory protocolName,\\n        address adapter,\\n        uint256 amount\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (adapter == address(0)) revert ZeroAddress();\\n        if (protocolBalances[protocolName] < amount) revert InsufficientBalance();\\n\\n        // Withdraw from protocol\\n        IProtocolAdapter(adapter).withdraw(owner, amount);\\n\\n        // Update tracking\\n        protocolBalances[protocolName] -= amount;\\n        adapterBalances[adapter] -= amount;\\n\\n        // Remove from active protocols if balance is zero\\n        if (protocolBalances[protocolName] == 0) {\\n            _removeProtocol(protocolName);\\n        }\\n\\n        emit ProtocolWithdrawal(protocolName, adapter, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Batch allocate to multiple protocols\\n     * @param protocolNames Array of protocol names\\n     * @param adapters Array of adapter addresses\\n     * @param amounts Array of amounts\\n     */\\n    function batchAllocate(\\n        string[] memory protocolNames,\\n        address[] memory adapters,\\n        uint256[] memory amounts\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        uint256 length = protocolNames.length;\\n        require(\\n            length == adapters.length && length == amounts.length,\\n            \\\"Array length mismatch\\\"\\n        );\\n\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            totalAmount += amounts[i];\\n        }\\n\\n        if (USDC.balanceOf(address(this)) < totalAmount) revert InsufficientBalance();\\n\\n        // Protocol allocation will be implemented later with chain-specific adapters\\n        // For now, just emit an event for the backend to track\\n        emit AllocationExecuted(protocolNames, adapters, amounts);\\n    }\\n\\n    /**\\n     * @notice Emergency withdrawal by owner (bypass all restrictions)\\n     * @dev Withdraws all USDC balance to owner\\n     */\\n    function emergencyWithdraw() external onlyOwner nonReentrant {\\n        uint256 balance = USDC.balanceOf(address(this));\\n        if (balance == 0) revert InsufficientBalance();\\n\\n        USDC.transfer(owner, balance);\\n        totalWithdrawn += balance;\\n\\n        emit EmergencyWithdrawal(owner, balance, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Regular withdrawal by owner\\n     * @param amount Amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external onlyOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\\n\\n        USDC.transfer(owner, amount);\\n        totalWithdrawn += amount;\\n\\n        emit Withdrawn(owner, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Deactivate wallet (emergency only, by owner)\\n     */\\n    function deactivateWallet() external onlyOwner {\\n        isActive = false;\\n        emit WalletDeactivated(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Reactivate wallet (can be called by owner or factory)\\n     */\\n    function reactivateWallet() external {\\n        if (msg.sender != owner && msg.sender != factory) {\\n            revert OnlyBackendOrOwner();\\n        }\\n        isActive = true;\\n    }\\n\\n    /**\\n     * @notice Execute arbitrary backend action (with restrictions)\\n     * @param target Target contract address\\n     * @param data Encoded function call data\\n     */\\n    function executeBackendAction(address target, bytes calldata data)\\n        external\\n        onlyBackendOrOwner\\n        onlyActive\\n        nonReentrant\\n        returns (bytes memory result)\\n    {\\n        // Security checks\\n        require(target != address(USDC), \\\"Cannot call USDC directly\\\");\\n        require(target != address(this), \\\"Cannot call self\\\");\\n\\n        (bool success, bytes memory returnData) = target.call(data);\\n        require(success, \\\"Backend action failed\\\");\\n\\n        emit BackendActionExecuted(\\\"external_call\\\", data, block.timestamp);\\n        return returnData;\\n    }\\n\\n    // View functions\\n\\n    /**\\n     * @notice Get USDC balance of this wallet\\n     * @return balance Current USDC balance\\n     */\\n    function getBalance() external view returns (uint256 balance) {\\n        return USDC.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Get protocol balance for a specific protocol\\n     * @param protocolName Name of the protocol\\n     * @return balance Balance in that protocol\\n     */\\n    function getProtocolBalance(string memory protocolName)\\n        external\\n        view\\n        returns (uint256 balance)\\n    {\\n        return protocolBalances[protocolName];\\n    }\\n\\n    /**\\n     * @notice Get all active protocols\\n     * @return protocols Array of active protocol names\\n     */\\n    function getActiveProtocols() external view returns (string[] memory protocols) {\\n        return activeProtocols;\\n    }\\n\\n    /**\\n     * @notice Get total value across all protocols and wallet\\n     * @return totalValue Total value in USDC\\n     */\\n    function getTotalValue() external view returns (uint256 totalValue) {\\n        totalValue = USDC.balanceOf(address(this));\\n\\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\\n            totalValue += protocolBalances[activeProtocols[i]];\\n        }\\n    }\\n\\n    /**\\n     * @notice Get wallet summary\\n     * @return usdcBalance Current USDC balance\\n     * @return totalAllocated Total amount allocated to protocols\\n     * @return protocolCount Number of active protocols\\n     * @return active Whether the wallet is active\\n     */\\n    function getWalletSummary() external view returns (\\n        uint256 usdcBalance,\\n        uint256 totalAllocated,\\n        uint256 protocolCount,\\n        bool active\\n    ) {\\n        usdcBalance = USDC.balanceOf(address(this));\\n\\n        totalAllocated = 0;\\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\\n            totalAllocated += protocolBalances[activeProtocols[i]];\\n        }\\n\\n        protocolCount = activeProtocols.length;\\n        active = isActive;\\n    }\\n\\n    /**\\n     * @notice Check if wallet has sufficient balance for amount\\n     * @param amount Amount to check\\n     * @return sufficient True if balance is sufficient\\n     */\\n    function hasSufficientBalance(uint256 amount) external view returns (bool sufficient) {\\n        return USDC.balanceOf(address(this)) >= amount;\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @notice Remove protocol from active list\\n     * @param protocolName Protocol to remove\\n     */\\n    function _removeProtocol(string memory protocolName) internal {\\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\\n            if (keccak256(bytes(activeProtocols[i])) == keccak256(bytes(protocolName))) {\\n                activeProtocols[i] = activeProtocols[activeProtocols.length - 1];\\n                activeProtocols.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Receive ETH (for gas if needed)\\n     */\\n    receive() external payable {\\n        // Allow receiving ETH for gas payments\\n    }\\n\\n    /**\\n     * @notice Batch execute multiple operations for gas efficiency\\n     * @param calls Array of encoded function calls\\n     * @dev Can only be called by backend or owner for automation\\n     */\\n    function batchExecute(bytes[] calldata calls)\\n        external\\n        onlyBackendOrOwner\\n        onlyActive\\n        nonReentrant\\n    {\\n        require(calls.length > 0, \\\"No calls provided\\\");\\n        require(calls.length <= 10, \\\"Too many calls\\\"); // Prevent gas limit issues\\n\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory result) = address(this).call(calls[i]);\\n            if (!success) {\\n                // Decode revert reason\\n                if (result.length < 68) revert(\\\"Call failed\\\");\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n        }\\n\\n        emit BackendActionExecuted(\\\"batch_execute\\\", abi.encode(calls.length), block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Update CCTP configuration for a chain (admin only)\\n     * @param chainId Chain ID to update\\n     * @param tokenMessenger TokenMessenger address\\n     * @param messageTransmitter MessageTransmitter address\\n     * @param domain CCTP domain\\n     */\\n    function updateCCTPConfig(\\n        uint256 chainId,\\n        address tokenMessenger,\\n        address messageTransmitter,\\n        uint32 domain\\n    ) external onlyOwner {\\n        tokenMessengerAddresses[chainId] = tokenMessenger;\\n        messageTransmitterAddresses[chainId] = messageTransmitter;\\n        cctpDomains[chainId] = domain;\\n\\n        emit CCTPConfigUpdated(chainId, tokenMessenger, messageTransmitter, domain);\\n    }\\n\\n    /**\\n     * @notice Check if CCTP is supported on current chain\\n     * @return supported True if CCTP is supported\\n     */\\n    function isCCTPSupported() external view returns (bool supported) {\\n        return tokenMessengerAddresses[block.chainid] != address(0);\\n    }\\n\\n    /**\\n     * @notice Get CCTP configuration for current chain\\n     * @return tokenMessenger TokenMessenger address\\n     * @return messageTransmitter MessageTransmitter address\\n     * @return domain CCTP domain\\n     */\\n    function getCCTPConfig() external view returns (\\n        address tokenMessenger,\\n        address messageTransmitter,\\n        uint32 domain\\n    ) {\\n        return (\\n            tokenMessengerAddresses[block.chainid],\\n            messageTransmitterAddresses[block.chainid],\\n            cctpDomains[block.chainid]\\n        );\\n    }\\n\\n    /**\\n     * @notice Get contract version\\n     * @return version Contract version\\n     */\\n    function version() external pure returns (string memory) {\\n        return \\\"2.0.0-cctp\\\";\\n    }\\n}\",\"keccak256\":\"0x037cb880889d4fbb5c849fb4d89e4364f5086df1cdc883967500cb7bf9edc041\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IProtocolAdapter\\n * @notice Interface for protocol adapters in the CrossYield system\\n * @dev All protocol adapters must implement this interface\\n */\\ninterface IProtocolAdapter {\\n    /**\\n     * @notice Deposit assets into the protocol on behalf of a user\\n     * @param user Address of the user\\n     * @param amount Amount to deposit\\n     */\\n    function deposit(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw assets from the protocol for a user\\n     * @param user Address of the user\\n     * @param amount Amount to withdraw\\n     */\\n    function withdraw(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the balance of a user in this protocol\\n     * @param user Address of the user\\n     * @return balance User's balance in the protocol\\n     */\\n    function balanceOf(address user) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Get the current APY offered by this protocol\\n     * @return apy Current APY in basis points (e.g., 500 = 5%)\\n     */\\n    function getCurrentAPY() external view returns (uint256 apy);\\n\\n    /**\\n     * @notice Get protocol information\\n     * @return name Protocol name\\n     * @return riskScore Risk score (0-100, lower is safer)\\n     * @return tvl Total value locked in USD\\n     */\\n    function getProtocolInfo() external view returns (\\n        string memory name,\\n        uint256 riskScore,\\n        uint256 tvl\\n    );\\n\\n    /**\\n     * @notice Check if deposits are currently allowed\\n     * @return allowed True if deposits are allowed\\n     */\\n    function isDepositAllowed() external view returns (bool allowed);\\n\\n    /**\\n     * @notice Check if withdrawals are currently allowed\\n     * @return allowed True if withdrawals are allowed\\n     */\\n    function isWithdrawAllowed() external view returns (bool allowed);\\n}\",\"keccak256\":\"0xb4a000f5a5357d196443a2afc21c1c1b2d9beff1bcc393325fa250ff0d589465\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162005be538038062005be58339810160408190526200003491620001a7565b806001600160a01b0381166200006557604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b62000070816200013a565b506001600160a01b038316620000c95760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206261636b656e6420636f6f7264696e61746f72000000000060448201526064016200005c565b6001600160a01b038216620001215760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642055534443206164647265737300000000000000000000000060448201526064016200005c565b506001600160a01b039182166080521660a052620001f1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001a257600080fd5b919050565b600080600060608486031215620001bd57600080fd5b620001c8846200018a565b9250620001d8602085016200018a565b9150620001e8604085016200018a565b90509250925092565b60805160a0516159b262000233600039600081816101500152818161048001526109b90152600081816101fb01528181610450015261099701526159b26000f3fe60806040523480156200001157600080fd5b5060043610620001455760003560e01c806383657f7711620000bb578063b054a9e8116200007a578063b054a9e81462000374578063ba51a7b3146200038b578063de95a2e714620003ba578063f2fde38b14620003e6578063f5f50eb114620003fd57600080fd5b806383657f7714620002f55780638da5cb5b146200031b578063966708a5146200032d578063a926819f1462000344578063ab9ae6ec146200035b57600080fd5b806359fa139f116200010857806359fa139f146200024657806363e6ffdd1462000275578063713bb95c14620002a1578063715018a614620002b857806380dc8b0614620002c457600080fd5b806302d45457146200014a57806304d0a647146200018f578063439a301214620001be5780634b19f25514620001f557806354fd4d50146200021d575b600080fd5b620001727f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b62000172620001a036600462000c37565b6001600160a01b039081166000908152600160205260409020541690565b620001e4620001cf36600462000c37565b60026020526000908152604090205460ff1681565b604051901515815260200162000186565b620001727f000000000000000000000000000000000000000000000000000000000000000081565b60408051808201825260058152640312e302e360dc1b6020820152905162000186919062000c84565b620001726200025736600462000c37565b6001600160a01b039081166000908152600360205260409020541690565b620001726200028636600462000c37565b6001602052600090815260409020546001600160a01b031681565b62000172620002b236600462000c37565b62000405565b620002c262000536565b005b620001e4620002d536600462000c37565b6001600160a01b0390811660009081526001602052604090205416151590565b6200030c6200030636600462000cb9565b6200054e565b60405162000186919062000d33565b6000546001600160a01b031662000172565b620001726200033e36600462000c37565b620007d0565b620002c26200035536600462000c37565b62000864565b62000365620008ec565b60405190815260200162000186565b620001726200038536600462000c37565b62000920565b620001e46200039c36600462000c37565b6001600160a01b031660009081526002602052604090205460ff1690565b62000172620003cb36600462000c37565b6003602052600090815260409020546001600160a01b031681565b620002c2620003f736600462000c37565b62000aeb565b600062000365565b600080620004138362000b2f565b9050600060405180602001620004299062000c13565b601f1982820381018352601f9091011660408181526001600160a01b0387811660208401527f00000000000000000000000000000000000000000000000000000000000000008116918301919091523060608301527f000000000000000000000000000000000000000000000000000000000000000016608082015260a00160408051601f1981840301815290829052620004c8929160200162000d82565b60408051808303601f1901815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff191660218501526035840195909552605580840195909552815180840390950185526075909201905282519201919091209392505050565b6200054062000b94565b6200054c600062000bc3565b565b606081801580159062000562575060648111155b620005a95760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642062617463682073697a6560701b60448201526064015b60405180910390fd5b8067ffffffffffffffff811115620005c557620005c562000db5565b604051908082528060200260200182016040528015620005ef578160200160208202803683370190505b50915060005b81811015620007c857600060018187878581811062000618576200061862000dcb565b90506020020160208101906200062f919062000c37565b6001600160a01b0390811682526020820192909252604001600020541614620006de57600160008686848181106200066b576200066b62000dcb565b905060200201602081019062000682919062000c37565b6001600160a01b0390811682526020820192909252604001600020548451911690849083908110620006b857620006b862000dcb565b60200260200101906001600160a01b031690816001600160a01b031681525050620007b3565b3063b054a9e8868684818110620006f957620006f962000dcb565b905060200201602081019062000710919062000c37565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af115801562000757573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200077d919062000de1565b83828151811062000792576200079262000dcb565b60200260200101906001600160a01b031690816001600160a01b0316815250505b80620007bf8162000e01565b915050620005f5565b505092915050565b6001600160a01b03811660009081526002602052604081205460ff16620007f957506000919050565b816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000838573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200085e919062000de1565b92915050565b6200086e62000b94565b6001600160a01b03811660009081526002602052604090205460ff16620008cb5760405162461bcd60e51b815260206004820152601060248201526f15d85b1b195d081b9bdd081d985b1a5960821b6044820152606401620005a0565b6001600160a01b03166000908152600260205260409020805460ff19169055565b600060405180602001620009009062000c13565b6020820181038252601f19601f8201166040525080519060200120905090565b60006001600160a01b0382166200094a5760405163fd684c3b60e01b815260040160405180910390fd5b6001600160a01b0382811660009081526001602052604090205416156200098457604051630f721df160e31b815260040160405180910390fd5b6000620009918362000b2f565b905080837f0000000000000000000000000000000000000000000000000000000000000000307f0000000000000000000000000000000000000000000000000000000000000000604051620009e69062000c13565b6001600160a01b0394851681529284166020840152908316604083015290911660608201526080018190604051809103906000f590508015801562000a2f573d6000803e3d6000fd5b5091506001600160a01b03821662000a5a576040516303792e6560e61b815260040160405180910390fd5b6001600160a01b03838116600081815260016020818152604080842080546001600160a01b0319908116978a1697881790915586855260028352818520805460ff191690941790935560038252928390208054909216841790915590518481527fbdbcb584581e4f688b28038d847fa0c73130b688da678029bcb98e32fec769a2910160405180910390a350919050565b62000af562000b94565b6001600160a01b03811662000b2157604051631e4fbdf760e01b815260006004820152602401620005a0565b62000b2c8162000bc3565b50565b6040517f43726f73735969656c645f536d61727457616c6c65745f00000000000000000060208201526bffffffffffffffffffffffff19606083901b166037820152600090604b01604051602081830303815290604052805190602001209050919050565b6000546001600160a01b031633146200054c5760405163118cdaa760e01b8152336004820152602401620005a0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614b538062000e2a83390190565b6001600160a01b038116811462000b2c57600080fd5b60006020828403121562000c4a57600080fd5b813562000c578162000c21565b9392505050565b60005b8381101562000c7b57818101518382015260200162000c61565b50506000910152565b602081526000825180602084015262000ca581604085016020870162000c5e565b601f01601f19169190910160400192915050565b6000806020838503121562000ccd57600080fd5b823567ffffffffffffffff8082111562000ce657600080fd5b818501915085601f83011262000cfb57600080fd5b81358181111562000d0b57600080fd5b8660208260051b850101111562000d2157600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b8181101562000d765783516001600160a01b03168352928401929184019160010162000d4f565b50909695505050505050565b6000835162000d9681846020880162000c5e565b83519083019062000dac81836020880162000c5e565b01949350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000df457600080fd5b815162000c578162000c21565b60006001820162000e2257634e487b7160e01b600052601160045260246000fd5b506001019056fe6101006040523480156200001257600080fd5b5060405162004b5338038062004b5383398101604081905262000035916200045e565b60016000556001600160a01b03841615806200005857506001600160a01b038316155b806200006b57506001600160a01b038216155b806200007e57506001600160a01b038116155b156200009d5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0380851660805283811660a05282811660c052811660e0526001805460ff191681179055620004377fec9873545bb8a5d2d42da3057cc304585f23a42265e7802a750aae6684a644818054738fe6b999dc680ccfdd5bf7eb0974218be2542daa6001600160a01b031991821681179092557f548c5e1d41c3f82172464b7edaa915cc675ade8b90fffe223abb8a4ff3f26f11805473e737e5cebeeba77efe34d4aa090756590b1ce27590831681179091557fa7eff475ecfcbdf067c2158d42f27ce03194025ca94bd6d53f8a5fc61250863d805463ffffffff199081169091557faaf21b853e7b00b42b68f9d394449dae365a44398382277bb592a9c5243ae02880548416851790557f4c174d71a6cfe2d71828895204ea66f6db51e132305b86fbe4f89e56f5ad7bc780548416831790557f294d49a231d98de3525d5eec09954453967129350d9738e750254f3a6edcb75c8054600690831681179091557fc1b574f6625cd5cbe79a84558b9eaa7cfed6c0eaaa47d983eebebed13c5932ed805485169095179094557fac2f5069bd7e438cbd1102e529f6f3d1ed744a7035a7f71299b3e7dea4b83576805484169092179091557fc311d04df44acf7343b3e39fe3b9968a17f22876be9582994c4218a144ddc5788054600390831681179091557fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82880547328b5a0e9c621a5badaa536219b3a228c8168cf5d90851681179091557fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f80547381d40f21f12a8f0e3252bccb954d722d4c464b6490861681179091557f92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a368054851690557ec926fc893501ce5ad439ad7af72d794e5fd17fa1b09c50e4c335249310c01380548616831790557f4f278913b1c0a191cf7273bd8fe8a6a363cdd828060c2170092d5cc6fb2b73aa80548616821790557fd4fe022f7fad12ba8ee1acb88fbbe13753ff2120c7c2c88dcdcb8794b80f474e8054851690961790955561a4b16000527fa7540f530be45c6674dd99d492017379fb77c281d9721ac80290a13fa98775088054851690911790557f7e8bc9853458e96c6f3a5b5a9b420ab6feac098cbfa4fcf6c9966e813a3bb182805490931690931790915560096020527f34ef77749ddeb0092c7c69d8f1e0fc86dcc071ab05d64633a12bc8ee58ed820380549091169091179055565b50505050620004bb565b80516001600160a01b03811681146200045957600080fd5b919050565b600080600080608085870312156200047557600080fd5b620004808562000441565b9350620004906020860162000441565b9250620004a06040860162000441565b9150620004b06060860162000441565b905092959194509250565b60805160a05160c05160e05161450e620006456000396000818161061c0152818161099801528181610b6801528181610c400152818161125e015281816116a70152818161175f01528181611ae201528181611c1a015281816126d2015281816127d8015281816129d301528181612b2001528181612bc101528181612ebe01528181612f9a01526132490152600081816107ab015261206101526000818161040201528181610d42015281816111bc015281816115a80152818161198f01528181611d89015281816120bb0152818161242301526128d401526000818161065001528181610ac701528181610c1101528181610cdc01528181610d76015281816110b6015281816111f001528181611429015281816114b1015281816115dc015281816117e4015281816119c301528181611dbd0152818161202d015281816120ef01528181612457015281816125610152818161290801528181612e6001528181612f6b01528181613036015281816131730152818161321401526132d2015261450e6000f3fe6080604052600436106102605760003560e01c806388ba16ab11610144578063c45a0155116100b6578063dc8cff3c1161007a578063dc8cff3c1461084e578063ef97108a146108b0578063f081e368146108dd578063f1215d25146108ff578063f9335c161461091f578063ff50abdc1461096a57600080fd5b8063c45a015514610799578063caa648b4146107cd578063cd156c6a146107e2578063da831dd314610819578063db2e21bc1461083957600080fd5b80639c9080bf116101085780639c9080bf146106a7578063a58ff35e146106dd578063aae29f38146106ff578063ab6d72531461071f578063ac8929351461074c578063ad67efe01461077957600080fd5b806388ba16ab146105da57806389a302711461060a5780638da5cb5b1461063e57806394b385241461067257806396b31f701461068757600080fd5b80634b19f255116101dd5780637bd2d8ac116101a15780637bd2d8ac146104c55780637dd19fff146104e557806380b62e9e1461052d57806383e554a214610565578063849602ac14610585578063856a65eb146105ba57600080fd5b80634b19f255146103f05780634b319713146104245780634f9ac0af1461043a57806354fd4d501461045a5780635dce2fa91461048d57600080fd5b8063312195db11610224578063312195db1461035b5780633751f6501461037b57806337d7c2c81461039b5780633e0ac1af146103bb57806342f008ae146103d057600080fd5b806312065fe01461026c57806322f3e2d4146102945780632a0d47c1146102be5780632aacadaf146102eb5780632e1a7d4d1461033957600080fd5b3661026757005b600080fd5b34801561027857600080fd5b50610281610980565b6040519081526020015b60405180910390f35b3480156102a057600080fd5b506001546102ae9060ff1681565b604051901515815260200161028b565b3480156102ca57600080fd5b506102de6102d93660046135f6565b610a10565b60405161028b919061365f565b3480156102f757600080fd5b506103216103063660046135f6565b6008602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161028b565b34801561034557600080fd5b506103596103543660046135f6565b610abc565b005b34801561036757600080fd5b506102ae61037636600461374a565b610d35565b34801561038757600080fd5b506103596103963660046137c1565b6110ab565b3480156103a757600080fd5b506102de6103b63660046137fa565b6111af565b3480156103c757600080fd5b5061035961141e565b3480156103dc57600080fd5b506103596103eb36600461387c565b6114a6565b3480156103fc57600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b34801561043057600080fd5b5061028160035481565b34801561044657600080fd5b506103596104553660046138d4565b61159d565b34801561046657600080fd5b5060408051808201909152600a8152690322e302e302d636374760b41b60208201526102de565b34801561049957600080fd5b506102816104a836600461392a565b805160208183018101805160048252928201919093012091525481565b3480156104d157600080fd5b506103596104e0366004613a49565b611984565b3480156104f157600080fd5b506105186105003660046135f6565b60096020526000908152604090205463ffffffff1681565b60405163ffffffff909116815260200161028b565b34801561053957600080fd5b5061054d6105483660046135f6565b611bbb565b6040516001600160401b03909116815260200161028b565b34801561057157600080fd5b506102ae6105803660046135f6565b611bf8565b34801561059157600080fd5b506105a56105a03660046137c1565b611c8d565b60405161028b99989796959493929190613b40565b3480156105c657600080fd5b506103596105d5366004613baf565b611d7e565b3480156105e657600080fd5b506102ae6105f53660046135f6565b600b6020526000908152604090205460ff1681565b34801561061657600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b34801561064a57600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b34801561067e57600080fd5b50610359612022565b34801561069357600080fd5b506103596106a2366004613c23565b6120b0565b3480156106b357600080fd5b506103216106c23660046135f6565b6007602052600090815260409020546001600160a01b031681565b3480156106e957600080fd5b506106f26121ee565b60405161028b9190613c72565b34801561070b57600080fd5b5061028161071a36600461392a565b612278565b34801561072b57600080fd5b50466000908152600760205260409020546001600160a01b031615156102ae565b34801561075857600080fd5b5061076c6107673660046137c1565b6122a0565b60405161028b9190613cbf565b34801561078557600080fd5b506103596107943660046138d4565b612418565b3480156107a557600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b3480156107d957600080fd5b506102816126ba565b3480156107ee57600080fd5b506107f76127b2565b604080519485526020850193909352918301521515606082015260800161028b565b34801561082557600080fd5b5061054d610834366004613d64565b6128c7565b34801561084557600080fd5b50610359612e55565b34801561085a57600080fd5b5046600090815260076020908152604080832054600883528184205460098452938290205482516001600160a01b039283168152919094169281019290925263ffffffff9092169181019190915260600161028b565b3480156108bc57600080fd5b506102816108cb366004613dc4565b60056020526000908152604090205481565b3480156108e957600080fd5b506108f261308f565b60405161028b9190613e34565b34801561090b57600080fd5b5061035961091a366004613e47565b613168565b34801561092b57600080fd5b5061093f61093a3660046137c1565b61333f565b6040805194151585529215156020850152918301526001600160a01b0316606082015260800161028b565b34801561097657600080fd5b5061028160025481565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b9190613e77565b905090565b60068181548110610a2057600080fd5b906000526020600020016000915090508054610a3b90613e90565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6790613e90565b8015610ab45780601f10610a8957610100808354040283529160200191610ab4565b820191906000526020600020905b815481529060010190602001808311610a9757829003601f168201915b505050505081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b0557604051635fc483c560e01b815260040160405180910390fd5b60015460ff16610b2857604051631f11e7a160e01b815260040160405180910390fd5b610b3061349d565b80600003610b515760405163162908e360e11b815260040160405180910390fd5b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdb9190613e77565b1015610bfa57604051631e9acf1760e31b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad9190613eca565b508060036000828254610cc09190613f02565b9091555050604080518281524260208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a2610d326001600055565b50565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610d995750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15610db75760405163e506ea2960e01b815260040160405180910390fd5b60015460ff16610dda57604051631f11e7a160e01b815260040160405180910390fd5b610de261349d565b6001600160401b0382166000908152600a602052604081206001810154909103610e1f57604051632b44303360e11b815260040160405180910390fd5b600481015460ff16600203610e47576040516305de099160e31b815260040160405180910390fd5b600481015460ff16600303610e6f57604051634d10bf4d60e01b815260040160405180910390fd5b84516020808701919091206000818152600b90925260409091205460ff1615610eab57604051637b04260960e01b815260040160405180910390fd5b466000908152600860205260409020546001600160a01b031680610ee2576040516325928b3b60e01b815260040160405180910390fd5b604051630afd9fa560e31b81526001600160a01b038216906357ecfd2890610f10908a908a90600401613f1b565b6020604051808303816000875af1158015610f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f539190613eca565b93508361101157600683018054906000610f6c83613f49565b91905055506003836006015410610ff85760048301805460ff19166003179055604080518181526014918101919091527313585e081c995d1c9a595cc8195e18d95959195960621b60608201524260208201526001600160401b038616907ff7b31590d63024db3f1420d7062cfc9835f06ebcfe26d1b0937450045f8940589060800160405180910390a25b604051634d10bf4d60e01b815260040160405180910390fd5b600483018054600260ff1991821617909155600384018390556000838152600b6020908152604091829020805490931660019081179093559185015481518581529283015242908201526001600160401b038616907f74751c76690c231994dfc007d365af24d7468a87215e7b21ee0807f6b2a4941a9060600160405180910390a2600193505050506110a46001600055565b9392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110f457604051635fc483c560e01b815260040160405180910390fd5b6001600160401b0381166000908152600a60205260408120600181015490910361113157604051632b44303360e11b815260040160405180910390fd5b600481015460ff1615611157576040516305de099160e31b815260040160405180910390fd5b60048101805460ff191660031790556040516001600160401b038316907fecad78f23d374782044f5178afd0845ba6ddfd8a31d49d3be28f626396509903906111a39042815260200190565b60405180910390a25050565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906112135750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156112315760405163e506ea2960e01b815260040160405180910390fd5b60015460ff1661125457604051631f11e7a160e01b815260040160405180910390fd5b61125c61349d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316036112e25760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742063616c6c2055534443206469726563746c790000000000000060448201526064015b60405180910390fd5b306001600160a01b0385160361132d5760405162461bcd60e51b815260206004820152601060248201526f21b0b73737ba1031b0b6361039b2b63360811b60448201526064016112d9565b600080856001600160a01b0316858560405161134a929190613f62565b6000604051808303816000865af19150503d8060008114611387576040519150601f19603f3d011682016040523d82523d6000602084013e61138c565b606091505b5091509150816113d65760405162461bcd60e51b8152602060048201526015602482015274109858dad95b99081858dd1a5bdb8819985a5b1959605a1b60448201526064016112d9565b7f61b1db00fa46b85aac40d41d854693dc167433f5e067021d1d6689cd5d6ad9e985854260405161140993929190613f72565b60405180910390a19150506110a46001600055565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461146757604051635fc483c560e01b815260040160405180910390fd5b6001805460ff191690556040514281527fa195e25d5f54c88c4b12f36a9379ed681d0a5d83b64baada004ca76278b22cfc9060200160405180910390a1565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114ef57604051635fc483c560e01b815260040160405180910390fd5b600084815260076020908152604080832080546001600160a01b03199081166001600160a01b038981169182179093556008855283862080549092169288169283179091556009845293829020805463ffffffff191663ffffffff87169081179091558251898152938401949094529082015260608101919091527f79cd5749505a88726e06cf1fb44a8c70b5ec8bbf8884bf65d76f2957f3577e0c9060800160405180910390a150505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906115ff5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b1561161d5760405163e506ea2960e01b815260040160405180910390fd5b60015460ff1661164057604051631f11e7a160e01b815260040160405180910390fd5b61164861349d565b806000036116695760405163162908e360e11b815260040160405180910390fd5b6001600160a01b0382166116905760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a9190613e77565b101561173957604051631e9acf1760e31b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156117a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cc9190613eca565b506040516311f9fbc960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390528316906347e7ef2490604401600060405180830381600087803b15801561183757600080fd5b505af115801561184b573d6000803e3d6000fd5b5050505060048360405161185f9190613fcf565b9081526020016040518091039020546000036118b357600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f016118b18482614039565b505b806004846040516118c49190613fcf565b908152602001604051809103902060008282546118e19190613f02565b90915550506001600160a01b0382166000908152600560205260408120805483929061190e908490613f02565b9091555050604051611921908490613fcf565b604080519182900382206001600160a01b0385168352602083018490524291830191909152907f704fa75bdda643242cc116c3a73ed29267a841ff3023581c2275cf6cb77119bd906060015b60405180910390a261197f6001600055565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906119e65750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15611a045760405163e506ea2960e01b815260040160405180910390fd5b60015460ff16611a2757604051631f11e7a160e01b815260040160405180910390fd5b611a2f61349d565b8251825181148015611a415750815181145b611a855760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60448201526064016112d9565b6000805b82811015611aca57838181518110611aa357611aa36140f8565b602002602001015182611ab69190613f02565b915080611ac281613f49565b915050611a89565b506040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b559190613e77565b1015611b7457604051631e9acf1760e31b815260040160405180910390fd5b7f755a9d37c1df505691fdf90a892fc4bbda4bd7134ba469c9ce720e88f876bf29858585604051611ba79392919061410e565b60405180910390a1505061197f6001600055565b600c8181548110611bcb57600080fd5b9060005260206000209060049182820401919006600802915054906101000a90046001600160401b031681565b6040516370a0823160e01b815230600482015260009082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c859190613e77565b101592915050565b600a60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880180546001600160401b0390981698969763ffffffff8716976401000000009097046001600160a01b03169660ff909516949190611cfb90613e90565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2790613e90565b8015611d745780601f10611d4957610100808354040283529160200191611d74565b820191906000526020600020905b815481529060010190602001808311611d5757829003601f168201915b5050505050905089565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590611de05750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15611dfe5760405163e506ea2960e01b815260040160405180910390fd5b60015460ff16611e2157604051631f11e7a160e01b815260040160405180910390fd5b611e2961349d565b80611e6a5760405162461bcd60e51b8152602060048201526011602482015270139bc818d85b1b1cc81c1c9bdd9a591959607a1b60448201526064016112d9565b600a811115611eac5760405162461bcd60e51b815260206004820152600e60248201526d546f6f206d616e792063616c6c7360901b60448201526064016112d9565b60005b81811015611fc15760008030858585818110611ecd57611ecd6140f8565b9050602002810190611edf91906141a6565b604051611eed929190613f62565b6000604051808303816000865af19150503d8060008114611f2a576040519150601f19603f3d011682016040523d82523d6000602084013e611f2f565b606091505b509150915081611fac57604481511015611f795760405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b60448201526064016112d9565b60048101905080806020019051810190611f9391906141f3565b60405162461bcd60e51b81526004016112d9919061365f565b50508080611fb990613f49565b915050611eaf565b5060408051602081018390527f61b1db00fa46b85aac40d41d854693dc167433f5e067021d1d6689cd5d6ad9e9910160408051601f198184030181529082905261200c914290614260565b60405180910390a161201e6001600055565b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906120845750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156120a25760405163e506ea2960e01b815260040160405180910390fd5b6001805460ff191681179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906121125750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156121305760405163e506ea2960e01b815260040160405180910390fd5b6001600160401b0382166000908152600a60205260408120600181015490910361216d57604051632b44303360e11b815260040160405180910390fd5b600481015460ff16600203612195576040516305de099160e31b815260040160405180910390fd5b60048101805460ff191660031790556040516001600160401b038416907ff7b31590d63024db3f1420d7062cfc9835f06ebcfe26d1b0937450045f894058906121e190859042906142a6565b60405180910390a2505050565b6060600c80548060200260200160405190810160405280929190818152602001828054801561226e57602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b03168152602001906008019060208260070104928301926001038202915080841161222b5790505b5050505050905090565b600060048260405161228a9190613fcf565b9081526020016040518091039020549050919050565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201929092526101008101919091526001600160401b038281166000908152600a602090815260409182902082516101208101845281549094168452600181015491840191909152600281015463ffffffff8116928401929092526401000000009091046001600160a01b0316606083015260038101546080830152600481015460ff1660a0830152600581015460c0830152600681015460e08301526007810180546101008401919061238f90613e90565b80601f01602080910402602001604051908101604052809291908181526020018280546123bb90613e90565b80156124085780601f106123dd57610100808354040283529160200191612408565b820191906000526020600020905b8154815290600101906020018083116123eb57829003601f168201915b5050505050815250509050919050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061247a5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156124985760405163e506ea2960e01b815260040160405180910390fd5b60015460ff166124bb57604051631f11e7a160e01b815260040160405180910390fd5b6124c361349d565b806000036124e45760405163162908e360e11b815260040160405180910390fd5b6001600160a01b03821661250b5760405163d92e233d60e01b815260040160405180910390fd5b8060048460405161251c9190613fcf565b908152602001604051809103902054101561254a57604051631e9acf1760e31b815260040160405180910390fd5b60405163f3fef3a360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905283169063f3fef3a390604401600060405180830381600087803b1580156125b457600080fd5b505af11580156125c8573d6000803e3d6000fd5b50505050806004846040516125dd9190613fcf565b908152602001604051809103902060008282546125fa91906142c8565b90915550506001600160a01b038216600090815260056020526040812080548392906126279084906142c8565b909155505060405160049061263d908590613fcf565b90815260200160405180910390205460000361265c5761265c836134c7565b8260405161266a9190613fcf565b604080519182900382206001600160a01b0385168352602083018490524291830191909152907f28438eb4aa4aac87166e3bf802ea80284870d452c16e7d6f1680d2b4b10774c69060600161196d565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127459190613e77565b905060005b6006548110156127ae57600460068281548110612769576127696140f8565b90600052602060002001604051612780919061434e565b9081526020016040518091039020548261279a9190613f02565b9150806127a681613f49565b91505061274a565b5090565b6040516370a0823160e01b81523060048201526000908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561281f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128439190613e77565b93506000925060005b6006548110156128b05760046006828154811061286b5761286b6140f8565b90600052602060002001604051612882919061434e565b9081526020016040518091039020548461289c9190613f02565b9350806128a881613f49565b91505061284c565b505060065460015493949293909260ff9091169150565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061292b5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156129495760405163e506ea2960e01b815260040160405180910390fd5b60015460ff1661296c57604051631f11e7a160e01b815260040160405180910390fd5b61297461349d565b846000036129955760405163162908e360e11b815260040160405180910390fd5b6001600160a01b0383166129bc5760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015285907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a469190613e77565b1015612a6557604051631e9acf1760e31b815260040160405180910390fd5b466000908152600760209081526040808320548784526009909252909120546001600160a01b039091169063ffffffff1681612ab4576040516325928b3b60e01b815260040160405180910390fd5b63ffffffff8116158015612acb57508562aa36a714155b8015612ad8575085600114155b15612af657604051632cebb6b160e21b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b03838116600483015260248201899052868116917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f9190613eca565b506040516337e9a82760e11b81526004810189905263ffffffff83166024820152604481018290526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152841690636fd3504e906084016020604051808303816000875af1158015612c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c36919061435a565b9350604051806101200160405280856001600160401b031681526020018981526020018363ffffffff168152602001876001600160a01b031681526020016000801b8152602001600160ff1681526020014281526020016000815260200186815250600a6000866001600160401b03166001600160401b0316815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b031602179055506020820151816001015560408201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020160046101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816003015560a08201518160040160006101000a81548160ff021916908360ff16021790555060c0820151816005015560e08201518160060155610100820151816007019081612d9d9190614039565b5050600c8054600181018255600091909152600481047fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160401b0380891660086003909516949094026101000a8481029102199091161790556040519091507fd5ffa406334d9a1dbcd23ab3cf6be4538ba793870487b6ff1043c28f0724382d90612e38908b9086908b908b904290614377565b60405180910390a2505050612e4d6001600055565b949350505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612e9e57604051635fc483c560e01b815260040160405180910390fd5b612ea661349d565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f319190613e77565b905080600003612f5457604051631e9acf1760e31b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130079190613eca565b50806003600082825461301a9190613f02565b9091555050604080518281524260208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f56da9a5ae0bcf6e7c3fdd78a10550e7d0458de1c39bfb7f6e96a3e92dd344a68910160405180910390a25061308d6001600055565b565b60606006805480602002602001604051908101604052809291908181526020016000905b8282101561315f5783829060005260206000200180546130d290613e90565b80601f01602080910402602001604051908101604052809291908181526020018280546130fe90613e90565b801561314b5780601f106131205761010080835404028352916020019161314b565b820191906000526020600020905b81548152906001019060200180831161312e57829003601f168201915b5050505050815260200190600101906130b3565b50505050905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146131b157604051635fc483c560e01b815260040160405180910390fd5b60015460ff166131d457604051631f11e7a160e01b815260040160405180910390fd5b6131dc61349d565b816000036131fd5760405163162908e360e11b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015613292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b69190613eca565b5081600260008282546132c99190613f02565b925050819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f2157592e75ae7c48a11728aef822bc883f3eb4b0929956be2a5e4250f5622aac83834260405161332d939291906143bf565b60405180910390a261201e6001600055565b6001600160401b038181166000908152600a6020908152604080832081516101208101835281549095168552600181015492850192909252600282015463ffffffff81169185019190915264010000000090046001600160a01b0316606084015260038101546080840152600481015460ff1660a0840152600581015460c0840152600681015460e08401526007810180549293849384938493849392610100840191906133ec90613e90565b80601f016020809104026020016040519081016040528092919081815260200182805461341890613e90565b80156134655780601f1061343a57610100808354040283529160200191613465565b820191906000526020600020905b81548152906001019060200180831161344857829003601f168201915b505050505081525050905060008160200151118160a0015160ff16600214826020015183606001519450945094509450509193509193565b6002600054036134c057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60005b60065481101561201e578180519060200120600682815481106134ef576134ef6140f8565b90600052602060002001604051613506919061434e565b60405180910390200361359a5760068054613523906001906142c8565b81548110613533576135336140f8565b9060005260206000200160068281548110613550576135506140f8565b90600052602060002001908161356691906143e8565b506006805480613578576135786144c2565b60019003818190600052602060002001600061359491906135ac565b90555050565b806135a481613f49565b9150506134ca565b5080546135b890613e90565b6000825580601f106135c8575050565b601f016020900490600052602060002090810190610d3291905b808211156127ae57600081556001016135e2565b60006020828403121561360857600080fd5b5035919050565b60005b8381101561362a578181015183820152602001613612565b50506000910152565b6000815180845261364b81602086016020860161360f565b601f01601f19169290920160200192915050565b6020815260006110a46020830184613633565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156136b0576136b0613672565b604052919050565b60006001600160401b038211156136d1576136d1613672565b50601f01601f191660200190565b600082601f8301126136f057600080fd5b81356137036136fe826136b8565b613688565b81815284602083860101111561371857600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160401b0381168114610d3257600080fd5b60008060006060848603121561375f57600080fd5b83356001600160401b038082111561377657600080fd5b613782878388016136df565b9450602086013591508082111561379857600080fd5b506137a5868287016136df565b92505060408401356137b681613735565b809150509250925092565b6000602082840312156137d357600080fd5b81356110a481613735565b80356001600160a01b03811681146137f557600080fd5b919050565b60008060006040848603121561380f57600080fd5b613818846137de565b925060208401356001600160401b038082111561383457600080fd5b818601915086601f83011261384857600080fd5b81358181111561385757600080fd5b87602082850101111561386957600080fd5b6020830194508093505050509250925092565b6000806000806080858703121561389257600080fd5b843593506138a2602086016137de565b92506138b0604086016137de565b9150606085013563ffffffff811681146138c957600080fd5b939692955090935050565b6000806000606084860312156138e957600080fd5b83356001600160401b038111156138ff57600080fd5b61390b868287016136df565b93505061391a602085016137de565b9150604084013590509250925092565b60006020828403121561393c57600080fd5b81356001600160401b0381111561395257600080fd5b612e4d848285016136df565b60006001600160401b0382111561397757613977613672565b5060051b60200190565b600082601f83011261399257600080fd5b813560206139a26136fe8361395e565b82815260059290921b840181019181810190868411156139c157600080fd5b8286015b848110156139e3576139d6816137de565b83529183019183016139c5565b509695505050505050565b600082601f8301126139ff57600080fd5b81356020613a0f6136fe8361395e565b82815260059290921b84018101918181019086841115613a2e57600080fd5b8286015b848110156139e35780358352918301918301613a32565b600080600060608486031215613a5e57600080fd5b83356001600160401b0380821115613a7557600080fd5b818601915086601f830112613a8957600080fd5b81356020613a996136fe8361395e565b82815260059290921b8401810191818101908a841115613ab857600080fd5b8286015b84811015613af057803586811115613ad45760008081fd5b613ae28d86838b01016136df565b845250918301918301613abc565b5097505087013592505080821115613b0757600080fd5b613b1387838801613981565b93506040860135915080821115613b2957600080fd5b50613b36868287016139ee565b9150509250925092565b60006101206001600160401b038c1683528a602084015263ffffffff8a16604084015260018060a01b038916606084015287608084015260ff871660a08401528560c08401528460e084015280610100840152613b9f81840185613633565b9c9b505050505050505050505050565b60008060208385031215613bc257600080fd5b82356001600160401b0380821115613bd957600080fd5b818501915085601f830112613bed57600080fd5b813581811115613bfc57600080fd5b8660208260051b8501011115613c1157600080fd5b60209290920196919550909350505050565b60008060408385031215613c3657600080fd5b8235613c4181613735565b915060208301356001600160401b03811115613c5c57600080fd5b613c68858286016136df565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613cb35783516001600160401b031683529284019291840191600101613c8e565b50909695505050505050565b60208152613cd96020820183516001600160401b03169052565b6020820151604082015260006040830151613cfc606084018263ffffffff169052565b5060608301516001600160a01b038116608084015250608083015160a083015260a0830151613d3060c084018260ff169052565b5060c083015160e0838101919091528301516101008084019190915283015161012080840152612e4d610140840182613633565b60008060008060808587031215613d7a57600080fd5b8435935060208501359250613d91604086016137de565b915060608501356001600160401b03811115613dac57600080fd5b613db8878288016136df565b91505092959194509250565b600060208284031215613dd657600080fd5b6110a4826137de565b600081518084526020808501808196508360051b8101915082860160005b85811015613e27578284038952613e15848351613633565b98850198935090840190600101613dfd565b5091979650505050505050565b6020815260006110a46020830184613ddf565b60008060408385031215613e5a57600080fd5b8235915060208301356001600160401b03811115613c5c57600080fd5b600060208284031215613e8957600080fd5b5051919050565b600181811c90821680613ea457607f821691505b602082108103613ec457634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215613edc57600080fd5b815180151581146110a457600080fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115613f1557613f15613eec565b92915050565b604081526000613f2e6040830185613633565b8281036020840152613f408185613633565b95945050505050565b600060018201613f5b57613f5b613eec565b5060010190565b8183823760009101908152919050565b60608152600d60608201526c195e1d195c9b985b17d8d85b1b609a1b608082015260a060208201528260a0820152828460c0830137600060c08483010152600060c0601f19601f8601168301019050826040830152949350505050565b60008251613fe181846020870161360f565b9190910192915050565b601f82111561197f57600081815260208120601f850160051c810160208610156140125750805b601f850160051c820191505b818110156140315782815560010161401e565b505050505050565b81516001600160401b0381111561405257614052613672565b614066816140608454613e90565b84613feb565b602080601f83116001811461409b57600084156140835750858301515b600019600386901b1c1916600185901b178555614031565b600085815260208120601f198616915b828110156140ca578886015182559484019460019091019084016140ab565b50858210156140e85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6060815260006141216060830186613ddf565b82810360208481019190915285518083528682019282019060005b818110156141615784516001600160a01b03168352938301939183019160010161413c565b50508481036040860152855180825290820192508186019060005b818110156141985782518552938301939183019160010161417c565b509298975050505050505050565b6000808335601e198436030181126141bd57600080fd5b8301803591506001600160401b038211156141d757600080fd5b6020019150368190038213156141ec57600080fd5b9250929050565b60006020828403121561420557600080fd5b81516001600160401b0381111561421b57600080fd5b8201601f8101841361422c57600080fd5b805161423a6136fe826136b8565b81815285602083850101111561424f57600080fd5b613f4082602083016020860161360f565b60608152600d60608201526c62617463685f6578656375746560981b608082015260a06020820152600061429760a0830185613633565b90508260408301529392505050565b6040815260006142b96040830185613633565b90508260208301529392505050565b81810381811115613f1557613f15613eec565b600081546142e881613e90565b60018281168015614300576001811461431557614344565b60ff1984168752821515830287019450614344565b8560005260208060002060005b8581101561433b5781548a820152908401908201614322565b50505082870194505b5050505092915050565b60006110a482846142db565b60006020828403121561436c57600080fd5b81516110a481613735565b85815263ffffffff851660208201526001600160a01b038416604082015260a0606082018190526000906143ad90830185613633565b90508260808301529695505050505050565b8381526060602082015260006143d86060830185613633565b9050826040830152949350505050565b8181036143f3575050565b6143fd8254613e90565b6001600160401b0381111561441457614414613672565b614422816140608454613e90565b6000601f821160018114614456576000831561443e5750848201545b600019600385901b1c1916600184901b1784556144bb565b600085815260209020601f19841690600086815260209020845b838110156144905782860154825560019586019590910190602001614470565b50858310156144ae5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e7634ea49a9d81c98b89f923c0cc14911b7761f576c406f1feb6c2f363b240f264736f6c63430008140033a2646970667358221220afcf9a8d79ed62e0a9b93f6fe299038c03dacbd4dc780dc611fc9c44126f887e64736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001455760003560e01c806383657f7711620000bb578063b054a9e8116200007a578063b054a9e81462000374578063ba51a7b3146200038b578063de95a2e714620003ba578063f2fde38b14620003e6578063f5f50eb114620003fd57600080fd5b806383657f7714620002f55780638da5cb5b146200031b578063966708a5146200032d578063a926819f1462000344578063ab9ae6ec146200035b57600080fd5b806359fa139f116200010857806359fa139f146200024657806363e6ffdd1462000275578063713bb95c14620002a1578063715018a614620002b857806380dc8b0614620002c457600080fd5b806302d45457146200014a57806304d0a647146200018f578063439a301214620001be5780634b19f25514620001f557806354fd4d50146200021d575b600080fd5b620001727f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b62000172620001a036600462000c37565b6001600160a01b039081166000908152600160205260409020541690565b620001e4620001cf36600462000c37565b60026020526000908152604090205460ff1681565b604051901515815260200162000186565b620001727f000000000000000000000000000000000000000000000000000000000000000081565b60408051808201825260058152640312e302e360dc1b6020820152905162000186919062000c84565b620001726200025736600462000c37565b6001600160a01b039081166000908152600360205260409020541690565b620001726200028636600462000c37565b6001602052600090815260409020546001600160a01b031681565b62000172620002b236600462000c37565b62000405565b620002c262000536565b005b620001e4620002d536600462000c37565b6001600160a01b0390811660009081526001602052604090205416151590565b6200030c6200030636600462000cb9565b6200054e565b60405162000186919062000d33565b6000546001600160a01b031662000172565b620001726200033e36600462000c37565b620007d0565b620002c26200035536600462000c37565b62000864565b62000365620008ec565b60405190815260200162000186565b620001726200038536600462000c37565b62000920565b620001e46200039c36600462000c37565b6001600160a01b031660009081526002602052604090205460ff1690565b62000172620003cb36600462000c37565b6003602052600090815260409020546001600160a01b031681565b620002c2620003f736600462000c37565b62000aeb565b600062000365565b600080620004138362000b2f565b9050600060405180602001620004299062000c13565b601f1982820381018352601f9091011660408181526001600160a01b0387811660208401527f00000000000000000000000000000000000000000000000000000000000000008116918301919091523060608301527f000000000000000000000000000000000000000000000000000000000000000016608082015260a00160408051601f1981840301815290829052620004c8929160200162000d82565b60408051808303601f1901815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff191660218501526035840195909552605580840195909552815180840390950185526075909201905282519201919091209392505050565b6200054062000b94565b6200054c600062000bc3565b565b606081801580159062000562575060648111155b620005a95760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642062617463682073697a6560701b60448201526064015b60405180910390fd5b8067ffffffffffffffff811115620005c557620005c562000db5565b604051908082528060200260200182016040528015620005ef578160200160208202803683370190505b50915060005b81811015620007c857600060018187878581811062000618576200061862000dcb565b90506020020160208101906200062f919062000c37565b6001600160a01b0390811682526020820192909252604001600020541614620006de57600160008686848181106200066b576200066b62000dcb565b905060200201602081019062000682919062000c37565b6001600160a01b0390811682526020820192909252604001600020548451911690849083908110620006b857620006b862000dcb565b60200260200101906001600160a01b031690816001600160a01b031681525050620007b3565b3063b054a9e8868684818110620006f957620006f962000dcb565b905060200201602081019062000710919062000c37565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af115801562000757573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200077d919062000de1565b83828151811062000792576200079262000dcb565b60200260200101906001600160a01b031690816001600160a01b0316815250505b80620007bf8162000e01565b915050620005f5565b505092915050565b6001600160a01b03811660009081526002602052604081205460ff16620007f957506000919050565b816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000838573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200085e919062000de1565b92915050565b6200086e62000b94565b6001600160a01b03811660009081526002602052604090205460ff16620008cb5760405162461bcd60e51b815260206004820152601060248201526f15d85b1b195d081b9bdd081d985b1a5960821b6044820152606401620005a0565b6001600160a01b03166000908152600260205260409020805460ff19169055565b600060405180602001620009009062000c13565b6020820181038252601f19601f8201166040525080519060200120905090565b60006001600160a01b0382166200094a5760405163fd684c3b60e01b815260040160405180910390fd5b6001600160a01b0382811660009081526001602052604090205416156200098457604051630f721df160e31b815260040160405180910390fd5b6000620009918362000b2f565b905080837f0000000000000000000000000000000000000000000000000000000000000000307f0000000000000000000000000000000000000000000000000000000000000000604051620009e69062000c13565b6001600160a01b0394851681529284166020840152908316604083015290911660608201526080018190604051809103906000f590508015801562000a2f573d6000803e3d6000fd5b5091506001600160a01b03821662000a5a576040516303792e6560e61b815260040160405180910390fd5b6001600160a01b03838116600081815260016020818152604080842080546001600160a01b0319908116978a1697881790915586855260028352818520805460ff191690941790935560038252928390208054909216841790915590518481527fbdbcb584581e4f688b28038d847fa0c73130b688da678029bcb98e32fec769a2910160405180910390a350919050565b62000af562000b94565b6001600160a01b03811662000b2157604051631e4fbdf760e01b815260006004820152602401620005a0565b62000b2c8162000bc3565b50565b6040517f43726f73735969656c645f536d61727457616c6c65745f00000000000000000060208201526bffffffffffffffffffffffff19606083901b166037820152600090604b01604051602081830303815290604052805190602001209050919050565b6000546001600160a01b031633146200054c5760405163118cdaa760e01b8152336004820152602401620005a0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b614b538062000e2a83390190565b6001600160a01b038116811462000b2c57600080fd5b60006020828403121562000c4a57600080fd5b813562000c578162000c21565b9392505050565b60005b8381101562000c7b57818101518382015260200162000c61565b50506000910152565b602081526000825180602084015262000ca581604085016020870162000c5e565b601f01601f19169190910160400192915050565b6000806020838503121562000ccd57600080fd5b823567ffffffffffffffff8082111562000ce657600080fd5b818501915085601f83011262000cfb57600080fd5b81358181111562000d0b57600080fd5b8660208260051b850101111562000d2157600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b8181101562000d765783516001600160a01b03168352928401929184019160010162000d4f565b50909695505050505050565b6000835162000d9681846020880162000c5e565b83519083019062000dac81836020880162000c5e565b01949350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121562000df457600080fd5b815162000c578162000c21565b60006001820162000e2257634e487b7160e01b600052601160045260246000fd5b506001019056fe6101006040523480156200001257600080fd5b5060405162004b5338038062004b5383398101604081905262000035916200045e565b60016000556001600160a01b03841615806200005857506001600160a01b038316155b806200006b57506001600160a01b038216155b806200007e57506001600160a01b038116155b156200009d5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0380851660805283811660a05282811660c052811660e0526001805460ff191681179055620004377fec9873545bb8a5d2d42da3057cc304585f23a42265e7802a750aae6684a644818054738fe6b999dc680ccfdd5bf7eb0974218be2542daa6001600160a01b031991821681179092557f548c5e1d41c3f82172464b7edaa915cc675ade8b90fffe223abb8a4ff3f26f11805473e737e5cebeeba77efe34d4aa090756590b1ce27590831681179091557fa7eff475ecfcbdf067c2158d42f27ce03194025ca94bd6d53f8a5fc61250863d805463ffffffff199081169091557faaf21b853e7b00b42b68f9d394449dae365a44398382277bb592a9c5243ae02880548416851790557f4c174d71a6cfe2d71828895204ea66f6db51e132305b86fbe4f89e56f5ad7bc780548416831790557f294d49a231d98de3525d5eec09954453967129350d9738e750254f3a6edcb75c8054600690831681179091557fc1b574f6625cd5cbe79a84558b9eaa7cfed6c0eaaa47d983eebebed13c5932ed805485169095179094557fac2f5069bd7e438cbd1102e529f6f3d1ed744a7035a7f71299b3e7dea4b83576805484169092179091557fc311d04df44acf7343b3e39fe3b9968a17f22876be9582994c4218a144ddc5788054600390831681179091557fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82880547328b5a0e9c621a5badaa536219b3a228c8168cf5d90851681179091557fad67d757c34507f157cacfa2e3153e9f260a2244f30428821be7be64587ac55f80547381d40f21f12a8f0e3252bccb954d722d4c464b6490861681179091557f92e85d02570a8092d09a6e3a57665bc3815a2699a4074001bf1ccabf660f5a368054851690557ec926fc893501ce5ad439ad7af72d794e5fd17fa1b09c50e4c335249310c01380548616831790557f4f278913b1c0a191cf7273bd8fe8a6a363cdd828060c2170092d5cc6fb2b73aa80548616821790557fd4fe022f7fad12ba8ee1acb88fbbe13753ff2120c7c2c88dcdcb8794b80f474e8054851690961790955561a4b16000527fa7540f530be45c6674dd99d492017379fb77c281d9721ac80290a13fa98775088054851690911790557f7e8bc9853458e96c6f3a5b5a9b420ab6feac098cbfa4fcf6c9966e813a3bb182805490931690931790915560096020527f34ef77749ddeb0092c7c69d8f1e0fc86dcc071ab05d64633a12bc8ee58ed820380549091169091179055565b50505050620004bb565b80516001600160a01b03811681146200045957600080fd5b919050565b600080600080608085870312156200047557600080fd5b620004808562000441565b9350620004906020860162000441565b9250620004a06040860162000441565b9150620004b06060860162000441565b905092959194509250565b60805160a05160c05160e05161450e620006456000396000818161061c0152818161099801528181610b6801528181610c400152818161125e015281816116a70152818161175f01528181611ae201528181611c1a015281816126d2015281816127d8015281816129d301528181612b2001528181612bc101528181612ebe01528181612f9a01526132490152600081816107ab015261206101526000818161040201528181610d42015281816111bc015281816115a80152818161198f01528181611d89015281816120bb0152818161242301526128d401526000818161065001528181610ac701528181610c1101528181610cdc01528181610d76015281816110b6015281816111f001528181611429015281816114b1015281816115dc015281816117e4015281816119c301528181611dbd0152818161202d015281816120ef01528181612457015281816125610152818161290801528181612e6001528181612f6b01528181613036015281816131730152818161321401526132d2015261450e6000f3fe6080604052600436106102605760003560e01c806388ba16ab11610144578063c45a0155116100b6578063dc8cff3c1161007a578063dc8cff3c1461084e578063ef97108a146108b0578063f081e368146108dd578063f1215d25146108ff578063f9335c161461091f578063ff50abdc1461096a57600080fd5b8063c45a015514610799578063caa648b4146107cd578063cd156c6a146107e2578063da831dd314610819578063db2e21bc1461083957600080fd5b80639c9080bf116101085780639c9080bf146106a7578063a58ff35e146106dd578063aae29f38146106ff578063ab6d72531461071f578063ac8929351461074c578063ad67efe01461077957600080fd5b806388ba16ab146105da57806389a302711461060a5780638da5cb5b1461063e57806394b385241461067257806396b31f701461068757600080fd5b80634b19f255116101dd5780637bd2d8ac116101a15780637bd2d8ac146104c55780637dd19fff146104e557806380b62e9e1461052d57806383e554a214610565578063849602ac14610585578063856a65eb146105ba57600080fd5b80634b19f255146103f05780634b319713146104245780634f9ac0af1461043a57806354fd4d501461045a5780635dce2fa91461048d57600080fd5b8063312195db11610224578063312195db1461035b5780633751f6501461037b57806337d7c2c81461039b5780633e0ac1af146103bb57806342f008ae146103d057600080fd5b806312065fe01461026c57806322f3e2d4146102945780632a0d47c1146102be5780632aacadaf146102eb5780632e1a7d4d1461033957600080fd5b3661026757005b600080fd5b34801561027857600080fd5b50610281610980565b6040519081526020015b60405180910390f35b3480156102a057600080fd5b506001546102ae9060ff1681565b604051901515815260200161028b565b3480156102ca57600080fd5b506102de6102d93660046135f6565b610a10565b60405161028b919061365f565b3480156102f757600080fd5b506103216103063660046135f6565b6008602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161028b565b34801561034557600080fd5b506103596103543660046135f6565b610abc565b005b34801561036757600080fd5b506102ae61037636600461374a565b610d35565b34801561038757600080fd5b506103596103963660046137c1565b6110ab565b3480156103a757600080fd5b506102de6103b63660046137fa565b6111af565b3480156103c757600080fd5b5061035961141e565b3480156103dc57600080fd5b506103596103eb36600461387c565b6114a6565b3480156103fc57600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b34801561043057600080fd5b5061028160035481565b34801561044657600080fd5b506103596104553660046138d4565b61159d565b34801561046657600080fd5b5060408051808201909152600a8152690322e302e302d636374760b41b60208201526102de565b34801561049957600080fd5b506102816104a836600461392a565b805160208183018101805160048252928201919093012091525481565b3480156104d157600080fd5b506103596104e0366004613a49565b611984565b3480156104f157600080fd5b506105186105003660046135f6565b60096020526000908152604090205463ffffffff1681565b60405163ffffffff909116815260200161028b565b34801561053957600080fd5b5061054d6105483660046135f6565b611bbb565b6040516001600160401b03909116815260200161028b565b34801561057157600080fd5b506102ae6105803660046135f6565b611bf8565b34801561059157600080fd5b506105a56105a03660046137c1565b611c8d565b60405161028b99989796959493929190613b40565b3480156105c657600080fd5b506103596105d5366004613baf565b611d7e565b3480156105e657600080fd5b506102ae6105f53660046135f6565b600b6020526000908152604090205460ff1681565b34801561061657600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b34801561064a57600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b34801561067e57600080fd5b50610359612022565b34801561069357600080fd5b506103596106a2366004613c23565b6120b0565b3480156106b357600080fd5b506103216106c23660046135f6565b6007602052600090815260409020546001600160a01b031681565b3480156106e957600080fd5b506106f26121ee565b60405161028b9190613c72565b34801561070b57600080fd5b5061028161071a36600461392a565b612278565b34801561072b57600080fd5b50466000908152600760205260409020546001600160a01b031615156102ae565b34801561075857600080fd5b5061076c6107673660046137c1565b6122a0565b60405161028b9190613cbf565b34801561078557600080fd5b506103596107943660046138d4565b612418565b3480156107a557600080fd5b506103217f000000000000000000000000000000000000000000000000000000000000000081565b3480156107d957600080fd5b506102816126ba565b3480156107ee57600080fd5b506107f76127b2565b604080519485526020850193909352918301521515606082015260800161028b565b34801561082557600080fd5b5061054d610834366004613d64565b6128c7565b34801561084557600080fd5b50610359612e55565b34801561085a57600080fd5b5046600090815260076020908152604080832054600883528184205460098452938290205482516001600160a01b039283168152919094169281019290925263ffffffff9092169181019190915260600161028b565b3480156108bc57600080fd5b506102816108cb366004613dc4565b60056020526000908152604090205481565b3480156108e957600080fd5b506108f261308f565b60405161028b9190613e34565b34801561090b57600080fd5b5061035961091a366004613e47565b613168565b34801561092b57600080fd5b5061093f61093a3660046137c1565b61333f565b6040805194151585529215156020850152918301526001600160a01b0316606082015260800161028b565b34801561097657600080fd5b5061028160025481565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b9190613e77565b905090565b60068181548110610a2057600080fd5b906000526020600020016000915090508054610a3b90613e90565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6790613e90565b8015610ab45780601f10610a8957610100808354040283529160200191610ab4565b820191906000526020600020905b815481529060010190602001808311610a9757829003601f168201915b505050505081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b0557604051635fc483c560e01b815260040160405180910390fd5b60015460ff16610b2857604051631f11e7a160e01b815260040160405180910390fd5b610b3061349d565b80600003610b515760405163162908e360e11b815260040160405180910390fd5b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610bb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdb9190613e77565b1015610bfa57604051631e9acf1760e31b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad9190613eca565b508060036000828254610cc09190613f02565b9091555050604080518281524260208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a2610d326001600055565b50565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610d995750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15610db75760405163e506ea2960e01b815260040160405180910390fd5b60015460ff16610dda57604051631f11e7a160e01b815260040160405180910390fd5b610de261349d565b6001600160401b0382166000908152600a602052604081206001810154909103610e1f57604051632b44303360e11b815260040160405180910390fd5b600481015460ff16600203610e47576040516305de099160e31b815260040160405180910390fd5b600481015460ff16600303610e6f57604051634d10bf4d60e01b815260040160405180910390fd5b84516020808701919091206000818152600b90925260409091205460ff1615610eab57604051637b04260960e01b815260040160405180910390fd5b466000908152600860205260409020546001600160a01b031680610ee2576040516325928b3b60e01b815260040160405180910390fd5b604051630afd9fa560e31b81526001600160a01b038216906357ecfd2890610f10908a908a90600401613f1b565b6020604051808303816000875af1158015610f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f539190613eca565b93508361101157600683018054906000610f6c83613f49565b91905055506003836006015410610ff85760048301805460ff19166003179055604080518181526014918101919091527313585e081c995d1c9a595cc8195e18d95959195960621b60608201524260208201526001600160401b038616907ff7b31590d63024db3f1420d7062cfc9835f06ebcfe26d1b0937450045f8940589060800160405180910390a25b604051634d10bf4d60e01b815260040160405180910390fd5b600483018054600260ff1991821617909155600384018390556000838152600b6020908152604091829020805490931660019081179093559185015481518581529283015242908201526001600160401b038616907f74751c76690c231994dfc007d365af24d7468a87215e7b21ee0807f6b2a4941a9060600160405180910390a2600193505050506110a46001600055565b9392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110f457604051635fc483c560e01b815260040160405180910390fd5b6001600160401b0381166000908152600a60205260408120600181015490910361113157604051632b44303360e11b815260040160405180910390fd5b600481015460ff1615611157576040516305de099160e31b815260040160405180910390fd5b60048101805460ff191660031790556040516001600160401b038316907fecad78f23d374782044f5178afd0845ba6ddfd8a31d49d3be28f626396509903906111a39042815260200190565b60405180910390a25050565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906112135750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156112315760405163e506ea2960e01b815260040160405180910390fd5b60015460ff1661125457604051631f11e7a160e01b815260040160405180910390fd5b61125c61349d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b0316036112e25760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742063616c6c2055534443206469726563746c790000000000000060448201526064015b60405180910390fd5b306001600160a01b0385160361132d5760405162461bcd60e51b815260206004820152601060248201526f21b0b73737ba1031b0b6361039b2b63360811b60448201526064016112d9565b600080856001600160a01b0316858560405161134a929190613f62565b6000604051808303816000865af19150503d8060008114611387576040519150601f19603f3d011682016040523d82523d6000602084013e61138c565b606091505b5091509150816113d65760405162461bcd60e51b8152602060048201526015602482015274109858dad95b99081858dd1a5bdb8819985a5b1959605a1b60448201526064016112d9565b7f61b1db00fa46b85aac40d41d854693dc167433f5e067021d1d6689cd5d6ad9e985854260405161140993929190613f72565b60405180910390a19150506110a46001600055565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461146757604051635fc483c560e01b815260040160405180910390fd5b6001805460ff191690556040514281527fa195e25d5f54c88c4b12f36a9379ed681d0a5d83b64baada004ca76278b22cfc9060200160405180910390a1565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114ef57604051635fc483c560e01b815260040160405180910390fd5b600084815260076020908152604080832080546001600160a01b03199081166001600160a01b038981169182179093556008855283862080549092169288169283179091556009845293829020805463ffffffff191663ffffffff87169081179091558251898152938401949094529082015260608101919091527f79cd5749505a88726e06cf1fb44a8c70b5ec8bbf8884bf65d76f2957f3577e0c9060800160405180910390a150505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906115ff5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b1561161d5760405163e506ea2960e01b815260040160405180910390fd5b60015460ff1661164057604051631f11e7a160e01b815260040160405180910390fd5b61164861349d565b806000036116695760405163162908e360e11b815260040160405180910390fd5b6001600160a01b0382166116905760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a9190613e77565b101561173957604051631e9acf1760e31b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156117a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cc9190613eca565b506040516311f9fbc960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390528316906347e7ef2490604401600060405180830381600087803b15801561183757600080fd5b505af115801561184b573d6000803e3d6000fd5b5050505060048360405161185f9190613fcf565b9081526020016040518091039020546000036118b357600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f016118b18482614039565b505b806004846040516118c49190613fcf565b908152602001604051809103902060008282546118e19190613f02565b90915550506001600160a01b0382166000908152600560205260408120805483929061190e908490613f02565b9091555050604051611921908490613fcf565b604080519182900382206001600160a01b0385168352602083018490524291830191909152907f704fa75bdda643242cc116c3a73ed29267a841ff3023581c2275cf6cb77119bd906060015b60405180910390a261197f6001600055565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906119e65750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15611a045760405163e506ea2960e01b815260040160405180910390fd5b60015460ff16611a2757604051631f11e7a160e01b815260040160405180910390fd5b611a2f61349d565b8251825181148015611a415750815181145b611a855760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60448201526064016112d9565b6000805b82811015611aca57838181518110611aa357611aa36140f8565b602002602001015182611ab69190613f02565b915080611ac281613f49565b915050611a89565b506040516370a0823160e01b815230600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b559190613e77565b1015611b7457604051631e9acf1760e31b815260040160405180910390fd5b7f755a9d37c1df505691fdf90a892fc4bbda4bd7134ba469c9ce720e88f876bf29858585604051611ba79392919061410e565b60405180910390a1505061197f6001600055565b600c8181548110611bcb57600080fd5b9060005260206000209060049182820401919006600802915054906101000a90046001600160401b031681565b6040516370a0823160e01b815230600482015260009082906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c859190613e77565b101592915050565b600a60205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880180546001600160401b0390981698969763ffffffff8716976401000000009097046001600160a01b03169660ff909516949190611cfb90613e90565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2790613e90565b8015611d745780601f10611d4957610100808354040283529160200191611d74565b820191906000526020600020905b815481529060010190602001808311611d5757829003601f168201915b5050505050905089565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590611de05750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15611dfe5760405163e506ea2960e01b815260040160405180910390fd5b60015460ff16611e2157604051631f11e7a160e01b815260040160405180910390fd5b611e2961349d565b80611e6a5760405162461bcd60e51b8152602060048201526011602482015270139bc818d85b1b1cc81c1c9bdd9a591959607a1b60448201526064016112d9565b600a811115611eac5760405162461bcd60e51b815260206004820152600e60248201526d546f6f206d616e792063616c6c7360901b60448201526064016112d9565b60005b81811015611fc15760008030858585818110611ecd57611ecd6140f8565b9050602002810190611edf91906141a6565b604051611eed929190613f62565b6000604051808303816000865af19150503d8060008114611f2a576040519150601f19603f3d011682016040523d82523d6000602084013e611f2f565b606091505b509150915081611fac57604481511015611f795760405162461bcd60e51b815260206004820152600b60248201526a10d85b1b0819985a5b195960aa1b60448201526064016112d9565b60048101905080806020019051810190611f9391906141f3565b60405162461bcd60e51b81526004016112d9919061365f565b50508080611fb990613f49565b915050611eaf565b5060408051602081018390527f61b1db00fa46b85aac40d41d854693dc167433f5e067021d1d6689cd5d6ad9e9910160408051601f198184030181529082905261200c914290614260565b60405180910390a161201e6001600055565b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906120845750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156120a25760405163e506ea2960e01b815260040160405180910390fd5b6001805460ff191681179055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906121125750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156121305760405163e506ea2960e01b815260040160405180910390fd5b6001600160401b0382166000908152600a60205260408120600181015490910361216d57604051632b44303360e11b815260040160405180910390fd5b600481015460ff16600203612195576040516305de099160e31b815260040160405180910390fd5b60048101805460ff191660031790556040516001600160401b038416907ff7b31590d63024db3f1420d7062cfc9835f06ebcfe26d1b0937450045f894058906121e190859042906142a6565b60405180910390a2505050565b6060600c80548060200260200160405190810160405280929190818152602001828054801561226e57602002820191906000526020600020906000905b82829054906101000a90046001600160401b03166001600160401b03168152602001906008019060208260070104928301926001038202915080841161222b5790505b5050505050905090565b600060048260405161228a9190613fcf565b9081526020016040518091039020549050919050565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e08201929092526101008101919091526001600160401b038281166000908152600a602090815260409182902082516101208101845281549094168452600181015491840191909152600281015463ffffffff8116928401929092526401000000009091046001600160a01b0316606083015260038101546080830152600481015460ff1660a0830152600581015460c0830152600681015460e08301526007810180546101008401919061238f90613e90565b80601f01602080910402602001604051908101604052809291908181526020018280546123bb90613e90565b80156124085780601f106123dd57610100808354040283529160200191612408565b820191906000526020600020905b8154815290600101906020018083116123eb57829003601f168201915b5050505050815250509050919050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061247a5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156124985760405163e506ea2960e01b815260040160405180910390fd5b60015460ff166124bb57604051631f11e7a160e01b815260040160405180910390fd5b6124c361349d565b806000036124e45760405163162908e360e11b815260040160405180910390fd5b6001600160a01b03821661250b5760405163d92e233d60e01b815260040160405180910390fd5b8060048460405161251c9190613fcf565b908152602001604051809103902054101561254a57604051631e9acf1760e31b815260040160405180910390fd5b60405163f3fef3a360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905283169063f3fef3a390604401600060405180830381600087803b1580156125b457600080fd5b505af11580156125c8573d6000803e3d6000fd5b50505050806004846040516125dd9190613fcf565b908152602001604051809103902060008282546125fa91906142c8565b90915550506001600160a01b038216600090815260056020526040812080548392906126279084906142c8565b909155505060405160049061263d908590613fcf565b90815260200160405180910390205460000361265c5761265c836134c7565b8260405161266a9190613fcf565b604080519182900382206001600160a01b0385168352602083018490524291830191909152907f28438eb4aa4aac87166e3bf802ea80284870d452c16e7d6f1680d2b4b10774c69060600161196d565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127459190613e77565b905060005b6006548110156127ae57600460068281548110612769576127696140f8565b90600052602060002001604051612780919061434e565b9081526020016040518091039020548261279a9190613f02565b9150806127a681613f49565b91505061274a565b5090565b6040516370a0823160e01b81523060048201526000908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561281f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128439190613e77565b93506000925060005b6006548110156128b05760046006828154811061286b5761286b6140f8565b90600052602060002001604051612882919061434e565b9081526020016040518091039020548461289c9190613f02565b9350806128a881613f49565b91505061284c565b505060065460015493949293909260ff9091169150565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480159061292b5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156129495760405163e506ea2960e01b815260040160405180910390fd5b60015460ff1661296c57604051631f11e7a160e01b815260040160405180910390fd5b61297461349d565b846000036129955760405163162908e360e11b815260040160405180910390fd5b6001600160a01b0383166129bc5760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015285907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612a22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a469190613e77565b1015612a6557604051631e9acf1760e31b815260040160405180910390fd5b466000908152600760209081526040808320548784526009909252909120546001600160a01b039091169063ffffffff1681612ab4576040516325928b3b60e01b815260040160405180910390fd5b63ffffffff8116158015612acb57508562aa36a714155b8015612ad8575085600114155b15612af657604051632cebb6b160e21b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b03838116600483015260248201899052868116917f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303816000875af1158015612b6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8f9190613eca565b506040516337e9a82760e11b81526004810189905263ffffffff83166024820152604481018290526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166064830152841690636fd3504e906084016020604051808303816000875af1158015612c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c36919061435a565b9350604051806101200160405280856001600160401b031681526020018981526020018363ffffffff168152602001876001600160a01b031681526020016000801b8152602001600160ff1681526020014281526020016000815260200186815250600a6000866001600160401b03166001600160401b0316815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b031602179055506020820151816001015560408201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020160046101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816003015560a08201518160040160006101000a81548160ff021916908360ff16021790555060c0820151816005015560e08201518160060155610100820151816007019081612d9d9190614039565b5050600c8054600181018255600091909152600481047fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160401b0380891660086003909516949094026101000a8481029102199091161790556040519091507fd5ffa406334d9a1dbcd23ab3cf6be4538ba793870487b6ff1043c28f0724382d90612e38908b9086908b908b904290614377565b60405180910390a2505050612e4d6001600055565b949350505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614612e9e57604051635fc483c560e01b815260040160405180910390fd5b612ea661349d565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f319190613e77565b905080600003612f5457604051631e9acf1760e31b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612fe3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130079190613eca565b50806003600082825461301a9190613f02565b9091555050604080518281524260208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f56da9a5ae0bcf6e7c3fdd78a10550e7d0458de1c39bfb7f6e96a3e92dd344a68910160405180910390a25061308d6001600055565b565b60606006805480602002602001604051908101604052809291908181526020016000905b8282101561315f5783829060005260206000200180546130d290613e90565b80601f01602080910402602001604051908101604052809291908181526020018280546130fe90613e90565b801561314b5780601f106131205761010080835404028352916020019161314b565b820191906000526020600020905b81548152906001019060200180831161312e57829003601f168201915b5050505050815260200190600101906130b3565b50505050905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146131b157604051635fc483c560e01b815260040160405180910390fd5b60015460ff166131d457604051631f11e7a160e01b815260040160405180910390fd5b6131dc61349d565b816000036131fd5760405163162908e360e11b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015613292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b69190613eca565b5081600260008282546132c99190613f02565b925050819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f2157592e75ae7c48a11728aef822bc883f3eb4b0929956be2a5e4250f5622aac83834260405161332d939291906143bf565b60405180910390a261201e6001600055565b6001600160401b038181166000908152600a6020908152604080832081516101208101835281549095168552600181015492850192909252600282015463ffffffff81169185019190915264010000000090046001600160a01b0316606084015260038101546080840152600481015460ff1660a0840152600581015460c0840152600681015460e08401526007810180549293849384938493849392610100840191906133ec90613e90565b80601f016020809104026020016040519081016040528092919081815260200182805461341890613e90565b80156134655780601f1061343a57610100808354040283529160200191613465565b820191906000526020600020905b81548152906001019060200180831161344857829003601f168201915b505050505081525050905060008160200151118160a0015160ff16600214826020015183606001519450945094509450509193509193565b6002600054036134c057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60005b60065481101561201e578180519060200120600682815481106134ef576134ef6140f8565b90600052602060002001604051613506919061434e565b60405180910390200361359a5760068054613523906001906142c8565b81548110613533576135336140f8565b9060005260206000200160068281548110613550576135506140f8565b90600052602060002001908161356691906143e8565b506006805480613578576135786144c2565b60019003818190600052602060002001600061359491906135ac565b90555050565b806135a481613f49565b9150506134ca565b5080546135b890613e90565b6000825580601f106135c8575050565b601f016020900490600052602060002090810190610d3291905b808211156127ae57600081556001016135e2565b60006020828403121561360857600080fd5b5035919050565b60005b8381101561362a578181015183820152602001613612565b50506000910152565b6000815180845261364b81602086016020860161360f565b601f01601f19169290920160200192915050565b6020815260006110a46020830184613633565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156136b0576136b0613672565b604052919050565b60006001600160401b038211156136d1576136d1613672565b50601f01601f191660200190565b600082601f8301126136f057600080fd5b81356137036136fe826136b8565b613688565b81815284602083860101111561371857600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160401b0381168114610d3257600080fd5b60008060006060848603121561375f57600080fd5b83356001600160401b038082111561377657600080fd5b613782878388016136df565b9450602086013591508082111561379857600080fd5b506137a5868287016136df565b92505060408401356137b681613735565b809150509250925092565b6000602082840312156137d357600080fd5b81356110a481613735565b80356001600160a01b03811681146137f557600080fd5b919050565b60008060006040848603121561380f57600080fd5b613818846137de565b925060208401356001600160401b038082111561383457600080fd5b818601915086601f83011261384857600080fd5b81358181111561385757600080fd5b87602082850101111561386957600080fd5b6020830194508093505050509250925092565b6000806000806080858703121561389257600080fd5b843593506138a2602086016137de565b92506138b0604086016137de565b9150606085013563ffffffff811681146138c957600080fd5b939692955090935050565b6000806000606084860312156138e957600080fd5b83356001600160401b038111156138ff57600080fd5b61390b868287016136df565b93505061391a602085016137de565b9150604084013590509250925092565b60006020828403121561393c57600080fd5b81356001600160401b0381111561395257600080fd5b612e4d848285016136df565b60006001600160401b0382111561397757613977613672565b5060051b60200190565b600082601f83011261399257600080fd5b813560206139a26136fe8361395e565b82815260059290921b840181019181810190868411156139c157600080fd5b8286015b848110156139e3576139d6816137de565b83529183019183016139c5565b509695505050505050565b600082601f8301126139ff57600080fd5b81356020613a0f6136fe8361395e565b82815260059290921b84018101918181019086841115613a2e57600080fd5b8286015b848110156139e35780358352918301918301613a32565b600080600060608486031215613a5e57600080fd5b83356001600160401b0380821115613a7557600080fd5b818601915086601f830112613a8957600080fd5b81356020613a996136fe8361395e565b82815260059290921b8401810191818101908a841115613ab857600080fd5b8286015b84811015613af057803586811115613ad45760008081fd5b613ae28d86838b01016136df565b845250918301918301613abc565b5097505087013592505080821115613b0757600080fd5b613b1387838801613981565b93506040860135915080821115613b2957600080fd5b50613b36868287016139ee565b9150509250925092565b60006101206001600160401b038c1683528a602084015263ffffffff8a16604084015260018060a01b038916606084015287608084015260ff871660a08401528560c08401528460e084015280610100840152613b9f81840185613633565b9c9b505050505050505050505050565b60008060208385031215613bc257600080fd5b82356001600160401b0380821115613bd957600080fd5b818501915085601f830112613bed57600080fd5b813581811115613bfc57600080fd5b8660208260051b8501011115613c1157600080fd5b60209290920196919550909350505050565b60008060408385031215613c3657600080fd5b8235613c4181613735565b915060208301356001600160401b03811115613c5c57600080fd5b613c68858286016136df565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015613cb35783516001600160401b031683529284019291840191600101613c8e565b50909695505050505050565b60208152613cd96020820183516001600160401b03169052565b6020820151604082015260006040830151613cfc606084018263ffffffff169052565b5060608301516001600160a01b038116608084015250608083015160a083015260a0830151613d3060c084018260ff169052565b5060c083015160e0838101919091528301516101008084019190915283015161012080840152612e4d610140840182613633565b60008060008060808587031215613d7a57600080fd5b8435935060208501359250613d91604086016137de565b915060608501356001600160401b03811115613dac57600080fd5b613db8878288016136df565b91505092959194509250565b600060208284031215613dd657600080fd5b6110a4826137de565b600081518084526020808501808196508360051b8101915082860160005b85811015613e27578284038952613e15848351613633565b98850198935090840190600101613dfd565b5091979650505050505050565b6020815260006110a46020830184613ddf565b60008060408385031215613e5a57600080fd5b8235915060208301356001600160401b03811115613c5c57600080fd5b600060208284031215613e8957600080fd5b5051919050565b600181811c90821680613ea457607f821691505b602082108103613ec457634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215613edc57600080fd5b815180151581146110a457600080fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115613f1557613f15613eec565b92915050565b604081526000613f2e6040830185613633565b8281036020840152613f408185613633565b95945050505050565b600060018201613f5b57613f5b613eec565b5060010190565b8183823760009101908152919050565b60608152600d60608201526c195e1d195c9b985b17d8d85b1b609a1b608082015260a060208201528260a0820152828460c0830137600060c08483010152600060c0601f19601f8601168301019050826040830152949350505050565b60008251613fe181846020870161360f565b9190910192915050565b601f82111561197f57600081815260208120601f850160051c810160208610156140125750805b601f850160051c820191505b818110156140315782815560010161401e565b505050505050565b81516001600160401b0381111561405257614052613672565b614066816140608454613e90565b84613feb565b602080601f83116001811461409b57600084156140835750858301515b600019600386901b1c1916600185901b178555614031565b600085815260208120601f198616915b828110156140ca578886015182559484019460019091019084016140ab565b50858210156140e85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6060815260006141216060830186613ddf565b82810360208481019190915285518083528682019282019060005b818110156141615784516001600160a01b03168352938301939183019160010161413c565b50508481036040860152855180825290820192508186019060005b818110156141985782518552938301939183019160010161417c565b509298975050505050505050565b6000808335601e198436030181126141bd57600080fd5b8301803591506001600160401b038211156141d757600080fd5b6020019150368190038213156141ec57600080fd5b9250929050565b60006020828403121561420557600080fd5b81516001600160401b0381111561421b57600080fd5b8201601f8101841361422c57600080fd5b805161423a6136fe826136b8565b81815285602083850101111561424f57600080fd5b613f4082602083016020860161360f565b60608152600d60608201526c62617463685f6578656375746560981b608082015260a06020820152600061429760a0830185613633565b90508260408301529392505050565b6040815260006142b96040830185613633565b90508260208301529392505050565b81810381811115613f1557613f15613eec565b600081546142e881613e90565b60018281168015614300576001811461431557614344565b60ff1984168752821515830287019450614344565b8560005260208060002060005b8581101561433b5781548a820152908401908201614322565b50505082870194505b5050505092915050565b60006110a482846142db565b60006020828403121561436c57600080fd5b81516110a481613735565b85815263ffffffff851660208201526001600160a01b038416604082015260a0606082018190526000906143ad90830185613633565b90508260808301529695505050505050565b8381526060602082015260006143d86060830185613633565b9050826040830152949350505050565b8181036143f3575050565b6143fd8254613e90565b6001600160401b0381111561441457614414613672565b614422816140608454613e90565b6000601f821160018114614456576000831561443e5750848201545b600019600385901b1c1916600184901b1784556144bb565b600085815260209020601f19841690600086815260209020845b838110156144905782860154825560019586019590910190602001614470565b50858310156144ae5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e7634ea49a9d81c98b89f923c0cc14911b7761f576c406f1feb6c2f363b240f264736f6c63430008140033a2646970667358221220afcf9a8d79ed62e0a9b93f6fe299038c03dacbd4dc780dc611fc9c44126f887e64736f6c63430008140033",
  "devdoc": {
    "details": "Uses CREATE2 for predictable wallet addresses across chains",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_backendCoordinator": "Address of the backend coordinator",
          "_owner": "Address of the contract owner",
          "_usdcAddress": "Address of the USDC token for this chain"
        }
      },
      "createWallet(address)": {
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "wallet": "Address of the created smart wallet"
        }
      },
      "createWalletsBatch(address[])": {
        "params": {
          "users": "Array of user addresses"
        },
        "returns": {
          "wallets": "Array of created wallet addresses"
        }
      },
      "disableWallet(address)": {
        "details": "Only owner can call this function",
        "params": {
          "wallet": "Address of the wallet to disable"
        }
      },
      "getTotalWallets()": {
        "returns": {
          "count": "Total wallet count"
        }
      },
      "getUserForAgent(address)": {
        "params": {
          "agentWallet": "Address of the agent wallet"
        },
        "returns": {
          "user": "Address of the user who owns this agent wallet"
        }
      },
      "getWallet(address)": {
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "wallet": "Address of the user's smart wallet (0x0 if doesn't exist)"
        }
      },
      "getWalletBytecodeHash()": {
        "returns": {
          "hash": "The bytecode hash"
        }
      },
      "getWalletOwner(address)": {
        "params": {
          "wallet": "Address of the smart wallet"
        },
        "returns": {
          "owner": "Address of the wallet owner"
        }
      },
      "hasWallet(address)": {
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "exists": "True if wallet exists"
        }
      },
      "isWalletValid(address)": {
        "params": {
          "wallet": "Address to check"
        },
        "returns": {
          "valid": "True if it's a valid wallet"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "predictWalletAddress(address)": {
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "predictedAddress": "The predicted wallet address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "version()": {
        "returns": {
          "_0": "version The contract version"
        }
      }
    },
    "title": "SmartWalletFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "createWallet(address)": {
        "notice": "Create a smart wallet for a user"
      },
      "createWalletsBatch(address[])": {
        "notice": "Create smart wallet for multiple users in batch"
      },
      "disableWallet(address)": {
        "notice": "Emergency function to disable a compromised wallet"
      },
      "getTotalWallets()": {
        "notice": "Get total number of wallets created"
      },
      "getUserForAgent(address)": {
        "notice": "Get the user address for a given agent wallet"
      },
      "getWallet(address)": {
        "notice": "Get the smart wallet address for a user"
      },
      "getWalletBytecodeHash()": {
        "notice": "Get wallet creation bytecode hash (for verification)"
      },
      "getWalletOwner(address)": {
        "notice": "Get the owner of a smart wallet"
      },
      "hasWallet(address)": {
        "notice": "Check if a wallet exists for a user"
      },
      "isWalletValid(address)": {
        "notice": "Check if an address is a valid smart wallet created by this factory"
      },
      "predictWalletAddress(address)": {
        "notice": "Predict the smart wallet address for a user (before creation)"
      },
      "version()": {
        "notice": "Get contract version"
      }
    },
    "notice": "Factory contract for creating deterministic user smart wallets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 976,
        "contract": "contracts/SmartWalletFactory.sol:SmartWalletFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2856,
        "contract": "contracts/SmartWalletFactory.sol:SmartWalletFactory",
        "label": "userWallets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2860,
        "contract": "contracts/SmartWalletFactory.sol:SmartWalletFactory",
        "label": "isValidWallet",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2864,
        "contract": "contracts/SmartWalletFactory.sol:SmartWalletFactory",
        "label": "agentToUser",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}