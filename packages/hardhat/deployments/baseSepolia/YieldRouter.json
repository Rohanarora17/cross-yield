{
  "address": "0x105bfdA57Ece4c01e116B60978CC669E6608FbAb",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "protocol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AllocationReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expectedAPY",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actualCost",
          "type": "uint256"
        }
      ],
      "name": "OptimizationCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "strategy",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "OptimizationRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PortfolioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "improvement",
          "type": "uint256"
        }
      ],
      "name": "RebalanceExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "smartWallet",
          "type": "address"
        }
      ],
      "name": "SmartWalletLinked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newStrategy",
          "type": "string"
        }
      ],
      "name": "StrategyPreferenceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AI_BACKEND_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ANALYTICS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getOptimizationHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectedAPY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "actualAPY",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "protocols",
              "type": "string[]"
            },
            {
              "internalType": "uint256[]",
              "name": "chainIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "allocations",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "gasCost",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transferCost",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "strategy",
              "type": "string"
            }
          ],
          "internalType": "struct YieldRouter.OptimizationHistory",
          "name": "history",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlatformStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalOptimizations_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsers_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averagePortfolioSize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "getUserChainBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserPortfolio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastOptimization",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "optimizationCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalWithdrawn",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "currentStrategy",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "smartWallet",
              "type": "address"
            }
          ],
          "internalType": "struct YieldRouter.UserPortfolio",
          "name": "portfolio",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "protocol",
          "type": "string"
        }
      ],
      "name": "getUserProtocolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserSmartWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "smartWallet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStrategyPreferences",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "riskTolerance",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "preferredChains",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxProtocolAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rebalanceThreshold",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "autoRebalanceEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct YieldRouter.StrategyPreference",
          "name": "preferences",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "backend",
          "type": "address"
        }
      ],
      "name": "grantBackendRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasSmartWallet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasWallet",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_walletFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartWallet",
          "type": "address"
        }
      ],
      "name": "linkSmartWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "optimizationHistory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedAPY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actualAPY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transferCost",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "strategy",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract ChainRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "protocol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "reportAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expectedAPY",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "protocols",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "chainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "allocations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalCost",
          "type": "uint256"
        }
      ],
      "name": "reportOptimizationComplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "strategy",
          "type": "string"
        }
      ],
      "name": "requestOptimization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "backend",
          "type": "address"
        }
      ],
      "name": "revokeBackendRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "strategy",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "riskTolerance",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "preferredChains",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxProtocolAllocation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rebalanceThreshold",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "autoRebalanceEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct YieldRouter.StrategyPreference",
          "name": "preferences",
          "type": "tuple"
        }
      ],
      "name": "setStrategyPreference",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalOptimizations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "actualAPY",
          "type": "uint256"
        }
      ],
      "name": "updateActualAPY",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newWalletFactory",
          "type": "address"
        }
      ],
      "name": "updateContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newTotalValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolCount",
          "type": "uint256"
        }
      ],
      "name": "updatePortfolioValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userChainBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userPortfolios",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastOptimization",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "optimizationCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "currentStrategy",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "smartWallet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "userProtocolBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStrategies",
      "outputs": [
        {
          "internalType": "string",
          "name": "riskTolerance",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "preferredChains",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxProtocolAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rebalanceThreshold",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "autoRebalanceEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "walletFactory",
      "outputs": [
        {
          "internalType": "contract SmartWalletFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0c2d640c23fc76efc9aec1fdd642ca167a69d525037c873f4cee581aaeb6169",
  "receipt": {
    "to": null,
    "from": "0xCE54cF5a0dE3843011cF20389C1b6a4AaC442d6A",
    "contractAddress": "0x105bfdA57Ece4c01e116B60978CC669E6608FbAb",
    "transactionIndex": 28,
    "gasUsed": "2743924",
    "logsBloom": "0x
    "blockHash": "0x2b5896ae0319d590a043f4ea13d4baacf4aa646fa8cb9967a0ccb282d2228df0",
    "transactionHash": "0xf0c2d640c23fc76efc9aec1fdd642ca167a69d525037c873f4cee581aaeb6169",
    "logs": [],
    "blockNumber": 31616934,
    "cumulativeGasUsed": "5625278",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "44980de99fe5e3da10a5960b71b30e10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"protocol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AllocationReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualCost\",\"type\":\"uint256\"}],\"name\":\"OptimizationCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"strategy\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OptimizationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PortfolioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"improvement\",\"type\":\"uint256\"}],\"name\":\"RebalanceExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"smartWallet\",\"type\":\"address\"}],\"name\":\"SmartWalletLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newStrategy\",\"type\":\"string\"}],\"name\":\"StrategyPreferenceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AI_BACKEND_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ANALYTICS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getOptimizationHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAPY\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"protocols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gasCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferCost\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"strategy\",\"type\":\"string\"}],\"internalType\":\"struct YieldRouter.OptimizationHistory\",\"name\":\"history\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalOptimizations_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsers_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePortfolioSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getUserChainBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPortfolio\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastOptimization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimizationCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currentStrategy\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"smartWallet\",\"type\":\"address\"}],\"internalType\":\"struct YieldRouter.UserPortfolio\",\"name\":\"portfolio\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"protocol\",\"type\":\"string\"}],\"name\":\"getUserProtocolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserSmartWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"smartWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStrategyPreferences\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"riskTolerance\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"preferredChains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxProtocolAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoRebalanceEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct YieldRouter.StrategyPreference\",\"name\":\"preferences\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"backend\",\"type\":\"address\"}],\"name\":\"grantBackendRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasSmartWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasWallet\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_walletFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartWallet\",\"type\":\"address\"}],\"name\":\"linkSmartWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"optimizationHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferCost\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"strategy\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract ChainRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"protocol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reportAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expectedAPY\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"protocols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"}],\"name\":\"reportOptimizationComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"strategy\",\"type\":\"string\"}],\"name\":\"requestOptimization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"backend\",\"type\":\"address\"}],\"name\":\"revokeBackendRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"strategy\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"riskTolerance\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"preferredChains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxProtocolAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoRebalanceEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct YieldRouter.StrategyPreference\",\"name\":\"preferences\",\"type\":\"tuple\"}],\"name\":\"setStrategyPreference\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOptimizations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actualAPY\",\"type\":\"uint256\"}],\"name\":\"updateActualAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newWalletFactory\",\"type\":\"address\"}],\"name\":\"updateContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newTotalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolCount\",\"type\":\"uint256\"}],\"name\":\"updatePortfolioValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userChainBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPortfolios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastOptimization\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimizationCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"currentStrategy\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"smartWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userProtocolBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStrategies\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"riskTolerance\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"preferredChains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxProtocolAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoRebalanceEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFactory\",\"outputs\":[{\"internalType\":\"contract SmartWalletFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"No longer handles fund custody - that's moved to UserSmartWallet\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"getOptimizationHistory(address)\":{\"params\":{\"user\":\"User address\"},\"returns\":{\"history\":\"OptimizationHistory struct\"}},\"getPlatformStats()\":{\"returns\":{\"averagePortfolioSize\":\"Average portfolio size\",\"totalOptimizations_\":\"Total optimizations executed\",\"totalUsers_\":\"Total number of users\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getUserChainBalance(address,uint256)\":{\"params\":{\"chainId\":\"Chain ID\",\"user\":\"User address\"},\"returns\":{\"balance\":\"Total balance on that chain\"}},\"getUserPortfolio(address)\":{\"params\":{\"user\":\"User address\"},\"returns\":{\"portfolio\":\"UserPortfolio struct\"}},\"getUserProtocolBalance(address,string)\":{\"params\":{\"protocol\":\"Protocol name\",\"user\":\"User address\"},\"returns\":{\"balance\":\"Balance in that protocol\"}},\"getUserSmartWallet(address)\":{\"params\":{\"user\":\"User address\"},\"returns\":{\"smartWallet\":\"Smart wallet address\"}},\"getUserStrategyPreferences(address)\":{\"params\":{\"user\":\"User address\"},\"returns\":{\"preferences\":\"StrategyPreference struct\"}},\"grantBackendRole(address)\":{\"params\":{\"backend\":\"Backend address to grant role\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hasSmartWallet(address)\":{\"params\":{\"user\":\"User address\"},\"returns\":{\"hasWallet\":\"True if user has a smart wallet\",\"walletAddress\":\"Address of the smart wallet\"}},\"linkSmartWallet(address,address)\":{\"params\":{\"smartWallet\":\"Smart wallet address\",\"user\":\"User address\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"reportAllocation(address,string,uint256,uint256)\":{\"params\":{\"amount\":\"Amount allocated\",\"chainId\":\"Chain ID\",\"protocol\":\"Protocol name\",\"user\":\"User address\"}},\"reportOptimizationComplete(address,uint256,string[],uint256[],uint256[],uint256)\":{\"params\":{\"allocations\":\"Array of allocation amounts\",\"chainIds\":\"Array of chain IDs\",\"expectedAPY\":\"Expected APY from strategy\",\"protocols\":\"Array of protocols used\",\"totalCost\":\"Total execution cost\",\"user\":\"User address\"}},\"requestOptimization(address,uint256,string)\":{\"params\":{\"amount\":\"Amount being deposited\",\"strategy\":\"Strategy preference\",\"user\":\"User address\"}},\"revokeBackendRole(address)\":{\"params\":{\"backend\":\"Backend address to revoke role\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setStrategyPreference(address,string,(string,uint256,uint256,uint256,bool))\":{\"params\":{\"preferences\":\"Detailed strategy preferences\",\"strategy\":\"Strategy preference\",\"user\":\"User address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateActualAPY(address,uint256)\":{\"params\":{\"actualAPY\":\"Measured actual APY\",\"user\":\"User address\"}},\"updateContracts(address,address)\":{\"params\":{\"newRegistry\":\"New ChainRegistry address\",\"newWalletFactory\":\"New SmartWalletFactory address\"}},\"updatePortfolioValue(address,uint256,uint256)\":{\"params\":{\"newTotalValue\":\"New total portfolio value\",\"protocolCount\":\"Number of active protocols\",\"user\":\"User address\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"returns\":{\"_0\":\"version Contract version\"}}},\"title\":\"YieldRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getOptimizationHistory(address)\":{\"notice\":\"Get user's optimization history\"},\"getPlatformStats()\":{\"notice\":\"Get platform statistics\"},\"getUserChainBalance(address,uint256)\":{\"notice\":\"Get user's total balance on a specific chain\"},\"getUserPortfolio(address)\":{\"notice\":\"Get user's complete portfolio information\"},\"getUserProtocolBalance(address,string)\":{\"notice\":\"Get user's balance in a specific protocol\"},\"getUserSmartWallet(address)\":{\"notice\":\"Get user's smart wallet address\"},\"getUserStrategyPreferences(address)\":{\"notice\":\"Get user's strategy preferences\"},\"grantBackendRole(address)\":{\"notice\":\"Grant AI backend role to address\"},\"hasSmartWallet(address)\":{\"notice\":\"Check if user has a smart wallet\"},\"linkSmartWallet(address,address)\":{\"notice\":\"Link user's smart wallet for tracking\"},\"reportAllocation(address,string,uint256,uint256)\":{\"notice\":\"Report allocation result from backend (after execution)\"},\"reportOptimizationComplete(address,uint256,string[],uint256[],uint256[],uint256)\":{\"notice\":\"Report optimization completion\"},\"requestOptimization(address,uint256,string)\":{\"notice\":\"Request portfolio optimization (called when user deposits)\"},\"revokeBackendRole(address)\":{\"notice\":\"Revoke AI backend role from address\"},\"setStrategyPreference(address,string,(string,uint256,uint256,uint256,bool))\":{\"notice\":\"Set user's strategy preference\"},\"updateActualAPY(address,uint256)\":{\"notice\":\"Update actual APY after some time has passed\"},\"updateContracts(address,address)\":{\"notice\":\"Update contract addresses (admin only)\"},\"updatePortfolioValue(address,uint256,uint256)\":{\"notice\":\"Update user's portfolio value (called periodically by backend)\"},\"version()\":{\"notice\":\"Get contract version\"}},\"notice\":\"Simplified yield router for portfolio tracking and coordination\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YieldRouter.sol\":\"YieldRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/ChainRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract ChainRegistry is Initializable, AccessControlUpgradeable {\\n    bytes32 public constant ADMIN_ROLE = DEFAULT_ADMIN_ROLE;\\n    bytes32 public constant PROTOCOL_MANAGER_ROLE = keccak256(\\\"PROTOCOL_MANAGER_ROLE\\\");\\n    \\n    // Protocol management\\n    mapping(string => address) public protocolAdapters;\\n    mapping(string => ProtocolInfo) public protocolInfo;\\n    mapping(uint256 => string[]) public chainProtocols; // chainId => protocols\\n    string[] public protocols;\\n    \\n    // Chain management\\n    mapping(uint256 => ChainInfo) public chainInfo;\\n    uint256[] public supportedChains;\\n    \\n    struct ProtocolInfo {\\n        address adapter;\\n        uint256 chainId;\\n        uint256 riskScore; // 0-100, lower is safer\\n        uint256 minAPY; // Minimum expected APY in basis points\\n        uint256 maxAPY; // Maximum expected APY in basis points\\n        bool isActive;\\n        uint256 tvl; // Total Value Locked\\n        uint256 lastUpdate;\\n    }\\n    \\n    struct ChainInfo {\\n        string name;\\n        address nativeToken; // USDC address on this chain\\n        uint256 gasPrice; // Average gas price\\n        bool isActive;\\n        uint256 bridgeCost; // Cost to bridge to this chain\\n    }\\n    \\n    event ProtocolAdded(string indexed protocol, address adapter, uint256 chainId, uint256 riskScore);\\n    event ProtocolUpdated(string indexed protocol, uint256 riskScore, uint256 minAPY, uint256 maxAPY);\\n    event ChainAdded(uint256 indexed chainId, string name, address nativeToken);\\n    event ProtocolDeactivated(string indexed protocol);\\n\\n    function initialize(address admin) public initializer {\\n        __AccessControl_init();\\n        _grantRole(ADMIN_ROLE, admin);\\n        _grantRole(PROTOCOL_MANAGER_ROLE, admin);\\n    }\\n\\n    function addProtocol(\\n        string calldata name,\\n        address adapter,\\n        uint256 chainId,\\n        uint256 riskScore,\\n        uint256 minAPY,\\n        uint256 maxAPY\\n    ) external onlyRole(PROTOCOL_MANAGER_ROLE) {\\n        require(adapter != address(0), \\\"Invalid adapter\\\");\\n        require(riskScore <= 100, \\\"Risk score too high\\\");\\n        require(minAPY <= maxAPY, \\\"Invalid APY range\\\");\\n        \\n        protocolAdapters[name] = adapter;\\n        protocolInfo[name] = ProtocolInfo({\\n            adapter: adapter,\\n            chainId: chainId,\\n            riskScore: riskScore,\\n            minAPY: minAPY,\\n            maxAPY: maxAPY,\\n            isActive: true,\\n            tvl: 0,\\n            lastUpdate: block.timestamp\\n        });\\n        \\n        protocols.push(name);\\n        chainProtocols[chainId].push(name);\\n        \\n        emit ProtocolAdded(name, adapter, chainId, riskScore);\\n    }\\n    \\n    function updateProtocolInfo(\\n        string calldata name,\\n        uint256 riskScore,\\n        uint256 minAPY,\\n        uint256 maxAPY,\\n        uint256 tvl\\n    ) external onlyRole(PROTOCOL_MANAGER_ROLE) {\\n        require(protocolAdapters[name] != address(0), \\\"Protocol not found\\\");\\n        require(riskScore <= 100, \\\"Risk score too high\\\");\\n        require(minAPY <= maxAPY, \\\"Invalid APY range\\\");\\n        \\n        ProtocolInfo storage info = protocolInfo[name];\\n        info.riskScore = riskScore;\\n        info.minAPY = minAPY;\\n        info.maxAPY = maxAPY;\\n        info.tvl = tvl;\\n        info.lastUpdate = block.timestamp;\\n        \\n        emit ProtocolUpdated(name, riskScore, minAPY, maxAPY);\\n    }\\n    \\n    function deactivateProtocol(string calldata name) external onlyRole(PROTOCOL_MANAGER_ROLE) {\\n        require(protocolAdapters[name] != address(0), \\\"Protocol not found\\\");\\n        protocolInfo[name].isActive = false;\\n        emit ProtocolDeactivated(name);\\n    }\\n    \\n    function addChain(\\n        uint256 chainId,\\n        string calldata name,\\n        address nativeToken,\\n        uint256 gasPrice,\\n        uint256 bridgeCost\\n    ) external onlyRole(ADMIN_ROLE) {\\n        require(nativeToken != address(0), \\\"Invalid native token\\\");\\n        \\n        chainInfo[chainId] = ChainInfo({\\n            name: name,\\n            nativeToken: nativeToken,\\n            gasPrice: gasPrice,\\n            isActive: true,\\n            bridgeCost: bridgeCost\\n        });\\n        \\n        supportedChains.push(chainId);\\n        emit ChainAdded(chainId, name, nativeToken);\\n    }\\n    \\n    function getAdapter(string calldata name) public view returns (address) {\\n        return protocolAdapters[name];\\n    }\\n    \\n    function getProtocolInfo(string calldata name) external view returns (ProtocolInfo memory) {\\n        return protocolInfo[name];\\n    }\\n    \\n    function getAllProtocols() external view returns (string[] memory) {\\n        return protocols;\\n    }\\n    \\n    function getChainProtocols(uint256 chainId) external view returns (string[] memory) {\\n        return chainProtocols[chainId];\\n    }\\n    \\n    function getSupportedChains() external view returns (uint256[] memory) {\\n        return supportedChains;\\n    }\\n    \\n    function getChainInfo(uint256 chainId) external view returns (ChainInfo memory) {\\n        return chainInfo[chainId];\\n    }\\n    \\n    // AI optimization helpers\\n    function getOptimalProtocols(\\n        uint256 minAPY,\\n        uint256 maxRiskScore,\\n        uint256 chainId\\n    ) external view returns (string[] memory optimalProtocols) {\\n        string[] memory chainProtocolsList = chainProtocols[chainId];\\n        uint256 count = 0;\\n        \\n        // Count optimal protocols\\n        for (uint256 i = 0; i < chainProtocolsList.length; i++) {\\n            ProtocolInfo memory info = protocolInfo[chainProtocolsList[i]];\\n            if (info.isActive && info.minAPY >= minAPY && info.riskScore <= maxRiskScore) {\\n                count++;\\n            }\\n        }\\n        \\n        // Create result array\\n        optimalProtocols = new string[](count);\\n        uint256 index = 0;\\n        \\n        for (uint256 i = 0; i < chainProtocolsList.length; i++) {\\n            ProtocolInfo memory info = protocolInfo[chainProtocolsList[i]];\\n            if (info.isActive && info.minAPY >= minAPY && info.riskScore <= maxRiskScore) {\\n                optimalProtocols[index] = chainProtocolsList[i];\\n                index++;\\n            }\\n        }\\n    }\\n    \\n    function getProtocolsByRiskScore(uint256 maxRiskScore) external view returns (string[] memory) {\\n        uint256 count = 0;\\n        \\n        // Count protocols within risk limit\\n        for (uint256 i = 0; i < protocols.length; i++) {\\n            if (protocolInfo[protocols[i]].riskScore <= maxRiskScore && protocolInfo[protocols[i]].isActive) {\\n                count++;\\n            }\\n        }\\n        \\n        string[] memory result = new string[](count);\\n        uint256 index = 0;\\n        \\n        for (uint256 i = 0; i < protocols.length; i++) {\\n            if (protocolInfo[protocols[i]].riskScore <= maxRiskScore && protocolInfo[protocols[i]].isActive) {\\n                result[index] = protocols[i];\\n                index++;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n    \\n    function getCrossChainOpportunities(\\n        uint256 sourceChainId,\\n        uint256 targetChainId,\\n        uint256 minAPYImprovement\\n    ) external view returns (string[] memory opportunities) {\\n        string[] memory sourceProtocols = chainProtocols[sourceChainId];\\n        string[] memory targetProtocols = chainProtocols[targetChainId];\\n        \\n        uint256 count = 0;\\n        \\n        // Count opportunities\\n        for (uint256 i = 0; i < sourceProtocols.length; i++) {\\n            for (uint256 j = 0; j < targetProtocols.length; j++) {\\n                ProtocolInfo memory sourceInfo = protocolInfo[sourceProtocols[i]];\\n                ProtocolInfo memory targetInfo = protocolInfo[targetProtocols[j]];\\n                \\n                if (sourceInfo.isActive && targetInfo.isActive && \\n                    targetInfo.minAPY > sourceInfo.maxAPY + minAPYImprovement) {\\n                    count++;\\n                }\\n            }\\n        }\\n        \\n        opportunities = new string[](count);\\n        uint256 index = 0;\\n        \\n        for (uint256 i = 0; i < sourceProtocols.length; i++) {\\n            for (uint256 j = 0; j < targetProtocols.length; j++) {\\n                ProtocolInfo memory sourceInfo = protocolInfo[sourceProtocols[i]];\\n                ProtocolInfo memory targetInfo = protocolInfo[targetProtocols[j]];\\n                \\n                if (sourceInfo.isActive && targetInfo.isActive && \\n                    targetInfo.minAPY > sourceInfo.maxAPY + minAPYImprovement) {\\n                    opportunities[index] = targetProtocols[j];\\n                    index++;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc4a50301630ff5bc590323e1b00698c38322a01a79dd0bd04d2e1929136fbef7\",\"license\":\"MIT\"},\"contracts/SmartWalletFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./UserSmartWallet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SmartWalletFactory\\n * @notice Factory contract for creating deterministic user smart wallets\\n * @dev Uses CREATE2 for predictable wallet addresses across chains\\n */\\ncontract SmartWalletFactory is Ownable {\\n\\n    // State variables\\n    mapping(address => address) public userWallets;\\n    mapping(address => bool) public isValidWallet;\\n    address public immutable backendCoordinator;\\n\\n    // Events\\n    event WalletCreated(address indexed user, address indexed wallet, bytes32 salt);\\n    event BackendCoordinatorUpdated(address indexed oldCoordinator, address indexed newCoordinator);\\n\\n    // Errors\\n    error WalletAlreadyExists();\\n    error InvalidUser();\\n    error WalletCreationFailed();\\n\\n    /**\\n     * @notice Constructor\\n     * @param _backendCoordinator Address of the backend coordinator\\n     * @param _owner Address of the contract owner\\n     */\\n    constructor(address _backendCoordinator, address _owner) Ownable(_owner) {\\n        require(_backendCoordinator != address(0), \\\"Invalid backend coordinator\\\");\\n        backendCoordinator = _backendCoordinator;\\n    }\\n\\n    /**\\n     * @notice Create a smart wallet for a user\\n     * @param user Address of the user\\n     * @return wallet Address of the created smart wallet\\n     */\\n    function createWallet(address user) external returns (address wallet) {\\n        if (user == address(0)) revert InvalidUser();\\n        if (userWallets[user] != address(0)) revert WalletAlreadyExists();\\n\\n        // Generate deterministic salt based on user address\\n        bytes32 salt = _generateSalt(user);\\n\\n        // Deploy smart wallet using CREATE2\\n        wallet = address(new UserSmartWallet{salt: salt}(\\n            user,\\n            backendCoordinator,\\n            address(this)\\n        ));\\n\\n        if (wallet == address(0)) revert WalletCreationFailed();\\n\\n        // Store wallet mapping\\n        userWallets[user] = wallet;\\n        isValidWallet[wallet] = true;\\n\\n        emit WalletCreated(user, wallet, salt);\\n    }\\n\\n    /**\\n     * @notice Get the smart wallet address for a user\\n     * @param user Address of the user\\n     * @return wallet Address of the user's smart wallet (0x0 if doesn't exist)\\n     */\\n    function getWallet(address user) external view returns (address wallet) {\\n        return userWallets[user];\\n    }\\n\\n    /**\\n     * @notice Predict the smart wallet address for a user (before creation)\\n     * @param user Address of the user\\n     * @return predictedAddress The predicted wallet address\\n     */\\n    function predictWalletAddress(address user) external view returns (address predictedAddress) {\\n        bytes32 salt = _generateSalt(user);\\n\\n        bytes memory bytecode = abi.encodePacked(\\n            type(UserSmartWallet).creationCode,\\n            abi.encode(user, backendCoordinator, address(this))\\n        );\\n\\n        bytes32 hash = keccak256(abi.encodePacked(\\n            bytes1(0xff),\\n            address(this),\\n            salt,\\n            keccak256(bytecode)\\n        ));\\n\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    /**\\n     * @notice Check if a wallet exists for a user\\n     * @param user Address of the user\\n     * @return exists True if wallet exists\\n     */\\n    function hasWallet(address user) external view returns (bool exists) {\\n        return userWallets[user] != address(0);\\n    }\\n\\n    /**\\n     * @notice Check if an address is a valid smart wallet created by this factory\\n     * @param wallet Address to check\\n     * @return valid True if it's a valid wallet\\n     */\\n    function isWalletValid(address wallet) external view returns (bool valid) {\\n        return isValidWallet[wallet];\\n    }\\n\\n    /**\\n     * @notice Get the owner of a smart wallet\\n     * @param wallet Address of the smart wallet\\n     * @return owner Address of the wallet owner\\n     */\\n    function getWalletOwner(address wallet) external view returns (address owner) {\\n        if (!isValidWallet[wallet]) return address(0);\\n        return UserSmartWallet(payable(wallet)).owner();\\n    }\\n\\n    /**\\n     * @notice Get total number of wallets created\\n     * @return count Total wallet count\\n     */\\n    function getTotalWallets() external view returns (uint256 count) {\\n        // This would require additional tracking in production\\n        // For now, we'll implement a basic counter\\n        return 0; // TODO: Implement counter\\n    }\\n\\n    /**\\n     * @notice Emergency function to disable a compromised wallet\\n     * @param wallet Address of the wallet to disable\\n     * @dev Only owner can call this function\\n     */\\n    function disableWallet(address wallet) external onlyOwner {\\n        require(isValidWallet[wallet], \\\"Wallet not valid\\\");\\n        isValidWallet[wallet] = false;\\n\\n        // Find and remove from userWallets mapping\\n        // This is gas-intensive but needed for security\\n        // In production, consider using a different approach\\n    }\\n\\n    /**\\n     * @notice Create smart wallet for multiple users in batch\\n     * @param users Array of user addresses\\n     * @return wallets Array of created wallet addresses\\n     */\\n    function createWalletsBatch(address[] calldata users)\\n        external\\n        returns (address[] memory wallets)\\n    {\\n        uint256 length = users.length;\\n        require(length > 0 && length <= 100, \\\"Invalid batch size\\\"); // Limit batch size\\n\\n        wallets = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            // Skip if wallet already exists\\n            if (userWallets[users[i]] != address(0)) {\\n                wallets[i] = userWallets[users[i]];\\n                continue;\\n            }\\n\\n            wallets[i] = this.createWallet(users[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate deterministic salt for CREATE2\\n     * @param user Address of the user\\n     * @return salt The generated salt\\n     */\\n    function _generateSalt(address user) internal pure returns (bytes32 salt) {\\n        return keccak256(abi.encodePacked(\\\"CrossYield_SmartWallet_\\\", user));\\n    }\\n\\n    /**\\n     * @notice Get wallet creation bytecode hash (for verification)\\n     * @return hash The bytecode hash\\n     */\\n    function getWalletBytecodeHash() external pure returns (bytes32 hash) {\\n        return keccak256(type(UserSmartWallet).creationCode);\\n    }\\n\\n    /**\\n     * @notice Get contract version\\n     * @return version The contract version\\n     */\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n}\",\"keccak256\":\"0x5898798d49db6576bbad21f4bb72bf9f43f08d078619281c1df3d9316b655b0e\",\"license\":\"MIT\"},\"contracts/UserSmartWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IProtocolAdapter.sol\\\";\\n\\n/**\\n * @title UserSmartWallet\\n * @notice Individual smart wallet for non-custodial USDC yield optimization\\n * @dev Each user gets their own wallet with automated execution capabilities\\n */\\ncontract UserSmartWallet is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // State variables\\n    address public immutable owner;\\n    address public immutable backendCoordinator;\\n    address public immutable factory;\\n\\n    // USDC token address (will be set per chain)\\n    IERC20 public constant USDC = IERC20(0xA0B86a33E6417C33B2f2e5D8A7c0c5A3c0f9E2b3); // Placeholder\\n\\n    // Wallet state\\n    bool public isActive;\\n    uint256 public totalDeposited;\\n    uint256 public totalWithdrawn;\\n\\n    // Protocol allocations tracking\\n    mapping(string => uint256) public protocolBalances;\\n    mapping(address => uint256) public adapterBalances;\\n    string[] public activeProtocols;\\n\\n    // Events\\n    event Deposited(address indexed user, uint256 amount, string strategy, uint256 timestamp);\\n    event Withdrawn(address indexed user, uint256 amount, uint256 timestamp);\\n    event EmergencyWithdrawal(address indexed user, uint256 amount, uint256 timestamp);\\n    event ProtocolAllocation(string indexed protocol, address adapter, uint256 amount, uint256 timestamp);\\n    event ProtocolWithdrawal(string indexed protocol, address adapter, uint256 amount, uint256 timestamp);\\n    event CCTPTransferInitiated(uint256 amount, uint32 destinationDomain, address recipient, uint256 timestamp);\\n    event WalletDeactivated(uint256 timestamp);\\n    event BackendActionExecuted(string action, bytes data, uint256 timestamp);\\n    event AllocationExecuted(string[] protocolNames, address[] adapters, uint256[] amounts);\\n\\n    // Errors\\n    error OnlyOwner();\\n    error OnlyBackendOrOwner();\\n    error OnlyFactory();\\n    error WalletNotActive();\\n    error InsufficientBalance();\\n    error InvalidAmount();\\n    error InvalidProtocol();\\n    error TransferFailed();\\n    error ZeroAddress();\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert OnlyOwner();\\n        _;\\n    }\\n\\n    modifier onlyBackendOrOwner() {\\n        if (msg.sender != backendCoordinator && msg.sender != owner) revert OnlyBackendOrOwner();\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        if (msg.sender != factory) revert OnlyFactory();\\n        _;\\n    }\\n\\n    modifier onlyActive() {\\n        if (!isActive) revert WalletNotActive();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _owner Address of the wallet owner (user)\\n     * @param _backendCoordinator Address of the backend coordinator\\n     * @param _factory Address of the factory contract\\n     */\\n    constructor(\\n        address _owner,\\n        address _backendCoordinator,\\n        address _factory\\n    ) {\\n        if (_owner == address(0) || _backendCoordinator == address(0) || _factory == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        owner = _owner;\\n        backendCoordinator = _backendCoordinator;\\n        factory = _factory;\\n        isActive = true;\\n    }\\n\\n    /**\\n     * @notice Deposit USDC to start yield optimization\\n     * @param amount Amount of USDC to deposit\\n     * @param strategy Strategy preference (\\\"conservative\\\", \\\"balanced\\\", \\\"aggressive\\\")\\n     */\\n    function deposit(uint256 amount, string memory strategy)\\n        external\\n        onlyOwner\\n        onlyActive\\n        nonReentrant\\n    {\\n        if (amount == 0) revert InvalidAmount();\\n\\n        // Transfer USDC from owner to this wallet\\n        USDC.safeTransferFrom(owner, address(this), amount);\\n\\n        // Update tracking\\n        totalDeposited += amount;\\n\\n        emit Deposited(owner, amount, strategy, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Execute CCTP cross-chain transfer (called by backend)\\n     * @param amount Amount to transfer\\n     * @param destinationDomain CCTP destination domain\\n     * @param recipient Recipient address on destination chain\\n     */\\n    function executeCCTP(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        address recipient\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (recipient == address(0)) revert ZeroAddress();\\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\\n\\n        // For now, we'll implement a simple transfer to recipient\\n        // In production, this would integrate with Circle's CCTP contracts\\n        USDC.safeTransfer(recipient, amount);\\n\\n        emit CCTPTransferInitiated(amount, destinationDomain, recipient, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Allocate funds to a DeFi protocol\\n     * @param protocolName Name of the protocol\\n     * @param adapter Address of the protocol adapter\\n     * @param amount Amount to allocate\\n     */\\n    function allocateToProtocol(\\n        string memory protocolName,\\n        address adapter,\\n        uint256 amount\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (adapter == address(0)) revert ZeroAddress();\\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\\n\\n        // Approve and deposit to protocol\\n        USDC.safeTransfer(adapter, amount);\\n        IProtocolAdapter(adapter).deposit(owner, amount);\\n\\n        // Update tracking\\n        if (protocolBalances[protocolName] == 0) {\\n            activeProtocols.push(protocolName);\\n        }\\n        protocolBalances[protocolName] += amount;\\n        adapterBalances[adapter] += amount;\\n\\n        emit ProtocolAllocation(protocolName, adapter, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from a DeFi protocol\\n     * @param protocolName Name of the protocol\\n     * @param adapter Address of the protocol adapter\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawFromProtocol(\\n        string memory protocolName,\\n        address adapter,\\n        uint256 amount\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (adapter == address(0)) revert ZeroAddress();\\n        if (protocolBalances[protocolName] < amount) revert InsufficientBalance();\\n\\n        // Withdraw from protocol\\n        IProtocolAdapter(adapter).withdraw(owner, amount);\\n\\n        // Update tracking\\n        protocolBalances[protocolName] -= amount;\\n        adapterBalances[adapter] -= amount;\\n\\n        // Remove from active protocols if balance is zero\\n        if (protocolBalances[protocolName] == 0) {\\n            _removeProtocol(protocolName);\\n        }\\n\\n        emit ProtocolWithdrawal(protocolName, adapter, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Batch allocate to multiple protocols\\n     * @param protocolNames Array of protocol names\\n     * @param adapters Array of adapter addresses\\n     * @param amounts Array of amounts\\n     */\\n    function batchAllocate(\\n        string[] memory protocolNames,\\n        address[] memory adapters,\\n        uint256[] memory amounts\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        uint256 length = protocolNames.length;\\n        require(\\n            length == adapters.length && length == amounts.length,\\n            \\\"Array length mismatch\\\"\\n        );\\n\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            totalAmount += amounts[i];\\n        }\\n\\n        if (USDC.balanceOf(address(this)) < totalAmount) revert InsufficientBalance();\\n\\n        // Protocol allocation will be implemented later with chain-specific adapters\\n        // For now, just emit an event for the backend to track\\n        emit AllocationExecuted(protocolNames, adapters, amounts);\\n    }\\n\\n    /**\\n     * @notice Emergency withdrawal by owner (bypass all restrictions)\\n     * @dev Withdraws all USDC balance to owner\\n     */\\n    function emergencyWithdraw() external onlyOwner nonReentrant {\\n        uint256 balance = USDC.balanceOf(address(this));\\n        if (balance == 0) revert InsufficientBalance();\\n\\n        USDC.safeTransfer(owner, balance);\\n        totalWithdrawn += balance;\\n\\n        emit EmergencyWithdrawal(owner, balance, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Regular withdrawal by owner\\n     * @param amount Amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external onlyOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\\n\\n        USDC.safeTransfer(owner, amount);\\n        totalWithdrawn += amount;\\n\\n        emit Withdrawn(owner, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Deactivate wallet (emergency only, by owner)\\n     */\\n    function deactivateWallet() external onlyOwner {\\n        isActive = false;\\n        emit WalletDeactivated(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Reactivate wallet (can be called by owner or factory)\\n     */\\n    function reactivateWallet() external {\\n        if (msg.sender != owner && msg.sender != factory) {\\n            revert OnlyBackendOrOwner();\\n        }\\n        isActive = true;\\n    }\\n\\n    /**\\n     * @notice Execute arbitrary backend action (with restrictions)\\n     * @param target Target contract address\\n     * @param data Encoded function call data\\n     */\\n    function executeBackendAction(address target, bytes calldata data)\\n        external\\n        onlyBackendOrOwner\\n        onlyActive\\n        nonReentrant\\n        returns (bytes memory result)\\n    {\\n        // Security checks\\n        require(target != address(USDC), \\\"Cannot call USDC directly\\\");\\n        require(target != address(this), \\\"Cannot call self\\\");\\n\\n        (bool success, bytes memory returnData) = target.call(data);\\n        require(success, \\\"Backend action failed\\\");\\n\\n        emit BackendActionExecuted(\\\"external_call\\\", data, block.timestamp);\\n        return returnData;\\n    }\\n\\n    // View functions\\n\\n    /**\\n     * @notice Get USDC balance of this wallet\\n     * @return balance Current USDC balance\\n     */\\n    function getBalance() external view returns (uint256 balance) {\\n        return USDC.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Get protocol balance for a specific protocol\\n     * @param protocolName Name of the protocol\\n     * @return balance Balance in that protocol\\n     */\\n    function getProtocolBalance(string memory protocolName)\\n        external\\n        view\\n        returns (uint256 balance)\\n    {\\n        return protocolBalances[protocolName];\\n    }\\n\\n    /**\\n     * @notice Get all active protocols\\n     * @return protocols Array of active protocol names\\n     */\\n    function getActiveProtocols() external view returns (string[] memory protocols) {\\n        return activeProtocols;\\n    }\\n\\n    /**\\n     * @notice Get total value across all protocols and wallet\\n     * @return totalValue Total value in USDC\\n     */\\n    function getTotalValue() external view returns (uint256 totalValue) {\\n        totalValue = USDC.balanceOf(address(this));\\n\\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\\n            totalValue += protocolBalances[activeProtocols[i]];\\n        }\\n    }\\n\\n    /**\\n     * @notice Get wallet summary\\n     * @return usdcBalance Current USDC balance\\n     * @return totalAllocated Total amount allocated to protocols\\n     * @return protocolCount Number of active protocols\\n     * @return active Whether the wallet is active\\n     */\\n    function getWalletSummary() external view returns (\\n        uint256 usdcBalance,\\n        uint256 totalAllocated,\\n        uint256 protocolCount,\\n        bool active\\n    ) {\\n        usdcBalance = USDC.balanceOf(address(this));\\n\\n        totalAllocated = 0;\\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\\n            totalAllocated += protocolBalances[activeProtocols[i]];\\n        }\\n\\n        protocolCount = activeProtocols.length;\\n        active = isActive;\\n    }\\n\\n    /**\\n     * @notice Check if wallet has sufficient balance for amount\\n     * @param amount Amount to check\\n     * @return sufficient True if balance is sufficient\\n     */\\n    function hasSufficientBalance(uint256 amount) external view returns (bool sufficient) {\\n        return USDC.balanceOf(address(this)) >= amount;\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @notice Remove protocol from active list\\n     * @param protocolName Protocol to remove\\n     */\\n    function _removeProtocol(string memory protocolName) internal {\\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\\n            if (keccak256(bytes(activeProtocols[i])) == keccak256(bytes(protocolName))) {\\n                activeProtocols[i] = activeProtocols[activeProtocols.length - 1];\\n                activeProtocols.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Receive ETH (for gas if needed)\\n     */\\n    receive() external payable {\\n        // Allow receiving ETH for gas payments\\n    }\\n\\n    /**\\n     * @notice Get contract version\\n     * @return version Contract version\\n     */\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n}\",\"keccak256\":\"0xa53c5d51c3d6fc6cde44cfef7c977bf4048a306253de040d4dda8787b292d413\",\"license\":\"MIT\"},\"contracts/YieldRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ChainRegistry.sol\\\";\\nimport \\\"./SmartWalletFactory.sol\\\";\\n\\n/**\\n * @title YieldRouter\\n * @notice Simplified yield router for portfolio tracking and coordination\\n * @dev No longer handles fund custody - that's moved to UserSmartWallet\\n */\\ncontract YieldRouter is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant AI_BACKEND_ROLE = keccak256(\\\"AI_BACKEND_ROLE\\\");\\n    bytes32 public constant ANALYTICS_ROLE = keccak256(\\\"ANALYTICS_ROLE\\\");\\n\\n    ChainRegistry public registry;\\n    SmartWalletFactory public walletFactory;\\n\\n    // Portfolio tracking (no fund custody)\\n    mapping(address => UserPortfolio) public userPortfolios;\\n    mapping(address => mapping(string => uint256)) public userProtocolBalances;\\n    mapping(address => mapping(uint256 => uint256)) public userChainBalances;\\n    \\n    // Analytics and tracking\\n    mapping(address => OptimizationHistory) public optimizationHistory;\\n    mapping(address => StrategyPreference) public userStrategies;\\n    uint256 public totalOptimizations;\\n    uint256 public totalUsers;\\n\\n    struct UserPortfolio {\\n        uint256 totalValue;\\n        uint256 lastOptimization;\\n        uint256 optimizationCount;\\n        uint256 totalDeposited;\\n        uint256 totalWithdrawn;\\n        string currentStrategy;\\n        address smartWallet;\\n    }\\n\\n    struct StrategyPreference {\\n        string riskTolerance; // \\\"conservative\\\", \\\"balanced\\\", \\\"aggressive\\\"\\n        uint256 preferredChains; // Bitmask of preferred chains\\n        uint256 maxProtocolAllocation; // Max % in single protocol (basis points)\\n        uint256 rebalanceThreshold; // Threshold for auto-rebalancing (basis points)\\n        bool autoRebalanceEnabled;\\n    }\\n    \\n    struct OptimizationHistory {\\n        uint256 timestamp;\\n        uint256 expectedAPY;\\n        uint256 actualAPY;\\n        string[] protocols;\\n        uint256[] chainIds;\\n        uint256[] allocations;\\n        uint256 gasCost;\\n        uint256 transferCost;\\n        bool success;\\n        string strategy;\\n    }\\n    \\n    struct RebalanceParams {\\n        address user;\\n        string[] fromProtocols;\\n        string[] toProtocols;\\n        uint256[] amounts;\\n        uint256[] fromChainIds;\\n        uint256[] toChainIds;\\n        uint256 expectedAPY;\\n        uint256 maxGasCost;\\n    }\\n    \\n    struct AIStrategy {\\n        address user;\\n        uint256 totalAmount;\\n        string[] protocols;\\n        uint256[] amounts;\\n        uint256[] chainIds;\\n        uint256 expectedAPY;\\n        uint256 riskScore;\\n        uint256 executionDeadline;\\n    }\\n\\n    // Events for portfolio tracking and analytics\\n    event OptimizationRequested(address indexed user, uint256 amount, string strategy, uint256 timestamp);\\n    event OptimizationCompleted(address indexed user, uint256 strategyId, uint256 expectedAPY, uint256 actualCost);\\n    event PortfolioUpdated(address indexed user, uint256 totalValue, uint256 protocolCount, uint256 timestamp);\\n    event AllocationReported(address indexed user, string protocol, uint256 chainId, uint256 amount, uint256 timestamp);\\n    event RebalanceExecuted(address indexed user, uint256 oldValue, uint256 newValue, uint256 improvement);\\n    event StrategyPreferenceUpdated(address indexed user, string newStrategy);\\n    event SmartWalletLinked(address indexed user, address indexed smartWallet);\\n\\n    function initialize(\\n        address _registry,\\n        address _walletFactory,\\n        address admin\\n    ) public initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        registry = ChainRegistry(_registry);\\n        walletFactory = SmartWalletFactory(_walletFactory);\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(AI_BACKEND_ROLE, admin); // Admin can act as backend initially\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n\\n    // ===== PORTFOLIO TRACKING FUNCTIONS =====\\n\\n    /**\\n     * @notice Link user's smart wallet for tracking\\n     * @param user User address\\n     * @param smartWallet Smart wallet address\\n     */\\n    function linkSmartWallet(address user, address smartWallet) external onlyRole(AI_BACKEND_ROLE) {\\n        require(walletFactory.isWalletValid(smartWallet), \\\"Invalid smart wallet\\\");\\n        require(walletFactory.getWalletOwner(smartWallet) == user, \\\"Wallet owner mismatch\\\");\\n\\n        userPortfolios[user].smartWallet = smartWallet;\\n\\n        if (userPortfolios[user].lastOptimization == 0) {\\n            totalUsers++;\\n        }\\n\\n        emit SmartWalletLinked(user, smartWallet);\\n    }\\n    \\n    /**\\n     * @notice Request portfolio optimization (called when user deposits)\\n     * @param user User address\\n     * @param amount Amount being deposited\\n     * @param strategy Strategy preference\\n     */\\n    function requestOptimization(\\n        address user,\\n        uint256 amount,\\n        string memory strategy\\n    ) external {\\n        // Can be called by user's smart wallet or user directly\\n        require(\\n            msg.sender == user ||\\n            msg.sender == userPortfolios[user].smartWallet ||\\n            hasRole(AI_BACKEND_ROLE, msg.sender),\\n            \\\"Unauthorized\\\"\\n        );\\n\\n        userPortfolios[user].currentStrategy = strategy;\\n        userPortfolios[user].totalDeposited += amount;\\n\\n        emit OptimizationRequested(user, amount, strategy, block.timestamp);\\n    }\\n    \\n    /**\\n     * @notice Report allocation result from backend (after execution)\\n     * @param user User address\\n     * @param protocol Protocol name\\n     * @param chainId Chain ID\\n     * @param amount Amount allocated\\n     */\\n    function reportAllocation(\\n        address user,\\n        string memory protocol,\\n        uint256 chainId,\\n        uint256 amount\\n    ) external onlyRole(AI_BACKEND_ROLE) {\\n        userProtocolBalances[user][protocol] += amount;\\n        userChainBalances[user][chainId] += amount;\\n\\n        emit AllocationReported(user, protocol, chainId, amount, block.timestamp);\\n    }\\n    \\n    /**\\n     * @notice Report optimization completion\\n     * @param user User address\\n     * @param expectedAPY Expected APY from strategy\\n     * @param protocols Array of protocols used\\n     * @param chainIds Array of chain IDs\\n     * @param allocations Array of allocation amounts\\n     * @param totalCost Total execution cost\\n     */\\n    function reportOptimizationComplete(\\n        address user,\\n        uint256 expectedAPY,\\n        string[] memory protocols,\\n        uint256[] memory chainIds,\\n        uint256[] memory allocations,\\n        uint256 totalCost\\n    ) external onlyRole(AI_BACKEND_ROLE) {\\n        uint256 strategyId = totalOptimizations++;\\n\\n        // Update portfolio\\n        UserPortfolio storage portfolio = userPortfolios[user];\\n        portfolio.lastOptimization = block.timestamp;\\n        portfolio.optimizationCount++;\\n\\n        uint256 totalValue = 0;\\n        for (uint256 i = 0; i < allocations.length; i++) {\\n            totalValue += allocations[i];\\n        }\\n        portfolio.totalValue = totalValue;\\n\\n        // Record optimization history\\n        optimizationHistory[user] = OptimizationHistory({\\n            timestamp: block.timestamp,\\n            expectedAPY: expectedAPY,\\n            actualAPY: 0, // Will be updated later\\n            protocols: protocols,\\n            chainIds: chainIds,\\n            allocations: allocations,\\n            gasCost: totalCost,\\n            transferCost: 0,\\n            success: true,\\n            strategy: portfolio.currentStrategy\\n        });\\n\\n        emit OptimizationCompleted(user, strategyId, expectedAPY, totalCost);\\n    }\\n    \\n    /**\\n     * @notice Update user's portfolio value (called periodically by backend)\\n     * @param user User address\\n     * @param newTotalValue New total portfolio value\\n     * @param protocolCount Number of active protocols\\n     */\\n    function updatePortfolioValue(\\n        address user,\\n        uint256 newTotalValue,\\n        uint256 protocolCount\\n    ) external onlyRole(AI_BACKEND_ROLE) {\\n        userPortfolios[user].totalValue = newTotalValue;\\n        emit PortfolioUpdated(user, newTotalValue, protocolCount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Set user's strategy preference\\n     * @param user User address\\n     * @param strategy Strategy preference\\n     * @param preferences Detailed strategy preferences\\n     */\\n    function setStrategyPreference(\\n        address user,\\n        string memory strategy,\\n        StrategyPreference memory preferences\\n    ) external {\\n        require(\\n            msg.sender == user ||\\n            hasRole(AI_BACKEND_ROLE, msg.sender),\\n            \\\"Unauthorized\\\"\\n        );\\n\\n        userStrategies[user] = preferences;\\n        userPortfolios[user].currentStrategy = strategy;\\n\\n        emit StrategyPreferenceUpdated(user, strategy);\\n    }\\n\\n    // ===== VIEW FUNCTIONS =====\\n\\n    /**\\n     * @notice Get user's complete portfolio information\\n     * @param user User address\\n     * @return portfolio UserPortfolio struct\\n     */\\n    function getUserPortfolio(address user)\\n        external\\n        view\\n        returns (UserPortfolio memory portfolio)\\n    {\\n        return userPortfolios[user];\\n    }\\n    /**\\n     * @notice Get user's balance in a specific protocol\\n     * @param user User address\\n     * @param protocol Protocol name\\n     * @return balance Balance in that protocol\\n     */\\n    function getUserProtocolBalance(address user, string memory protocol)\\n        external\\n        view\\n        returns (uint256 balance)\\n    {\\n        return userProtocolBalances[user][protocol];\\n    }\\n\\n    /**\\n     * @notice Get user's total balance on a specific chain\\n     * @param user User address\\n     * @param chainId Chain ID\\n     * @return balance Total balance on that chain\\n     */\\n    function getUserChainBalance(address user, uint256 chainId)\\n        external\\n        view\\n        returns (uint256 balance)\\n    {\\n        return userChainBalances[user][chainId];\\n    }\\n\\n    /**\\n     * @notice Get user's strategy preferences\\n     * @param user User address\\n     * @return preferences StrategyPreference struct\\n     */\\n    function getUserStrategyPreferences(address user)\\n        external\\n        view\\n        returns (StrategyPreference memory preferences)\\n    {\\n        return userStrategies[user];\\n    }\\n\\n    /**\\n     * @notice Get user's optimization history\\n     * @param user User address\\n     * @return history OptimizationHistory struct\\n     */\\n    function getOptimizationHistory(address user)\\n        external\\n        view\\n        returns (OptimizationHistory memory history)\\n    {\\n        return optimizationHistory[user];\\n    }\\n    \\n    /**\\n     * @notice Update actual APY after some time has passed\\n     * @param user User address\\n     * @param actualAPY Measured actual APY\\n     */\\n    function updateActualAPY(address user, uint256 actualAPY)\\n        external\\n        onlyRole(AI_BACKEND_ROLE)\\n    {\\n        OptimizationHistory storage history = optimizationHistory[user];\\n        uint256 oldAPY = history.actualAPY;\\n        history.actualAPY = actualAPY;\\n\\n        uint256 improvement = actualAPY > oldAPY ? actualAPY - oldAPY : 0;\\n\\n        emit RebalanceExecuted(\\n            user,\\n            userPortfolios[user].totalValue,\\n            userPortfolios[user].totalValue, // Same value, different APY\\n            improvement\\n        );\\n    }\\n    \\n    // ===== ANALYTICS AND ADMIN FUNCTIONS =====\\n\\n    /**\\n     * @notice Get platform statistics\\n     * @return totalOptimizations_ Total optimizations executed\\n     * @return totalUsers_ Total number of users\\n     * @return averagePortfolioSize Average portfolio size\\n     */\\n    function getPlatformStats()\\n        external\\n        view\\n        returns (\\n            uint256 totalOptimizations_,\\n            uint256 totalUsers_,\\n            uint256 averagePortfolioSize\\n        )\\n    {\\n        totalOptimizations_ = totalOptimizations;\\n        totalUsers_ = totalUsers;\\n\\n        // Calculate average portfolio size (simplified)\\n        averagePortfolioSize = totalUsers > 0 ? (address(this).balance / totalUsers) : 0;\\n    }\\n\\n    /**\\n     * @notice Check if user has a smart wallet\\n     * @param user User address\\n     * @return hasWallet True if user has a smart wallet\\n     * @return walletAddress Address of the smart wallet\\n     */\\n    function hasSmartWallet(address user)\\n        external\\n        view\\n        returns (bool hasWallet, address walletAddress)\\n    {\\n        walletAddress = userPortfolios[user].smartWallet;\\n        hasWallet = walletAddress != address(0);\\n    }\\n\\n    /**\\n     * @notice Get user's smart wallet address\\n     * @param user User address\\n     * @return smartWallet Smart wallet address\\n     */\\n    function getUserSmartWallet(address user)\\n        external\\n        view\\n        returns (address smartWallet)\\n    {\\n        return userPortfolios[user].smartWallet;\\n    }\\n\\n    /**\\n     * @notice Update contract addresses (admin only)\\n     * @param newRegistry New ChainRegistry address\\n     * @param newWalletFactory New SmartWalletFactory address\\n     */\\n    function updateContracts(\\n        address newRegistry,\\n        address newWalletFactory\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newRegistry != address(0)) {\\n            registry = ChainRegistry(newRegistry);\\n        }\\n        if (newWalletFactory != address(0)) {\\n            walletFactory = SmartWalletFactory(newWalletFactory);\\n        }\\n    }\\n\\n    /**\\n     * @notice Grant AI backend role to address\\n     * @param backend Backend address to grant role\\n     */\\n    function grantBackendRole(address backend) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(AI_BACKEND_ROLE, backend);\\n    }\\n\\n    /**\\n     * @notice Revoke AI backend role from address\\n     * @param backend Backend address to revoke role\\n     */\\n    function revokeBackendRole(address backend) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _revokeRole(AI_BACKEND_ROLE, backend);\\n    }\\n\\n    /**\\n     * @notice Get contract version\\n     * @return version Contract version\\n     */\\n    function version() external pure returns (string memory) {\\n        return \\\"2.0.0\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x5c32de9ef8492870511ac56822e1d5fdaee8c16af36fe29ff45c239b87f689c2\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IProtocolAdapter\\n * @notice Interface for protocol adapters in the CrossYield system\\n * @dev All protocol adapters must implement this interface\\n */\\ninterface IProtocolAdapter {\\n    /**\\n     * @notice Deposit assets into the protocol on behalf of a user\\n     * @param user Address of the user\\n     * @param amount Amount to deposit\\n     */\\n    function deposit(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw assets from the protocol for a user\\n     * @param user Address of the user\\n     * @param amount Amount to withdraw\\n     */\\n    function withdraw(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the balance of a user in this protocol\\n     * @param user Address of the user\\n     * @return balance User's balance in the protocol\\n     */\\n    function balanceOf(address user) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Get the current APY offered by this protocol\\n     * @return apy Current APY in basis points (e.g., 500 = 5%)\\n     */\\n    function getCurrentAPY() external view returns (uint256 apy);\\n\\n    /**\\n     * @notice Get protocol information\\n     * @return name Protocol name\\n     * @return riskScore Risk score (0-100, lower is safer)\\n     * @return tvl Total value locked in USD\\n     */\\n    function getProtocolInfo() external view returns (\\n        string memory name,\\n        uint256 riskScore,\\n        uint256 tvl\\n    );\\n\\n    /**\\n     * @notice Check if deposits are currently allowed\\n     * @return allowed True if deposits are allowed\\n     */\\n    function isDepositAllowed() external view returns (bool allowed);\\n\\n    /**\\n     * @notice Check if withdrawals are currently allowed\\n     * @return allowed True if withdrawals are allowed\\n     */\\n    function isWithdrawAllowed() external view returns (bool allowed);\\n}\",\"keccak256\":\"0xb4a000f5a5357d196443a2afc21c1c1b2d9beff1bcc393325fa250ff0d589465\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516130ac61003e60003960008181611ec001528181611ee9015261202f01526130ac6000f3fe6080604052600436106102465760003560e01c80638687292611610139578063bff1f9e1116100b6578063d547741f1161007a578063d547741f146107c2578063dd3f29db146107e2578063e692c49f14610802578063e6df3d0a14610822578063ebe88f151461084f578063ffdcb76b1461089857600080fd5b8063bff1f9e11461072c578063c0c53b8b14610742578063c226ad9714610762578063c397c5b614610782578063c5c03699146107a257600080fd5b8063a8862d86116100fd578063a8862d8614610666578063aaca0af114610688578063ac21538a146106a8578063ad3cb1cc146106c8578063b61920c1146106f957600080fd5b806386872926146105a257806391d14854146105de57806394660c4b146105fe578063a217fddf14610631578063a844b1571461064657600080fd5b80634f1ef286116101c75780635d9664bf1161018b5780635d9664bf146104a9578063773d05c6146104c95780637b103999146104df57806382009b7a1461051757806383bc12dc1461057557600080fd5b80634f1ef2861461040a57806352d1902d1461041d57806352ed19fe1461043257806354fd4d501461045257806358385b221461048957600080fd5b8063248a9ca31161020e578063248a9ca3146103415780632f2ff15d1461036157806331be49b21461038157806336568abe146103b9578063487bb965146103d957600080fd5b806301ffc9a71461024b578063136d88831461028057806318d68f3b146102b05780631abd602b146102d25780631edb27e914610314575b600080fd5b34801561025757600080fd5b5061026b6102663660046123d8565b6108db565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b50610295610912565b60408051938452602084019290925290820152606001610277565b3480156102bc57600080fd5b506102d06102cb36600461250a565b61093a565b005b3480156102de57600080fd5b506103067f1392683b4fe604b030f727da71b11fe86de118903712aeeae60f8bf8183bbf1b81565b604051908152602001610277565b34801561032057600080fd5b5061033461032f3660046125e3565b610a75565b6040516102779190612650565b34801561034d57600080fd5b5061030661035c3660046126c0565b610bcd565b34801561036d57600080fd5b506102d061037c3660046126d9565b610bef565b34801561038d57600080fd5b5061030661039c366004612709565b600460209081526000928352604080842090915290825290205481565b3480156103c557600080fd5b506102d06103d43660046126d9565b610c11565b3480156103e557600080fd5b506103f96103f43660046125e3565b610c49565b604051610277959493929190612735565b6102d061041836600461276e565b610d03565b34801561042957600080fd5b50610306610d22565b34801561043e57600080fd5b506102d061044d366004612709565b610d3f565b34801561045e57600080fd5b506040805180820190915260058152640322e302e360dc1b60208201525b60405161027791906127d1565b34801561049557600080fd5b506103066104a43660046127e4565b610df8565b3480156104b557600080fd5b506102d06104c4366004612829565b610e35565b3480156104d557600080fd5b5061030660075481565b3480156104eb57600080fd5b506000546104ff906001600160a01b031681565b6040516001600160a01b039091168152602001610277565b34801561052357600080fd5b506105566105323660046125e3565b6001600160a01b039081166000908152600260205260409020600601541680151591565b6040805192151583526001600160a01b03909116602083015201610277565b34801561058157600080fd5b506105956105903660046125e3565b610f21565b6040516102779190612918565b3480156105ae57600080fd5b506104ff6105bd3660046125e3565b6001600160a01b039081166000908152600260205260409020600601541690565b3480156105ea57600080fd5b5061026b6105f93660046126d9565b6111fd565b34801561060a57600080fd5b5061061e6106193660046125e3565b611235565b60405161027797969594939291906129e5565b34801561063d57600080fd5b50610306600081565b34801561065257600080fd5b506102d0610661366004612a2b565b611300565b34801561067257600080fd5b5061030660008051602061301783398151915281565b34801561069457600080fd5b506102d06106a3366004612a60565b611379565b3480156106b457600080fd5b506102d06106c33660046125e3565b61159a565b3480156106d457600080fd5b5061047c604051806040016040528060058152602001640352e302e360dc1b81525081565b34801561070557600080fd5b506107196107143660046125e3565b6115bd565b6040516102779796959493929190612a8e565b34801561073857600080fd5b5061030660085481565b34801561074e57600080fd5b506102d061075d366004612adb565b611690565b34801561076e57600080fd5b506102d061077d3660046125e3565b6117f7565b34801561078e57600080fd5b506102d061079d366004612bb4565b61181a565b3480156107ae57600080fd5b506001546104ff906001600160a01b031681565b3480156107ce57600080fd5b506102d06107dd3660046126d9565b611ac7565b3480156107ee57600080fd5b506102d06107fd366004612cd1565b611ae3565b34801561080e57600080fd5b506102d061081d366004612a60565b611c04565b34801561082e57600080fd5b5061084261083d3660046125e3565b611c6b565b6040516102779190612d29565b34801561085b57600080fd5b5061030661086a3660046127e4565b6003602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b3480156108a457600080fd5b506103066108b3366004612709565b6001600160a01b03919091166000908152600460209081526040808320938352929052205490565b60006001600160e01b03198216637965db0b60e01b148061090c57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600754600854600081610926576000610933565b6008546109339047612d91565b9050909192565b336001600160a01b03841614806109645750610964600080516020613017833981519152336111fd565b6109a45760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064015b60405180910390fd5b6001600160a01b0383166000908152600660205260409020815182919081906109cd9082612e3b565b506020828101516001830155604080840151600280850191909155606085015160038501556080909401516004909301805460ff1916931515939093179092556001600160a01b03861660009081529290529020600501610a2e8382612e3b565b50826001600160a01b03167f7fcc3596725990b28eb192f019ac3362a77576806e9dce22838292b616d1a7bf83604051610a6891906127d1565b60405180910390a2505050565b610abe6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016060815260200160006001600160a01b031681525090565b60026000836001600160a01b03166001600160a01b031681526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582018054610b3090612db3565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5c90612db3565b8015610ba95780601f10610b7e57610100808354040283529160200191610ba9565b820191906000526020600020905b815481529060010190602001808311610b8c57829003601f168201915b5050509183525050600691909101546001600160a01b031660209091015292915050565b6000908152600080516020613057833981519152602052604090206001015490565b610bf882610bcd565b610c0181611d87565b610c0b8383611d94565b50505050565b6001600160a01b0381163314610c3a5760405163334bd91960e11b815260040160405180910390fd5b610c448282611e39565b505050565b600660205260009081526040902080548190610c6490612db3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9090612db3565b8015610cdd5780601f10610cb257610100808354040283529160200191610cdd565b820191906000526020600020905b815481529060010190602001808311610cc057829003601f168201915b505050506001830154600284015460038501546004909501549394919390925060ff1685565b610d0b611eb5565b610d1482611f5c565b610d1e8282611f67565b5050565b6000610d2c612024565b5060008051602061303783398151915290565b600080516020613017833981519152610d5781611d87565b6001600160a01b0383166000908152600560205260408120600281018054908590559091818511610d89576000610d93565b610d938286612efa565b6001600160a01b03871660008181526002602090815260409182902054825181815291820152908101839052919250907f7e2f47fc1890fbb3582a024136b81b3806d1bea781c72b8201f6870d357033839060600160405180910390a2505050505050565b6001600160a01b0382166000908152600360205260408082209051610e1e908490612f0d565b908152602001604051809103902054905092915050565b600080516020613017833981519152610e4d81611d87565b6001600160a01b038516600090815260036020526040908190209051839190610e77908790612f0d565b90815260200160405180910390206000828254610e949190612f29565b90915550506001600160a01b038516600090815260046020908152604080832086845290915281208054849290610ecc908490612f29565b92505081905550846001600160a01b03167f7a791567aee14673ac5f5cc49834e9eb5da58cc18281b5cf5dceeb26fb1230db85858542604051610f129493929190612f3c565b60405180910390a25050505050565b610f796040518061014001604052806000815260200160008152602001600081526020016060815260200160608152602001606081526020016000815260200160008152602001600015158152602001606081525090565b6001600160a01b038216600090815260056020908152604080832081516101408101835281548152600182015481850152600282015481840152600382018054845181870281018701909552808552919592946060870194939192919084015b82821015611085578382906000526020600020018054610ff890612db3565b80601f016020809104026020016040519081016040528092919081815260200182805461102490612db3565b80156110715780601f1061104657610100808354040283529160200191611071565b820191906000526020600020905b81548152906001019060200180831161105457829003601f168201915b505050505081526020019060010190610fd9565b505050508152602001600482018054806020026020016040519081016040528092919081815260200182805480156110dc57602002820191906000526020600020905b8154815260200190600101908083116110c8575b505050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561113457602002820191906000526020600020905b815481526020019060010190808311611120575b50505091835250506006820154602082015260078201546040820152600882015460ff161515606082015260098201805460809092019161117490612db3565b80601f01602080910402602001604051908101604052809291908181526020018280546111a090612db3565b80156111ed5780601f106111c2576101008083540402835291602001916111ed565b820191906000526020600020905b8154815290600101906020018083116111d057829003601f168201915b5050505050815250509050919050565b6000918252600080516020613057833981519152602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60056020526000908152604090208054600182015460028301546006840154600785015460088601546009870180549697959694959394929360ff9092169261127d90612db3565b80601f01602080910402602001604051908101604052809291908181526020018280546112a990612db3565b80156112f65780601f106112cb576101008083540402835291602001916112f6565b820191906000526020600020905b8154815290600101906020018083116112d957829003601f168201915b5050505050905087565b60008051602061301783398151915261131881611d87565b6001600160a01b0384166000818152600260209081526040918290208690558151868152908101859052428183015290517f4ed6952fda1529c4c02b1b9a29e52bb4c691c9cfa4b5d36b9a7b38c67a3215169181900360600190a250505050565b60008051602061301783398151915261139181611d87565b60015460405163ba51a7b360e01b81526001600160a01b0384811660048301529091169063ba51a7b390602401602060405180830381865afa1580156113db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ff9190612f6b565b6114425760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081cdb585c9d081dd85b1b195d60621b604482015260640161099b565b60015460405163966708a560e01b81526001600160a01b03848116600483015285811692169063966708a590602401602060405180830381865afa15801561148e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b29190612f88565b6001600160a01b0316146115005760405162461bcd60e51b81526020600482015260156024820152740aec2d8d8cae840deeedccae440dad2e6dac2e8c6d605b1b604482015260640161099b565b6001600160a01b0383811660009081526002602052604081206006810180546001600160a01b031916938616939093179092556001909101549003611555576008805490600061154f83612fa5565b91905055505b816001600160a01b0316836001600160a01b03167fbda62264c289c6291bb3eb4e3e5307dc06cc297b388621aacf428e523f1bbadc60405160405180910390a3505050565b60006115a581611d87565b610c4460008051602061301783398151915283611e39565b60026020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050180546115fe90612db3565b80601f016020809104026020016040519081016040528092919081815260200182805461162a90612db3565b80156116775780601f1061164c57610100808354040283529160200191611677565b820191906000526020600020905b81548152906001019060200180831161165a57829003601f168201915b505050600690930154919250506001600160a01b031687565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156116d55750825b90506000826001600160401b031660011480156116f15750303b155b9050811580156116ff575080155b1561171d5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561174757845460ff60401b1916600160401b1785555b61174f61206d565b61175761206d565b600080546001600160a01b03808b166001600160a01b031992831617835560018054918b169190921617905561178d9087611d94565b506117a660008051602061301783398151915287611d94565b5083156117ed57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b600061180281611d87565b610c4460008051602061301783398151915283611d94565b60008051602061301783398151915261183281611d87565b600780546000918261184383612fa5565b909155506001600160a01b03891660009081526002602081905260408220426001820155908101805493945090929161187b83612fa5565b91905055506000805b86518110156118c65786818151811061189f5761189f612fbe565b6020026020010151826118b29190612f29565b9150806118be81612fa5565b915050611884565b508082600001819055506040518061014001604052804281526020018a8152602001600081526020018981526020018881526020018781526020018681526020016000815260200160011515815260200183600501805461192690612db3565b80601f016020809104026020016040519081016040528092919081815260200182805461195290612db3565b801561199f5780601f106119745761010080835404028352916020019161199f565b820191906000526020600020905b81548152906001019060200180831161198257829003601f168201915b5050509190925250506001600160a01b038b1660009081526005602090815260409182902083518155838201516001820155918301516002830155606083015180516119f192600385019201906122cf565b5060808201518051611a0d916004840191602090910190612325565b5060a08201518051611a29916005840191602090910190612325565b5060c0820151600682015560e0820151600782015561010082015160088201805460ff19169115159190911790556101208201516009820190611a6c9082612e3b565b505060408051858152602081018c90529081018790526001600160a01b038c1691507f0e151c21d7c08c035b93b93fbce8496266f576b241411682b3aea5733942593e9060600160405180910390a250505050505050505050565b611ad082610bcd565b611ad981611d87565b610c0b8383611e39565b336001600160a01b0384161480611b1657506001600160a01b038381166000908152600260205260409020600601541633145b80611b345750611b34600080516020613017833981519152336111fd565b611b6f5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161099b565b6001600160a01b0383166000908152600260205260409020600501611b948282612e3b565b506001600160a01b03831660009081526002602052604081206003018054849290611bc0908490612f29565b92505081905550826001600160a01b03167f8dee1809e73cb6769186fba278b1f8df02e05ea0be9d6db75099366d3c45d109838342604051610a6893929190612fd4565b6000611c0f81611d87565b6001600160a01b03831615611c3a57600080546001600160a01b0319166001600160a01b0385161790555b6001600160a01b03821615610c4457600180546001600160a01b0384166001600160a01b0319909116179055505050565b611c9f6040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b03821660009081526006602052604090819020815160a08101909252805482908290611cd190612db3565b80601f0160208091040260200160405190810160405280929190818152602001828054611cfd90612db3565b8015611d4a5780601f10611d1f57610100808354040283529160200191611d4a565b820191906000526020600020905b815481529060010190602001808311611d2d57829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460ff16151560809091015292915050565b611d918133612075565b50565b6000600080516020613057833981519152611daf84846111fd565b611e2f576000848152602082815260408083206001600160a01b03871684529091529020805460ff19166001179055611de53390565b6001600160a01b0316836001600160a01b0316857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600191505061090c565b600091505061090c565b6000600080516020613057833981519152611e5484846111fd565b15611e2f576000848152602082815260408083206001600160a01b0387168085529252808320805460ff1916905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4600191505061090c565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611f3c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611f30600080516020613037833981519152546001600160a01b031690565b6001600160a01b031614155b15611f5a5760405163703e46dd60e11b815260040160405180910390fd5b565b6000610d1e81611d87565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611fc1575060408051601f3d908101601f19168201909252611fbe91810190612ffd565b60015b611fe957604051634c9c8ce360e01b81526001600160a01b038316600482015260240161099b565b600080516020613037833981519152811461201a57604051632a87526960e21b81526004810182905260240161099b565b610c4483836120ae565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611f5a5760405163703e46dd60e11b815260040160405180910390fd5b611f5a612104565b61207f82826111fd565b610d1e5760405163e2517d3f60e01b81526001600160a01b03821660048201526024810183905260440161099b565b6120b78261214d565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156120fc57610c4482826121b2565b610d1e612228565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16611f5a57604051631afcd79f60e31b815260040160405180910390fd5b806001600160a01b03163b60000361218357604051634c9c8ce360e01b81526001600160a01b038216600482015260240161099b565b60008051602061303783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516121cf9190612f0d565b600060405180830381855af49150503d806000811461220a576040519150601f19603f3d011682016040523d82523d6000602084013e61220f565b606091505b509150915061221f858383612247565b95945050505050565b3415611f5a5760405163b398979f60e01b815260040160405180910390fd5b60608261225c57612257826122a6565b61229f565b815115801561227357506001600160a01b0384163b155b1561229c57604051639996b31560e01b81526001600160a01b038516600482015260240161099b565b50805b9392505050565b8051156122b65780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b828054828255906000526020600020908101928215612315579160200282015b8281111561231557825182906123059082612e3b565b50916020019190600101906122ef565b5061232192915061236c565b5090565b828054828255906000526020600020908101928215612360579160200282015b82811115612360578251825591602001919060010190612345565b50612321929150612389565b80821115612321576000612380828261239e565b5060010161236c565b5b80821115612321576000815560010161238a565b5080546123aa90612db3565b6000825580601f106123ba575050565b601f016020900490600052602060002090810190611d919190612389565b6000602082840312156123ea57600080fd5b81356001600160e01b03198116811461229f57600080fd5b6001600160a01b0381168114611d9157600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171561244f5761244f612417565b60405290565b604051601f8201601f191681016001600160401b038111828210171561247d5761247d612417565b604052919050565b60006001600160401b0383111561249e5761249e612417565b6124b1601f8401601f1916602001612455565b90508281528383830111156124c557600080fd5b828260208301376000602084830101529392505050565b600082601f8301126124ed57600080fd5b61229f83833560208501612485565b8015158114611d9157600080fd5b60008060006060848603121561251f57600080fd5b833561252a81612402565b925060208401356001600160401b038082111561254657600080fd5b612552878388016124dc565b9350604086013591508082111561256857600080fd5b9085019060a0828803121561257c57600080fd5b61258461242d565b82358281111561259357600080fd5b61259f898286016124dc565b825250602083013560208201526040830135604082015260608301356060820152608083013592506125d0836124fc565b8260808201528093505050509250925092565b6000602082840312156125f557600080fd5b813561229f81612402565b60005b8381101561261b578181015183820152602001612603565b50506000910152565b6000815180845261263c816020860160208601612600565b601f01601f19169290920160200192915050565b6020815281516020820152602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a083015160e060c084015261269f610100840182612624565b60c094909401516001600160a01b031660e093909301929092525090919050565b6000602082840312156126d257600080fd5b5035919050565b600080604083850312156126ec57600080fd5b8235915060208301356126fe81612402565b809150509250929050565b6000806040838503121561271c57600080fd5b823561272781612402565b946020939093013593505050565b60a08152600061274860a0830188612624565b905085602083015284604083015283606083015282151560808301529695505050505050565b6000806040838503121561278157600080fd5b823561278c81612402565b915060208301356001600160401b038111156127a757600080fd5b8301601f810185136127b857600080fd5b6127c785823560208401612485565b9150509250929050565b60208152600061229f6020830184612624565b600080604083850312156127f757600080fd5b823561280281612402565b915060208301356001600160401b0381111561281d57600080fd5b6127c7858286016124dc565b6000806000806080858703121561283f57600080fd5b843561284a81612402565b935060208501356001600160401b0381111561286557600080fd5b612871878288016124dc565b949794965050505060408301359260600135919050565b600081518084526020808501808196508360051b8101915082860160005b858110156128d05782840389526128be848351612624565b988501989350908401906001016128a6565b5091979650505050505050565b600081518084526020808501945080840160005b8381101561290d578151875295820195908201906001016128f1565b509495945050505050565b6020815281516020820152602082015160408201526040820151606082015260006060830151610140806080850152612955610160850183612888565b91506080850151601f19808685030160a087015261297384836128dd565b935060a08701519150808685030160c087015261299084836128dd565b935060c087015160e087015260e087015191506101008281880152808801519250506101206129c28188018415159052565b8701518685039091018387015290506129db8382612624565b9695505050505050565b87815286602082015285604082015284606082015283608082015282151560a082015260e060c08201526000612a1e60e0830184612624565b9998505050505050505050565b600080600060608486031215612a4057600080fd5b8335612a4b81612402565b95602085013595506040909401359392505050565b60008060408385031215612a7357600080fd5b8235612a7e81612402565b915060208301356126fe81612402565b87815286602082015285604082015284606082015283608082015260e060a08201526000612abf60e0830185612624565b905060018060a01b03831660c083015298975050505050505050565b600080600060608486031215612af057600080fd5b8335612afb81612402565b92506020840135612b0b81612402565b91506040840135612b1b81612402565b809150509250925092565b60006001600160401b03821115612b3f57612b3f612417565b5060051b60200190565b600082601f830112612b5a57600080fd5b81356020612b6f612b6a83612b26565b612455565b82815260059290921b84018101918181019086841115612b8e57600080fd5b8286015b84811015612ba95780358352918301918301612b92565b509695505050505050565b60008060008060008060c08789031215612bcd57600080fd5b612bd78735612402565b86359550602080880135955060408801356001600160401b0380821115612bfd57600080fd5b818a0191508a601f830112612c1157600080fd5b8135612c1f612b6a82612b26565b81815260059190911b8301840190848101908d831115612c3e57600080fd5b8585015b83811015612c74578481351115612c5857600080fd5b612c678f8883358901016124dc565b8352918601918601612c42565b509850505060608a0135925080831115612c8d57600080fd5b612c998b848c01612b49565b955060808a0135925080831115612caf57600080fd5b5050612cbd89828a01612b49565b92505060a087013590509295509295509295565b600080600060608486031215612ce657600080fd5b8335612cf181612402565b92506020840135915060408401356001600160401b03811115612d1357600080fd5b612d1f868287016124dc565b9150509250925092565b602081526000825160a06020840152612d4560c0840182612624565b90506020840151604084015260408401516060840152606084015160808401526080840151151560a08401528091505092915050565b634e487b7160e01b600052601160045260246000fd5b600082612dae57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680612dc757607f821691505b602082108103612de757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610c4457600081815260208120601f850160051c81016020861015612e145750805b601f850160051c820191505b81811015612e3357828155600101612e20565b505050505050565b81516001600160401b03811115612e5457612e54612417565b612e6881612e628454612db3565b84612ded565b602080601f831160018114612e9d5760008415612e855750858301515b600019600386901b1c1916600185901b178555612e33565b600085815260208120601f198616915b82811015612ecc57888601518255948401946001909101908401612ead565b5085821015612eea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561090c5761090c612d7b565b60008251612f1f818460208701612600565b9190910192915050565b8082018082111561090c5761090c612d7b565b608081526000612f4f6080830187612624565b6020830195909552506040810192909252606090910152919050565b600060208284031215612f7d57600080fd5b815161229f816124fc565b600060208284031215612f9a57600080fd5b815161229f81612402565b600060018201612fb757612fb7612d7b565b5060010190565b634e487b7160e01b600052603260045260246000fd5b838152606060208201526000612fed6060830185612624565b9050826040830152949350505050565b60006020828403121561300f57600080fd5b505191905056feaebbd0fb413151224c6a708bd8331fef3cf1f79a695aedc8857f3cc1c6334e39360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800a2646970667358221220211dec1deb02e6e5a37089df86a67e19b88eb4efdad262d509f9ca73fd0b4aa264736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "No longer handles fund custody - that's moved to UserSmartWallet",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "getOptimizationHistory(address)": {
        "params": {
          "user": "User address"
        },
        "returns": {
          "history": "OptimizationHistory struct"
        }
      },
      "getPlatformStats()": {
        "returns": {
          "averagePortfolioSize": "Average portfolio size",
          "totalOptimizations_": "Total optimizations executed",
          "totalUsers_": "Total number of users"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getUserChainBalance(address,uint256)": {
        "params": {
          "chainId": "Chain ID",
          "user": "User address"
        },
        "returns": {
          "balance": "Total balance on that chain"
        }
      },
      "getUserPortfolio(address)": {
        "params": {
          "user": "User address"
        },
        "returns": {
          "portfolio": "UserPortfolio struct"
        }
      },
      "getUserProtocolBalance(address,string)": {
        "params": {
          "protocol": "Protocol name",
          "user": "User address"
        },
        "returns": {
          "balance": "Balance in that protocol"
        }
      },
      "getUserSmartWallet(address)": {
        "params": {
          "user": "User address"
        },
        "returns": {
          "smartWallet": "Smart wallet address"
        }
      },
      "getUserStrategyPreferences(address)": {
        "params": {
          "user": "User address"
        },
        "returns": {
          "preferences": "StrategyPreference struct"
        }
      },
      "grantBackendRole(address)": {
        "params": {
          "backend": "Backend address to grant role"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hasSmartWallet(address)": {
        "params": {
          "user": "User address"
        },
        "returns": {
          "hasWallet": "True if user has a smart wallet",
          "walletAddress": "Address of the smart wallet"
        }
      },
      "linkSmartWallet(address,address)": {
        "params": {
          "smartWallet": "Smart wallet address",
          "user": "User address"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "reportAllocation(address,string,uint256,uint256)": {
        "params": {
          "amount": "Amount allocated",
          "chainId": "Chain ID",
          "protocol": "Protocol name",
          "user": "User address"
        }
      },
      "reportOptimizationComplete(address,uint256,string[],uint256[],uint256[],uint256)": {
        "params": {
          "allocations": "Array of allocation amounts",
          "chainIds": "Array of chain IDs",
          "expectedAPY": "Expected APY from strategy",
          "protocols": "Array of protocols used",
          "totalCost": "Total execution cost",
          "user": "User address"
        }
      },
      "requestOptimization(address,uint256,string)": {
        "params": {
          "amount": "Amount being deposited",
          "strategy": "Strategy preference",
          "user": "User address"
        }
      },
      "revokeBackendRole(address)": {
        "params": {
          "backend": "Backend address to revoke role"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setStrategyPreference(address,string,(string,uint256,uint256,uint256,bool))": {
        "params": {
          "preferences": "Detailed strategy preferences",
          "strategy": "Strategy preference",
          "user": "User address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateActualAPY(address,uint256)": {
        "params": {
          "actualAPY": "Measured actual APY",
          "user": "User address"
        }
      },
      "updateContracts(address,address)": {
        "params": {
          "newRegistry": "New ChainRegistry address",
          "newWalletFactory": "New SmartWalletFactory address"
        }
      },
      "updatePortfolioValue(address,uint256,uint256)": {
        "params": {
          "newTotalValue": "New total portfolio value",
          "protocolCount": "Number of active protocols",
          "user": "User address"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "version()": {
        "returns": {
          "_0": "version Contract version"
        }
      }
    },
    "title": "YieldRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getOptimizationHistory(address)": {
        "notice": "Get user's optimization history"
      },
      "getPlatformStats()": {
        "notice": "Get platform statistics"
      },
      "getUserChainBalance(address,uint256)": {
        "notice": "Get user's total balance on a specific chain"
      },
      "getUserPortfolio(address)": {
        "notice": "Get user's complete portfolio information"
      },
      "getUserProtocolBalance(address,string)": {
        "notice": "Get user's balance in a specific protocol"
      },
      "getUserSmartWallet(address)": {
        "notice": "Get user's smart wallet address"
      },
      "getUserStrategyPreferences(address)": {
        "notice": "Get user's strategy preferences"
      },
      "grantBackendRole(address)": {
        "notice": "Grant AI backend role to address"
      },
      "hasSmartWallet(address)": {
        "notice": "Check if user has a smart wallet"
      },
      "linkSmartWallet(address,address)": {
        "notice": "Link user's smart wallet for tracking"
      },
      "reportAllocation(address,string,uint256,uint256)": {
        "notice": "Report allocation result from backend (after execution)"
      },
      "reportOptimizationComplete(address,uint256,string[],uint256[],uint256[],uint256)": {
        "notice": "Report optimization completion"
      },
      "requestOptimization(address,uint256,string)": {
        "notice": "Request portfolio optimization (called when user deposits)"
      },
      "revokeBackendRole(address)": {
        "notice": "Revoke AI backend role from address"
      },
      "setStrategyPreference(address,string,(string,uint256,uint256,uint256,bool))": {
        "notice": "Set user's strategy preference"
      },
      "updateActualAPY(address,uint256)": {
        "notice": "Update actual APY after some time has passed"
      },
      "updateContracts(address,address)": {
        "notice": "Update contract addresses (admin only)"
      },
      "updatePortfolioValue(address,uint256,uint256)": {
        "notice": "Update user's portfolio value (called periodically by backend)"
      },
      "version()": {
        "notice": "Get contract version"
      }
    },
    "notice": "Simplified yield router for portfolio tracking and coordination",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4655,
        "contract": "contracts/YieldRouter.sol:YieldRouter",
        "label": "registry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ChainRegistry)3171"
      },
      {
        "astId": 4658,
        "contract": "contracts/YieldRouter.sol:YieldRouter",
        "label": "walletFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(SmartWalletFactory)3607"
      },
      {
        "astId": 4663,
        "contract": "contracts/YieldRouter.sol:YieldRouter",
        "label": "userPortfolios",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UserPortfolio)4704_storage)"
      },
      {
        "astId": 4669,
        "contract": "contracts/YieldRouter.sol:YieldRouter",
        "label": "userProtocolBalances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 4675,
        "contract": "contracts/YieldRouter.sol:YieldRouter",
        "label": "userChainBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4680,
        "contract": "contracts/YieldRouter.sol:YieldRouter",
        "label": "optimizationHistory",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(OptimizationHistory)4739_storage)"
      },
      {
        "astId": 4685,
        "contract": "contracts/YieldRouter.sol:YieldRouter",
        "label": "userStrategies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(StrategyPreference)4715_storage)"
      },
      {
        "astId": 4687,
        "contract": "contracts/YieldRouter.sol:YieldRouter",
        "label": "totalOptimizations",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4689,
        "contract": "contracts/YieldRouter.sol:YieldRouter",
        "label": "totalUsers",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ChainRegistry)3171": {
        "encoding": "inplace",
        "label": "contract ChainRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(SmartWalletFactory)3607": {
        "encoding": "inplace",
        "label": "contract SmartWalletFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(OptimizationHistory)4739_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YieldRouter.OptimizationHistory)",
        "numberOfBytes": "32",
        "value": "t_struct(OptimizationHistory)4739_storage"
      },
      "t_mapping(t_address,t_struct(StrategyPreference)4715_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YieldRouter.StrategyPreference)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyPreference)4715_storage"
      },
      "t_mapping(t_address,t_struct(UserPortfolio)4704_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct YieldRouter.UserPortfolio)",
        "numberOfBytes": "32",
        "value": "t_struct(UserPortfolio)4704_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(OptimizationHistory)4739_storage": {
        "encoding": "inplace",
        "label": "struct YieldRouter.OptimizationHistory",
        "members": [
          {
            "astId": 4717,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4719,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "expectedAPY",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4721,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "actualAPY",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4724,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "protocols",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 4727,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "chainIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4730,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "allocations",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4732,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "gasCost",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4734,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "transferCost",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4736,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "success",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 4738,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "strategy",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(StrategyPreference)4715_storage": {
        "encoding": "inplace",
        "label": "struct YieldRouter.StrategyPreference",
        "members": [
          {
            "astId": 4706,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "riskTolerance",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4708,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "preferredChains",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4710,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "maxProtocolAllocation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4712,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "rebalanceThreshold",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4714,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "autoRebalanceEnabled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserPortfolio)4704_storage": {
        "encoding": "inplace",
        "label": "struct YieldRouter.UserPortfolio",
        "members": [
          {
            "astId": 4691,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "totalValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4693,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "lastOptimization",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4695,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "optimizationCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4697,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "totalDeposited",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4699,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "totalWithdrawn",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4701,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "currentStrategy",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 4703,
            "contract": "contracts/YieldRouter.sol:YieldRouter",
            "label": "smartWallet",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}