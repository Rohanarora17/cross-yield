{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "contracts/ChainRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract ChainRegistry is Initializable, AccessControlUpgradeable {\n    bytes32 public constant ADMIN_ROLE = DEFAULT_ADMIN_ROLE;\n    bytes32 public constant PROTOCOL_MANAGER_ROLE = keccak256(\"PROTOCOL_MANAGER_ROLE\");\n    \n    // Protocol management\n    mapping(string => address) public protocolAdapters;\n    mapping(string => ProtocolInfo) public protocolInfo;\n    mapping(uint256 => string[]) public chainProtocols; // chainId => protocols\n    string[] public protocols;\n    \n    // Chain management\n    mapping(uint256 => ChainInfo) public chainInfo;\n    uint256[] public supportedChains;\n    \n    struct ProtocolInfo {\n        address adapter;\n        uint256 chainId;\n        uint256 riskScore; // 0-100, lower is safer\n        uint256 minAPY; // Minimum expected APY in basis points\n        uint256 maxAPY; // Maximum expected APY in basis points\n        bool isActive;\n        uint256 tvl; // Total Value Locked\n        uint256 lastUpdate;\n    }\n    \n    struct ChainInfo {\n        string name;\n        address nativeToken; // USDC address on this chain\n        uint256 gasPrice; // Average gas price\n        bool isActive;\n        uint256 bridgeCost; // Cost to bridge to this chain\n    }\n    \n    event ProtocolAdded(string indexed protocol, address adapter, uint256 chainId, uint256 riskScore);\n    event ProtocolUpdated(string indexed protocol, uint256 riskScore, uint256 minAPY, uint256 maxAPY);\n    event ChainAdded(uint256 indexed chainId, string name, address nativeToken);\n    event ProtocolDeactivated(string indexed protocol);\n\n    function initialize(address admin) public initializer {\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, admin);\n        _grantRole(PROTOCOL_MANAGER_ROLE, admin);\n    }\n\n    function addProtocol(\n        string calldata name,\n        address adapter,\n        uint256 chainId,\n        uint256 riskScore,\n        uint256 minAPY,\n        uint256 maxAPY\n    ) external onlyRole(PROTOCOL_MANAGER_ROLE) {\n        require(adapter != address(0), \"Invalid adapter\");\n        require(riskScore <= 100, \"Risk score too high\");\n        require(minAPY <= maxAPY, \"Invalid APY range\");\n        \n        protocolAdapters[name] = adapter;\n        protocolInfo[name] = ProtocolInfo({\n            adapter: adapter,\n            chainId: chainId,\n            riskScore: riskScore,\n            minAPY: minAPY,\n            maxAPY: maxAPY,\n            isActive: true,\n            tvl: 0,\n            lastUpdate: block.timestamp\n        });\n        \n        protocols.push(name);\n        chainProtocols[chainId].push(name);\n        \n        emit ProtocolAdded(name, adapter, chainId, riskScore);\n    }\n    \n    function updateProtocolInfo(\n        string calldata name,\n        uint256 riskScore,\n        uint256 minAPY,\n        uint256 maxAPY,\n        uint256 tvl\n    ) external onlyRole(PROTOCOL_MANAGER_ROLE) {\n        require(protocolAdapters[name] != address(0), \"Protocol not found\");\n        require(riskScore <= 100, \"Risk score too high\");\n        require(minAPY <= maxAPY, \"Invalid APY range\");\n        \n        ProtocolInfo storage info = protocolInfo[name];\n        info.riskScore = riskScore;\n        info.minAPY = minAPY;\n        info.maxAPY = maxAPY;\n        info.tvl = tvl;\n        info.lastUpdate = block.timestamp;\n        \n        emit ProtocolUpdated(name, riskScore, minAPY, maxAPY);\n    }\n    \n    function deactivateProtocol(string calldata name) external onlyRole(PROTOCOL_MANAGER_ROLE) {\n        require(protocolAdapters[name] != address(0), \"Protocol not found\");\n        protocolInfo[name].isActive = false;\n        emit ProtocolDeactivated(name);\n    }\n    \n    function addChain(\n        uint256 chainId,\n        string calldata name,\n        address nativeToken,\n        uint256 gasPrice,\n        uint256 bridgeCost\n    ) external onlyRole(ADMIN_ROLE) {\n        require(nativeToken != address(0), \"Invalid native token\");\n        \n        chainInfo[chainId] = ChainInfo({\n            name: name,\n            nativeToken: nativeToken,\n            gasPrice: gasPrice,\n            isActive: true,\n            bridgeCost: bridgeCost\n        });\n        \n        supportedChains.push(chainId);\n        emit ChainAdded(chainId, name, nativeToken);\n    }\n    \n    function getAdapter(string calldata name) public view returns (address) {\n        return protocolAdapters[name];\n    }\n    \n    function getProtocolInfo(string calldata name) external view returns (ProtocolInfo memory) {\n        return protocolInfo[name];\n    }\n    \n    function getAllProtocols() external view returns (string[] memory) {\n        return protocols;\n    }\n    \n    function getChainProtocols(uint256 chainId) external view returns (string[] memory) {\n        return chainProtocols[chainId];\n    }\n    \n    function getSupportedChains() external view returns (uint256[] memory) {\n        return supportedChains;\n    }\n    \n    function getChainInfo(uint256 chainId) external view returns (ChainInfo memory) {\n        return chainInfo[chainId];\n    }\n    \n    // AI optimization helpers\n    function getOptimalProtocols(\n        uint256 minAPY,\n        uint256 maxRiskScore,\n        uint256 chainId\n    ) external view returns (string[] memory optimalProtocols) {\n        string[] memory chainProtocolsList = chainProtocols[chainId];\n        uint256 count = 0;\n        \n        // Count optimal protocols\n        for (uint256 i = 0; i < chainProtocolsList.length; i++) {\n            ProtocolInfo memory info = protocolInfo[chainProtocolsList[i]];\n            if (info.isActive && info.minAPY >= minAPY && info.riskScore <= maxRiskScore) {\n                count++;\n            }\n        }\n        \n        // Create result array\n        optimalProtocols = new string[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 0; i < chainProtocolsList.length; i++) {\n            ProtocolInfo memory info = protocolInfo[chainProtocolsList[i]];\n            if (info.isActive && info.minAPY >= minAPY && info.riskScore <= maxRiskScore) {\n                optimalProtocols[index] = chainProtocolsList[i];\n                index++;\n            }\n        }\n    }\n    \n    function getProtocolsByRiskScore(uint256 maxRiskScore) external view returns (string[] memory) {\n        uint256 count = 0;\n        \n        // Count protocols within risk limit\n        for (uint256 i = 0; i < protocols.length; i++) {\n            if (protocolInfo[protocols[i]].riskScore <= maxRiskScore && protocolInfo[protocols[i]].isActive) {\n                count++;\n            }\n        }\n        \n        string[] memory result = new string[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 0; i < protocols.length; i++) {\n            if (protocolInfo[protocols[i]].riskScore <= maxRiskScore && protocolInfo[protocols[i]].isActive) {\n                result[index] = protocols[i];\n                index++;\n            }\n        }\n        \n        return result;\n    }\n    \n    function getCrossChainOpportunities(\n        uint256 sourceChainId,\n        uint256 targetChainId,\n        uint256 minAPYImprovement\n    ) external view returns (string[] memory opportunities) {\n        string[] memory sourceProtocols = chainProtocols[sourceChainId];\n        string[] memory targetProtocols = chainProtocols[targetChainId];\n        \n        uint256 count = 0;\n        \n        // Count opportunities\n        for (uint256 i = 0; i < sourceProtocols.length; i++) {\n            for (uint256 j = 0; j < targetProtocols.length; j++) {\n                ProtocolInfo memory sourceInfo = protocolInfo[sourceProtocols[i]];\n                ProtocolInfo memory targetInfo = protocolInfo[targetProtocols[j]];\n                \n                if (sourceInfo.isActive && targetInfo.isActive && \n                    targetInfo.minAPY > sourceInfo.maxAPY + minAPYImprovement) {\n                    count++;\n                }\n            }\n        }\n        \n        opportunities = new string[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 0; i < sourceProtocols.length; i++) {\n            for (uint256 j = 0; j < targetProtocols.length; j++) {\n                ProtocolInfo memory sourceInfo = protocolInfo[sourceProtocols[i]];\n                ProtocolInfo memory targetInfo = protocolInfo[targetProtocols[j]];\n                \n                if (sourceInfo.isActive && targetInfo.isActive && \n                    targetInfo.minAPY > sourceInfo.maxAPY + minAPYImprovement) {\n                    opportunities[index] = targetProtocols[j];\n                    index++;\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IProtocolAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IProtocolAdapter\n * @notice Interface for protocol adapters in the CrossYield system\n * @dev All protocol adapters must implement this interface\n */\ninterface IProtocolAdapter {\n    /**\n     * @notice Deposit assets into the protocol on behalf of a user\n     * @param user Address of the user\n     * @param amount Amount to deposit\n     */\n    function deposit(address user, uint256 amount) external;\n\n    /**\n     * @notice Withdraw assets from the protocol for a user\n     * @param user Address of the user\n     * @param amount Amount to withdraw\n     */\n    function withdraw(address user, uint256 amount) external;\n\n    /**\n     * @notice Get the balance of a user in this protocol\n     * @param user Address of the user\n     * @return balance User's balance in the protocol\n     */\n    function balanceOf(address user) external view returns (uint256 balance);\n\n    /**\n     * @notice Get the current APY offered by this protocol\n     * @return apy Current APY in basis points (e.g., 500 = 5%)\n     */\n    function getCurrentAPY() external view returns (uint256 apy);\n\n    /**\n     * @notice Get protocol information\n     * @return name Protocol name\n     * @return riskScore Risk score (0-100, lower is safer)\n     * @return tvl Total value locked in USD\n     */\n    function getProtocolInfo() external view returns (\n        string memory name,\n        uint256 riskScore,\n        uint256 tvl\n    );\n\n    /**\n     * @notice Check if deposits are currently allowed\n     * @return allowed True if deposits are allowed\n     */\n    function isDepositAllowed() external view returns (bool allowed);\n\n    /**\n     * @notice Check if withdrawals are currently allowed\n     * @return allowed True if withdrawals are allowed\n     */\n    function isWithdrawAllowed() external view returns (bool allowed);\n}"
    },
    "contracts/SmartWalletFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./UserSmartWallet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title SmartWalletFactory\n * @notice Factory contract for creating deterministic user smart wallets\n * @dev Uses CREATE2 for predictable wallet addresses across chains\n */\ncontract SmartWalletFactory is Ownable {\n\n    // State variables\n    mapping(address => address) public userWallets;\n    mapping(address => bool) public isValidWallet;\n    mapping(address => address) public agentToUser; // Reverse mapping: agent => user\n    address public immutable backendCoordinator;\n    address public immutable usdcAddress;\n\n    // Events\n    event WalletCreated(address indexed user, address indexed wallet, bytes32 salt);\n    event BackendCoordinatorUpdated(address indexed oldCoordinator, address indexed newCoordinator);\n\n    // Errors\n    error WalletAlreadyExists();\n    error InvalidUser();\n    error WalletCreationFailed();\n\n    /**\n     * @notice Constructor\n     * @param _backendCoordinator Address of the backend coordinator\n     * @param _usdcAddress Address of the USDC token for this chain\n     * @param _owner Address of the contract owner\n     */\n    constructor(address _backendCoordinator, address _usdcAddress, address _owner) Ownable(_owner) {\n        require(_backendCoordinator != address(0), \"Invalid backend coordinator\");\n        require(_usdcAddress != address(0), \"Invalid USDC address\");\n        backendCoordinator = _backendCoordinator;\n        usdcAddress = _usdcAddress;\n    }\n\n    /**\n     * @notice Create a smart wallet for a user\n     * @param user Address of the user\n     * @return wallet Address of the created smart wallet\n     */\n    function createWallet(address user) external returns (address wallet) {\n        if (user == address(0)) revert InvalidUser();\n        if (userWallets[user] != address(0)) revert WalletAlreadyExists();\n\n        // Generate deterministic salt based on user address\n        bytes32 salt = _generateSalt(user);\n\n        // Deploy smart wallet using CREATE2\n        wallet = address(new UserSmartWallet{salt: salt}(\n            user,\n            backendCoordinator,\n            address(this),\n            usdcAddress\n        ));\n\n        if (wallet == address(0)) revert WalletCreationFailed();\n\n        // Store wallet mapping\n        userWallets[user] = wallet;\n        isValidWallet[wallet] = true;\n        agentToUser[wallet] = user; // Store reverse mapping\n\n        emit WalletCreated(user, wallet, salt);\n    }\n\n    /**\n     * @notice Get the smart wallet address for a user\n     * @param user Address of the user\n     * @return wallet Address of the user's smart wallet (0x0 if doesn't exist)\n     */\n    function getWallet(address user) external view returns (address wallet) {\n        return userWallets[user];\n    }\n\n    /**\n     * @notice Predict the smart wallet address for a user (before creation)\n     * @param user Address of the user\n     * @return predictedAddress The predicted wallet address\n     */\n    function predictWalletAddress(address user) external view returns (address predictedAddress) {\n        bytes32 salt = _generateSalt(user);\n\n        bytes memory bytecode = abi.encodePacked(\n            type(UserSmartWallet).creationCode,\n            abi.encode(user, backendCoordinator, address(this), usdcAddress)\n        );\n\n        bytes32 hash = keccak256(abi.encodePacked(\n            bytes1(0xff),\n            address(this),\n            salt,\n            keccak256(bytecode)\n        ));\n\n        return address(uint160(uint256(hash)));\n    }\n\n    /**\n     * @notice Check if a wallet exists for a user\n     * @param user Address of the user\n     * @return exists True if wallet exists\n     */\n    function hasWallet(address user) external view returns (bool exists) {\n        return userWallets[user] != address(0);\n    }\n\n    /**\n     * @notice Check if an address is a valid smart wallet created by this factory\n     * @param wallet Address to check\n     * @return valid True if it's a valid wallet\n     */\n    function isWalletValid(address wallet) external view returns (bool valid) {\n        return isValidWallet[wallet];\n    }\n\n    /**\n     * @notice Get the owner of a smart wallet\n     * @param wallet Address of the smart wallet\n     * @return owner Address of the wallet owner\n     */\n    function getWalletOwner(address wallet) external view returns (address owner) {\n        if (!isValidWallet[wallet]) return address(0);\n        return UserSmartWallet(payable(wallet)).owner();\n    }\n\n    /**\n     * @notice Get the user address for a given agent wallet\n     * @param agentWallet Address of the agent wallet\n     * @return user Address of the user who owns this agent wallet\n     */\n    function getUserForAgent(address agentWallet) external view returns (address user) {\n        return agentToUser[agentWallet];\n    }\n\n    /**\n     * @notice Get total number of wallets created\n     * @return count Total wallet count\n     */\n    function getTotalWallets() external view returns (uint256 count) {\n        // This would require additional tracking in production\n        // For now, we'll implement a basic counter\n        return 0; // TODO: Implement counter\n    }\n\n    /**\n     * @notice Emergency function to disable a compromised wallet\n     * @param wallet Address of the wallet to disable\n     * @dev Only owner can call this function\n     */\n    function disableWallet(address wallet) external onlyOwner {\n        require(isValidWallet[wallet], \"Wallet not valid\");\n        isValidWallet[wallet] = false;\n\n        // Find and remove from userWallets mapping\n        // This is gas-intensive but needed for security\n        // In production, consider using a different approach\n    }\n\n    /**\n     * @notice Create smart wallet for multiple users in batch\n     * @param users Array of user addresses\n     * @return wallets Array of created wallet addresses\n     */\n    function createWalletsBatch(address[] calldata users)\n        external\n        returns (address[] memory wallets)\n    {\n        uint256 length = users.length;\n        require(length > 0 && length <= 100, \"Invalid batch size\"); // Limit batch size\n\n        wallets = new address[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            // Skip if wallet already exists\n            if (userWallets[users[i]] != address(0)) {\n                wallets[i] = userWallets[users[i]];\n                continue;\n            }\n\n            wallets[i] = this.createWallet(users[i]);\n        }\n    }\n\n    /**\n     * @notice Generate deterministic salt for CREATE2\n     * @param user Address of the user\n     * @return salt The generated salt\n     */\n    function _generateSalt(address user) internal pure returns (bytes32 salt) {\n        return keccak256(abi.encodePacked(\"CrossYield_SmartWallet_\", user));\n    }\n\n    /**\n     * @notice Get wallet creation bytecode hash (for verification)\n     * @return hash The bytecode hash\n     */\n    function getWalletBytecodeHash() external pure returns (bytes32 hash) {\n        return keccak256(type(UserSmartWallet).creationCode);\n    }\n\n    /**\n     * @notice Get contract version\n     * @return version The contract version\n     */\n    function version() external pure returns (string memory) {\n        return \"1.0.0\";\n    }\n}"
    },
    "contracts/UserSmartWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./interfaces/IProtocolAdapter.sol\";\n\n/**\n * @title Circle CCTP Interfaces\n * @notice Official Circle Cross-Chain Transfer Protocol interfaces\n */\ninterface ITokenMessenger {\n    function depositForBurn(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken\n    ) external returns (uint64 nonce);\n}\n\ninterface IMessageTransmitter {\n    function receiveMessage(\n        bytes memory message,\n        bytes memory attestation\n    ) external returns (bool success);\n}\n\n/**\n * @title UserSmartWallet\n * @notice Individual smart wallet for non-custodial USDC yield optimization\n * @dev Each user gets their own wallet with automated execution capabilities\n */\ncontract UserSmartWallet is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // State variables\n    address public immutable owner;\n    address public immutable backendCoordinator;\n    address public immutable factory;\n\n    // USDC token address (will be set per chain)\n    IERC20 public immutable USDC;\n\n    // Wallet state\n    bool public isActive;\n    uint256 public totalDeposited;\n    uint256 public totalWithdrawn;\n\n    // Protocol allocations tracking\n    mapping(string => uint256) public protocolBalances;\n    mapping(address => uint256) public adapterBalances;\n    string[] public activeProtocols;\n\n    // CCTP Integration - Circle's official contract addresses\n    mapping(uint256 => address) public tokenMessengerAddresses;\n    mapping(uint256 => address) public messageTransmitterAddresses;\n    mapping(uint256 => uint32) public cctpDomains;\n\n    // CCTP Transfer State Management\n    struct CCTPTransfer {\n        uint64 nonce;\n        uint256 amount;\n        uint32 destinationDomain;\n        address recipient;\n        bytes32 messageHash;\n        uint8 status; // 0=pending, 1=burned, 2=completed, 3=failed\n        uint256 timestamp;\n        uint256 retryCount;\n        string destinationChain;\n    }\n\n    mapping(uint64 => CCTPTransfer) public cctpTransfers;\n    mapping(bytes32 => bool) public processedMessages;\n    uint64[] public activeCCTPTransfers;\n\n    // Events\n    event Deposited(address indexed user, uint256 amount, string strategy, uint256 timestamp);\n    event Withdrawn(address indexed user, uint256 amount, uint256 timestamp);\n    event EmergencyWithdrawal(address indexed user, uint256 amount, uint256 timestamp);\n    event ProtocolAllocation(string indexed protocol, address adapter, uint256 amount, uint256 timestamp);\n    event ProtocolWithdrawal(string indexed protocol, address adapter, uint256 amount, uint256 timestamp);\n    event WalletDeactivated(uint256 timestamp);\n    event BackendActionExecuted(string action, bytes data, uint256 timestamp);\n    event AllocationExecuted(string[] protocolNames, address[] adapters, uint256[] amounts);\n\n    // Enhanced CCTP Events\n    event CCTPBurnExecuted(uint64 indexed nonce, uint256 amount, uint32 destinationDomain, address recipient, string destinationChain, uint256 timestamp);\n    event CCTPMintCompleted(uint64 indexed nonce, bytes32 messageHash, uint256 amount, uint256 timestamp);\n    event CCTPTransferFailed(uint64 indexed nonce, string reason, uint256 timestamp);\n    event CCTPTransferCancelled(uint64 indexed nonce, uint256 timestamp);\n    event CCTPConfigUpdated(uint256 chainId, address tokenMessenger, address messageTransmitter, uint32 domain);\n\n    // Errors\n    error OnlyOwner();\n    error OnlyBackendOrOwner();\n    error OnlyFactory();\n    error WalletNotActive();\n    error CCTPNotSupported();\n    error InvalidDestinationDomain();\n    error TransferNotFound();\n    error TransferAlreadyCompleted();\n    error MessageAlreadyProcessed();\n    error CCTPMintFailed();\n    error InvalidNonce();\n    error TransferTooOld();\n    error InsufficientBalance();\n    error InvalidAmount();\n    error InvalidProtocol();\n    error TransferFailed();\n    error ZeroAddress();\n\n    // Modifiers\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert OnlyOwner();\n        _;\n    }\n\n    modifier onlyBackendOrOwner() {\n        if (msg.sender != backendCoordinator && msg.sender != owner) revert OnlyBackendOrOwner();\n        _;\n    }\n\n    modifier onlyFactory() {\n        if (msg.sender != factory) revert OnlyFactory();\n        _;\n    }\n\n    modifier onlyActive() {\n        if (!isActive) revert WalletNotActive();\n        _;\n    }\n\n    /**\n     * @notice Constructor\n     * @param _owner Address of the wallet owner (user)\n     * @param _backendCoordinator Address of the backend coordinator\n     * @param _factory Address of the factory contract\n     * @param _usdcAddress Address of the USDC token for this chain\n     */\n    constructor(\n        address _owner,\n        address _backendCoordinator,\n        address _factory,\n        address _usdcAddress\n    ) {\n        if (_owner == address(0) || _backendCoordinator == address(0) || _factory == address(0) || _usdcAddress == address(0)) {\n            revert ZeroAddress();\n        }\n\n        owner = _owner;\n        backendCoordinator = _backendCoordinator;\n        factory = _factory;\n        USDC = IERC20(_usdcAddress);\n        isActive = true;\n\n        // Initialize CCTP addresses for current chain\n        _initializeCCTPAddresses();\n    }\n\n    /**\n     * @notice Initialize CCTP contract addresses for supported chains\n     * @dev Uses Circle's official contract addresses\n     */\n    function _initializeCCTPAddresses() internal {\n        // Ethereum Sepolia (Testnet)\n        tokenMessengerAddresses[11155111] = 0x8FE6B999Dc680CcFDD5Bf7EB0974218be2542DAA;\n        messageTransmitterAddresses[11155111] = 0xE737e5cEBEEBa77EFE34D4aa090756590b1CE275;\n        cctpDomains[11155111] = 0;\n\n        // Base Sepolia (Testnet)\n        tokenMessengerAddresses[84532] = 0x8FE6B999Dc680CcFDD5Bf7EB0974218be2542DAA;\n        messageTransmitterAddresses[84532] = 0xE737e5cEBEEBa77EFE34D4aa090756590b1CE275;\n        cctpDomains[84532] = 6;\n\n        // Arbitrum Sepolia (Testnet)\n        tokenMessengerAddresses[421614] = 0x8FE6B999Dc680CcFDD5Bf7EB0974218be2542DAA;\n        messageTransmitterAddresses[421614] = 0xE737e5cEBEEBa77EFE34D4aa090756590b1CE275;\n        cctpDomains[421614] = 3;\n\n        // Ethereum Mainnet\n        tokenMessengerAddresses[1] = 0x28b5a0e9C621a5BadaA536219b3a228C8168cf5d;\n        messageTransmitterAddresses[1] = 0x81D40F21F12A8F0E3252Bccb954D722d4c464B64;\n        cctpDomains[1] = 0;\n\n        // Base Mainnet\n        tokenMessengerAddresses[8453] = 0x28b5a0e9C621a5BadaA536219b3a228C8168cf5d;\n        messageTransmitterAddresses[8453] = 0x81D40F21F12A8F0E3252Bccb954D722d4c464B64;\n        cctpDomains[8453] = 6;\n\n        // Arbitrum One Mainnet\n        tokenMessengerAddresses[42161] = 0x28b5a0e9C621a5BadaA536219b3a228C8168cf5d;\n        messageTransmitterAddresses[42161] = 0x81D40F21F12A8F0E3252Bccb954D722d4c464B64;\n        cctpDomains[42161] = 3;\n    }\n\n    /**\n     * @notice Deposit USDC to start yield optimization\n     * @param amount Amount of USDC to deposit\n     * @param strategy Strategy preference (\"conservative\", \"balanced\", \"aggressive\")\n     */\n    function deposit(uint256 amount, string memory strategy)\n        external\n        onlyOwner\n        onlyActive\n        nonReentrant\n    {\n        if (amount == 0) revert InvalidAmount();\n\n        // Transfer USDC from owner to this wallet\n        USDC.safeTransferFrom(owner, address(this), amount);\n\n        // Update tracking\n        totalDeposited += amount;\n\n        emit Deposited(owner, amount, strategy, block.timestamp);\n    }\n\n    /**\n     * @notice Execute CCTP cross-chain transfer using Circle's official contracts\n     * @param amount Amount to transfer (in USDC wei - 6 decimals)\n     * @param destinationChainId Destination chain ID\n     * @param recipient Recipient address on destination chain\n     * @param destinationChain Human-readable destination chain name\n     * @return nonce CCTP nonce for tracking the transfer\n     */\n    function executeCCTP(\n        uint256 amount,\n        uint256 destinationChainId,\n        address recipient,\n        string memory destinationChain\n    ) external onlyBackendOrOwner onlyActive nonReentrant returns (uint64 nonce) {\n        if (amount == 0) revert InvalidAmount();\n        if (recipient == address(0)) revert ZeroAddress();\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\n\n        // Get CCTP contract addresses for current chain\n        address tokenMessenger = tokenMessengerAddresses[block.chainid];\n        uint32 destinationDomain = cctpDomains[destinationChainId];\n\n        if (tokenMessenger == address(0)) revert CCTPNotSupported();\n        if (destinationDomain == 0 && destinationChainId != 11155111 && destinationChainId != 1) {\n            revert InvalidDestinationDomain();\n        }\n\n        // Convert recipient address to bytes32 format for CCTP\n        bytes32 mintRecipient = bytes32(uint256(uint160(recipient)));\n\n        // Approve USDC spending by Circle's TokenMessenger\n        USDC.forceApprove(tokenMessenger, amount);\n\n        // Execute burn using Circle's official CCTP contract\n        nonce = ITokenMessenger(tokenMessenger).depositForBurn(\n            amount,\n            destinationDomain,\n            mintRecipient,\n            address(USDC)\n        );\n\n        // Track the transfer state\n        cctpTransfers[nonce] = CCTPTransfer({\n            nonce: nonce,\n            amount: amount,\n            destinationDomain: destinationDomain,\n            recipient: recipient,\n            messageHash: bytes32(0), // Will be set when completed\n            status: 1, // burned\n            timestamp: block.timestamp,\n            retryCount: 0,\n            destinationChain: destinationChain\n        });\n\n        activeCCTPTransfers.push(nonce);\n\n        emit CCTPBurnExecuted(nonce, amount, destinationDomain, recipient, destinationChain, block.timestamp);\n        return nonce;\n    }\n\n    /**\n     * @notice Complete CCTP transfer by minting on destination chain\n     * @param message Message from source chain burn transaction\n     * @param attestation Circle's attestation signature\n     * @param nonce CCTP nonce to complete\n     * @return success True if mint was successful\n     */\n    function completeCCTP(\n        bytes memory message,\n        bytes memory attestation,\n        uint64 nonce\n    ) external onlyBackendOrOwner onlyActive nonReentrant returns (bool success) {\n        // Verify transfer exists and is in correct state\n        CCTPTransfer storage transfer = cctpTransfers[nonce];\n        if (transfer.amount == 0) revert TransferNotFound();\n        if (transfer.status == 2) revert TransferAlreadyCompleted();\n        if (transfer.status == 3) revert CCTPMintFailed();\n\n        // Generate message hash for duplicate protection\n        bytes32 messageHash = keccak256(message);\n        if (processedMessages[messageHash]) revert MessageAlreadyProcessed();\n\n        // Get MessageTransmitter for current chain\n        address messageTransmitter = messageTransmitterAddresses[block.chainid];\n        if (messageTransmitter == address(0)) revert CCTPNotSupported();\n\n        // Execute mint using Circle's official CCTP contract\n        success = IMessageTransmitter(messageTransmitter).receiveMessage(\n            message,\n            attestation\n        );\n\n        if (!success) {\n            transfer.retryCount++;\n            if (transfer.retryCount >= 3) {\n                transfer.status = 3; // failed\n                emit CCTPTransferFailed(nonce, \"Max retries exceeded\", block.timestamp);\n            }\n            revert CCTPMintFailed();\n        }\n\n        // Mark as completed\n        transfer.status = 2; // completed\n        transfer.messageHash = messageHash;\n        processedMessages[messageHash] = true;\n\n        emit CCTPMintCompleted(nonce, messageHash, transfer.amount, block.timestamp);\n        return true;\n    }\n\n    /**\n     * @notice Get CCTP transfer details\n     * @param nonce CCTP nonce\n     * @return transfer CCTPTransfer struct\n     */\n    function getCCTPTransfer(uint64 nonce) external view returns (CCTPTransfer memory transfer) {\n        return cctpTransfers[nonce];\n    }\n\n    /**\n     * @notice Verify if a CCTP transfer was completed\n     * @param nonce CCTP nonce\n     * @return exists True if transfer exists\n     * @return completed True if transfer was completed\n     * @return amount Transfer amount\n     * @return recipient Recipient address\n     */\n    function verifyCCTPTransfer(uint64 nonce) external view returns (\n        bool exists,\n        bool completed,\n        uint256 amount,\n        address recipient\n    ) {\n        CCTPTransfer memory transfer = cctpTransfers[nonce];\n        return (\n            transfer.amount > 0,\n            transfer.status == 2,\n            transfer.amount,\n            transfer.recipient\n        );\n    }\n\n    /**\n     * @notice Get all active CCTP transfer nonces\n     * @return nonces Array of active transfer nonces\n     */\n    function getActiveCCTPTransfers() external view returns (uint64[] memory nonces) {\n        return activeCCTPTransfers;\n    }\n\n    /**\n     * @notice Cancel a pending CCTP transfer (emergency only)\n     * @param nonce CCTP nonce to cancel\n     */\n    function cancelCCTPTransfer(uint64 nonce) external onlyOwner {\n        CCTPTransfer storage transfer = cctpTransfers[nonce];\n        if (transfer.amount == 0) revert TransferNotFound();\n        if (transfer.status != 0) revert TransferAlreadyCompleted();\n\n        transfer.status = 3; // failed\n        emit CCTPTransferCancelled(nonce, block.timestamp);\n    }\n\n    /**\n     * @notice Mark a CCTP transfer as failed (backend only)\n     * @param nonce CCTP nonce\n     * @param reason Failure reason\n     */\n    function markCCTPFailed(uint64 nonce, string memory reason) external onlyBackendOrOwner {\n        CCTPTransfer storage transfer = cctpTransfers[nonce];\n        if (transfer.amount == 0) revert TransferNotFound();\n        if (transfer.status == 2) revert TransferAlreadyCompleted();\n\n        transfer.status = 3; // failed\n        emit CCTPTransferFailed(nonce, reason, block.timestamp);\n    }\n\n    /**\n     * @notice Allocate funds to a DeFi protocol\n     * @param protocolName Name of the protocol\n     * @param adapter Address of the protocol adapter\n     * @param amount Amount to allocate\n     */\n    function allocateToProtocol(\n        string memory protocolName,\n        address adapter,\n        uint256 amount\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\n        if (amount == 0) revert InvalidAmount();\n        if (adapter == address(0)) revert ZeroAddress();\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\n\n        // Approve and deposit to protocol\n        USDC.safeTransfer(adapter, amount);\n        IProtocolAdapter(adapter).deposit(owner, amount);\n\n        // Update tracking\n        if (protocolBalances[protocolName] == 0) {\n            activeProtocols.push(protocolName);\n        }\n        protocolBalances[protocolName] += amount;\n        adapterBalances[adapter] += amount;\n\n        emit ProtocolAllocation(protocolName, adapter, amount, block.timestamp);\n    }\n\n    /**\n     * @notice Withdraw funds from a DeFi protocol\n     * @param protocolName Name of the protocol\n     * @param adapter Address of the protocol adapter\n     * @param amount Amount to withdraw\n     */\n    function withdrawFromProtocol(\n        string memory protocolName,\n        address adapter,\n        uint256 amount\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\n        if (amount == 0) revert InvalidAmount();\n        if (adapter == address(0)) revert ZeroAddress();\n        if (protocolBalances[protocolName] < amount) revert InsufficientBalance();\n\n        // Withdraw from protocol\n        IProtocolAdapter(adapter).withdraw(owner, amount);\n\n        // Update tracking\n        protocolBalances[protocolName] -= amount;\n        adapterBalances[adapter] -= amount;\n\n        // Remove from active protocols if balance is zero\n        if (protocolBalances[protocolName] == 0) {\n            _removeProtocol(protocolName);\n        }\n\n        emit ProtocolWithdrawal(protocolName, adapter, amount, block.timestamp);\n    }\n\n    /**\n     * @notice Batch allocate to multiple protocols\n     * @param protocolNames Array of protocol names\n     * @param adapters Array of adapter addresses\n     * @param amounts Array of amounts\n     */\n    function batchAllocate(\n        string[] memory protocolNames,\n        address[] memory adapters,\n        uint256[] memory amounts\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\n        uint256 length = protocolNames.length;\n        require(\n            length == adapters.length && length == amounts.length,\n            \"Array length mismatch\"\n        );\n\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < length; i++) {\n            totalAmount += amounts[i];\n        }\n\n        if (USDC.balanceOf(address(this)) < totalAmount) revert InsufficientBalance();\n\n        // Protocol allocation will be implemented later with chain-specific adapters\n        // For now, just emit an event for the backend to track\n        emit AllocationExecuted(protocolNames, adapters, amounts);\n    }\n\n    /**\n     * @notice Emergency withdrawal by owner (bypass all restrictions)\n     * @dev Withdraws all USDC balance to owner\n     */\n    function emergencyWithdraw() external onlyOwner nonReentrant {\n        uint256 balance = USDC.balanceOf(address(this));\n        if (balance == 0) revert InsufficientBalance();\n\n        USDC.safeTransfer(owner, balance);\n        totalWithdrawn += balance;\n\n        emit EmergencyWithdrawal(owner, balance, block.timestamp);\n    }\n\n    /**\n     * @notice Regular withdrawal by owner\n     * @param amount Amount to withdraw\n     */\n    function withdraw(uint256 amount) external onlyOwner onlyActive nonReentrant {\n        if (amount == 0) revert InvalidAmount();\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\n\n        USDC.safeTransfer(owner, amount);\n        totalWithdrawn += amount;\n\n        emit Withdrawn(owner, amount, block.timestamp);\n    }\n\n    /**\n     * @notice Deactivate wallet (emergency only, by owner)\n     */\n    function deactivateWallet() external onlyOwner {\n        isActive = false;\n        emit WalletDeactivated(block.timestamp);\n    }\n\n    /**\n     * @notice Reactivate wallet (can be called by owner or factory)\n     */\n    function reactivateWallet() external {\n        if (msg.sender != owner && msg.sender != factory) {\n            revert OnlyBackendOrOwner();\n        }\n        isActive = true;\n    }\n\n    /**\n     * @notice Execute arbitrary backend action (with restrictions)\n     * @param target Target contract address\n     * @param data Encoded function call data\n     */\n    function executeBackendAction(address target, bytes calldata data)\n        external\n        onlyBackendOrOwner\n        onlyActive\n        nonReentrant\n        returns (bytes memory result)\n    {\n        // Security checks\n        require(target != address(USDC), \"Cannot call USDC directly\");\n        require(target != address(this), \"Cannot call self\");\n\n        (bool success, bytes memory returnData) = target.call(data);\n        require(success, \"Backend action failed\");\n\n        emit BackendActionExecuted(\"external_call\", data, block.timestamp);\n        return returnData;\n    }\n\n    // View functions\n\n    /**\n     * @notice Get USDC balance of this wallet\n     * @return balance Current USDC balance\n     */\n    function getBalance() external view returns (uint256 balance) {\n        return USDC.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Get protocol balance for a specific protocol\n     * @param protocolName Name of the protocol\n     * @return balance Balance in that protocol\n     */\n    function getProtocolBalance(string memory protocolName)\n        external\n        view\n        returns (uint256 balance)\n    {\n        return protocolBalances[protocolName];\n    }\n\n    /**\n     * @notice Get all active protocols\n     * @return protocols Array of active protocol names\n     */\n    function getActiveProtocols() external view returns (string[] memory protocols) {\n        return activeProtocols;\n    }\n\n    /**\n     * @notice Get total value across all protocols and wallet\n     * @return totalValue Total value in USDC\n     */\n    function getTotalValue() external view returns (uint256 totalValue) {\n        totalValue = USDC.balanceOf(address(this));\n\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\n            totalValue += protocolBalances[activeProtocols[i]];\n        }\n    }\n\n    /**\n     * @notice Get wallet summary\n     * @return usdcBalance Current USDC balance\n     * @return totalAllocated Total amount allocated to protocols\n     * @return protocolCount Number of active protocols\n     * @return active Whether the wallet is active\n     */\n    function getWalletSummary() external view returns (\n        uint256 usdcBalance,\n        uint256 totalAllocated,\n        uint256 protocolCount,\n        bool active\n    ) {\n        usdcBalance = USDC.balanceOf(address(this));\n\n        totalAllocated = 0;\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\n            totalAllocated += protocolBalances[activeProtocols[i]];\n        }\n\n        protocolCount = activeProtocols.length;\n        active = isActive;\n    }\n\n    /**\n     * @notice Check if wallet has sufficient balance for amount\n     * @param amount Amount to check\n     * @return sufficient True if balance is sufficient\n     */\n    function hasSufficientBalance(uint256 amount) external view returns (bool sufficient) {\n        return USDC.balanceOf(address(this)) >= amount;\n    }\n\n    // Internal functions\n\n    /**\n     * @notice Remove protocol from active list\n     * @param protocolName Protocol to remove\n     */\n    function _removeProtocol(string memory protocolName) internal {\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\n            if (keccak256(bytes(activeProtocols[i])) == keccak256(bytes(protocolName))) {\n                activeProtocols[i] = activeProtocols[activeProtocols.length - 1];\n                activeProtocols.pop();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @notice Receive ETH (for gas if needed)\n     */\n    receive() external payable {\n        // Allow receiving ETH for gas payments\n    }\n\n    /**\n     * @notice Batch execute multiple operations for gas efficiency\n     * @param calls Array of encoded function calls\n     * @dev Can only be called by backend or owner for automation\n     */\n    function batchExecute(bytes[] calldata calls)\n        external\n        onlyBackendOrOwner\n        onlyActive\n        nonReentrant\n    {\n        require(calls.length > 0, \"No calls provided\");\n        require(calls.length <= 10, \"Too many calls\"); // Prevent gas limit issues\n\n        for (uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory result) = address(this).call(calls[i]);\n            if (!success) {\n                // Decode revert reason\n                if (result.length < 68) revert(\"Call failed\");\n                assembly {\n                    result := add(result, 0x04)\n                }\n                revert(abi.decode(result, (string)));\n            }\n        }\n\n        emit BackendActionExecuted(\"batch_execute\", abi.encode(calls.length), block.timestamp);\n    }\n\n    /**\n     * @notice Update CCTP configuration for a chain (admin only)\n     * @param chainId Chain ID to update\n     * @param tokenMessenger TokenMessenger address\n     * @param messageTransmitter MessageTransmitter address\n     * @param domain CCTP domain\n     */\n    function updateCCTPConfig(\n        uint256 chainId,\n        address tokenMessenger,\n        address messageTransmitter,\n        uint32 domain\n    ) external onlyOwner {\n        tokenMessengerAddresses[chainId] = tokenMessenger;\n        messageTransmitterAddresses[chainId] = messageTransmitter;\n        cctpDomains[chainId] = domain;\n\n        emit CCTPConfigUpdated(chainId, tokenMessenger, messageTransmitter, domain);\n    }\n\n    /**\n     * @notice Check if CCTP is supported on current chain\n     * @return supported True if CCTP is supported\n     */\n    function isCCTPSupported() external view returns (bool supported) {\n        return tokenMessengerAddresses[block.chainid] != address(0);\n    }\n\n    /**\n     * @notice Get CCTP configuration for current chain\n     * @return tokenMessenger TokenMessenger address\n     * @return messageTransmitter MessageTransmitter address\n     * @return domain CCTP domain\n     */\n    function getCCTPConfig() external view returns (\n        address tokenMessenger,\n        address messageTransmitter,\n        uint32 domain\n    ) {\n        return (\n            tokenMessengerAddresses[block.chainid],\n            messageTransmitterAddresses[block.chainid],\n            cctpDomains[block.chainid]\n        );\n    }\n\n    /**\n     * @notice Get contract version\n     * @return version Contract version\n     */\n    function version() external pure returns (string memory) {\n        return \"2.0.0-cctp\";\n    }\n}"
    },
    "contracts/YieldRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./ChainRegistry.sol\";\nimport \"./SmartWalletFactory.sol\";\n\n/**\n * @title YieldRouter\n * @notice Simplified yield router for portfolio tracking and coordination\n * @dev No longer handles fund custody - that's moved to UserSmartWallet\n */\ncontract YieldRouter is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\n    bytes32 public constant AI_BACKEND_ROLE = keccak256(\"AI_BACKEND_ROLE\");\n    bytes32 public constant ANALYTICS_ROLE = keccak256(\"ANALYTICS_ROLE\");\n\n    ChainRegistry public registry;\n    SmartWalletFactory public walletFactory;\n\n    // Portfolio tracking (no fund custody)\n    mapping(address => UserPortfolio) public userPortfolios;\n    mapping(address => mapping(string => uint256)) public userProtocolBalances;\n    mapping(address => mapping(uint256 => uint256)) public userChainBalances;\n    \n    // Analytics and tracking\n    mapping(address => OptimizationHistory) public optimizationHistory;\n    mapping(address => StrategyPreference) public userStrategies;\n    uint256 public totalOptimizations;\n    uint256 public totalUsers;\n\n    struct UserPortfolio {\n        uint256 totalValue;\n        uint256 lastOptimization;\n        uint256 optimizationCount;\n        uint256 totalDeposited;\n        uint256 totalWithdrawn;\n        string currentStrategy;\n        address smartWallet;\n    }\n\n    struct StrategyPreference {\n        string riskTolerance; // \"conservative\", \"balanced\", \"aggressive\"\n        uint256 preferredChains; // Bitmask of preferred chains\n        uint256 maxProtocolAllocation; // Max % in single protocol (basis points)\n        uint256 rebalanceThreshold; // Threshold for auto-rebalancing (basis points)\n        bool autoRebalanceEnabled;\n    }\n    \n    struct OptimizationHistory {\n        uint256 timestamp;\n        uint256 expectedAPY;\n        uint256 actualAPY;\n        string[] protocols;\n        uint256[] chainIds;\n        uint256[] allocations;\n        uint256 gasCost;\n        uint256 transferCost;\n        bool success;\n        string strategy;\n    }\n    \n    struct RebalanceParams {\n        address user;\n        string[] fromProtocols;\n        string[] toProtocols;\n        uint256[] amounts;\n        uint256[] fromChainIds;\n        uint256[] toChainIds;\n        uint256 expectedAPY;\n        uint256 maxGasCost;\n    }\n    \n    struct AIStrategy {\n        address user;\n        uint256 totalAmount;\n        string[] protocols;\n        uint256[] amounts;\n        uint256[] chainIds;\n        uint256 expectedAPY;\n        uint256 riskScore;\n        uint256 executionDeadline;\n    }\n\n    // Events for portfolio tracking and analytics\n    event OptimizationRequested(address indexed user, uint256 amount, string strategy, uint256 timestamp);\n    event OptimizationCompleted(address indexed user, uint256 strategyId, uint256 expectedAPY, uint256 actualCost);\n    event PortfolioUpdated(address indexed user, uint256 totalValue, uint256 protocolCount, uint256 timestamp);\n    event AllocationReported(address indexed user, string protocol, uint256 chainId, uint256 amount, uint256 timestamp);\n    event RebalanceExecuted(address indexed user, uint256 oldValue, uint256 newValue, uint256 improvement);\n    event StrategyPreferenceUpdated(address indexed user, string newStrategy);\n    event SmartWalletLinked(address indexed user, address indexed smartWallet);\n\n    function initialize(\n        address _registry,\n        address _walletFactory,\n        address admin\n    ) public initializer {\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n\n        registry = ChainRegistry(_registry);\n        walletFactory = SmartWalletFactory(_walletFactory);\n\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n        _grantRole(AI_BACKEND_ROLE, admin); // Admin can act as backend initially\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    // ===== PORTFOLIO TRACKING FUNCTIONS =====\n\n    /**\n     * @notice Link user's smart wallet for tracking\n     * @param user User address\n     * @param smartWallet Smart wallet address\n     */\n    function linkSmartWallet(address user, address smartWallet) external onlyRole(AI_BACKEND_ROLE) {\n        require(walletFactory.isWalletValid(smartWallet), \"Invalid smart wallet\");\n        require(walletFactory.getWalletOwner(smartWallet) == user, \"Wallet owner mismatch\");\n\n        userPortfolios[user].smartWallet = smartWallet;\n\n        if (userPortfolios[user].lastOptimization == 0) {\n            totalUsers++;\n        }\n\n        emit SmartWalletLinked(user, smartWallet);\n    }\n    \n    /**\n     * @notice Request portfolio optimization (called when user deposits)\n     * @param user User address\n     * @param amount Amount being deposited\n     * @param strategy Strategy preference\n     */\n    function requestOptimization(\n        address user,\n        uint256 amount,\n        string memory strategy\n    ) external {\n        // Can be called by user's smart wallet or user directly\n        require(\n            msg.sender == user ||\n            msg.sender == userPortfolios[user].smartWallet ||\n            hasRole(AI_BACKEND_ROLE, msg.sender),\n            \"Unauthorized\"\n        );\n\n        userPortfolios[user].currentStrategy = strategy;\n        userPortfolios[user].totalDeposited += amount;\n\n        emit OptimizationRequested(user, amount, strategy, block.timestamp);\n    }\n    \n    /**\n     * @notice Report allocation result from backend (after execution)\n     * @param user User address\n     * @param protocol Protocol name\n     * @param chainId Chain ID\n     * @param amount Amount allocated\n     */\n    function reportAllocation(\n        address user,\n        string memory protocol,\n        uint256 chainId,\n        uint256 amount\n    ) external onlyRole(AI_BACKEND_ROLE) {\n        userProtocolBalances[user][protocol] += amount;\n        userChainBalances[user][chainId] += amount;\n\n        emit AllocationReported(user, protocol, chainId, amount, block.timestamp);\n    }\n    \n    /**\n     * @notice Report optimization completion\n     * @param user User address\n     * @param expectedAPY Expected APY from strategy\n     * @param protocols Array of protocols used\n     * @param chainIds Array of chain IDs\n     * @param allocations Array of allocation amounts\n     * @param totalCost Total execution cost\n     */\n    function reportOptimizationComplete(\n        address user,\n        uint256 expectedAPY,\n        string[] memory protocols,\n        uint256[] memory chainIds,\n        uint256[] memory allocations,\n        uint256 totalCost\n    ) external onlyRole(AI_BACKEND_ROLE) {\n        uint256 strategyId = totalOptimizations++;\n\n        // Update portfolio\n        UserPortfolio storage portfolio = userPortfolios[user];\n        portfolio.lastOptimization = block.timestamp;\n        portfolio.optimizationCount++;\n\n        uint256 totalValue = 0;\n        for (uint256 i = 0; i < allocations.length; i++) {\n            totalValue += allocations[i];\n        }\n        portfolio.totalValue = totalValue;\n\n        // Record optimization history\n        optimizationHistory[user] = OptimizationHistory({\n            timestamp: block.timestamp,\n            expectedAPY: expectedAPY,\n            actualAPY: 0, // Will be updated later\n            protocols: protocols,\n            chainIds: chainIds,\n            allocations: allocations,\n            gasCost: totalCost,\n            transferCost: 0,\n            success: true,\n            strategy: portfolio.currentStrategy\n        });\n\n        emit OptimizationCompleted(user, strategyId, expectedAPY, totalCost);\n    }\n    \n    /**\n     * @notice Update user's portfolio value (called periodically by backend)\n     * @param user User address\n     * @param newTotalValue New total portfolio value\n     * @param protocolCount Number of active protocols\n     */\n    function updatePortfolioValue(\n        address user,\n        uint256 newTotalValue,\n        uint256 protocolCount\n    ) external onlyRole(AI_BACKEND_ROLE) {\n        userPortfolios[user].totalValue = newTotalValue;\n        emit PortfolioUpdated(user, newTotalValue, protocolCount, block.timestamp);\n    }\n\n    /**\n     * @notice Set user's strategy preference\n     * @param user User address\n     * @param strategy Strategy preference\n     * @param preferences Detailed strategy preferences\n     */\n    function setStrategyPreference(\n        address user,\n        string memory strategy,\n        StrategyPreference memory preferences\n    ) external {\n        require(\n            msg.sender == user ||\n            hasRole(AI_BACKEND_ROLE, msg.sender),\n            \"Unauthorized\"\n        );\n\n        userStrategies[user] = preferences;\n        userPortfolios[user].currentStrategy = strategy;\n\n        emit StrategyPreferenceUpdated(user, strategy);\n    }\n\n    // ===== VIEW FUNCTIONS =====\n\n    /**\n     * @notice Get user's complete portfolio information\n     * @param user User address\n     * @return portfolio UserPortfolio struct\n     */\n    function getUserPortfolio(address user)\n        external\n        view\n        returns (UserPortfolio memory portfolio)\n    {\n        return userPortfolios[user];\n    }\n    /**\n     * @notice Get user's balance in a specific protocol\n     * @param user User address\n     * @param protocol Protocol name\n     * @return balance Balance in that protocol\n     */\n    function getUserProtocolBalance(address user, string memory protocol)\n        external\n        view\n        returns (uint256 balance)\n    {\n        return userProtocolBalances[user][protocol];\n    }\n\n    /**\n     * @notice Get user's total balance on a specific chain\n     * @param user User address\n     * @param chainId Chain ID\n     * @return balance Total balance on that chain\n     */\n    function getUserChainBalance(address user, uint256 chainId)\n        external\n        view\n        returns (uint256 balance)\n    {\n        return userChainBalances[user][chainId];\n    }\n\n    /**\n     * @notice Get user's strategy preferences\n     * @param user User address\n     * @return preferences StrategyPreference struct\n     */\n    function getUserStrategyPreferences(address user)\n        external\n        view\n        returns (StrategyPreference memory preferences)\n    {\n        return userStrategies[user];\n    }\n\n    /**\n     * @notice Get user's optimization history\n     * @param user User address\n     * @return history OptimizationHistory struct\n     */\n    function getOptimizationHistory(address user)\n        external\n        view\n        returns (OptimizationHistory memory history)\n    {\n        return optimizationHistory[user];\n    }\n    \n    /**\n     * @notice Update actual APY after some time has passed\n     * @param user User address\n     * @param actualAPY Measured actual APY\n     */\n    function updateActualAPY(address user, uint256 actualAPY)\n        external\n        onlyRole(AI_BACKEND_ROLE)\n    {\n        OptimizationHistory storage history = optimizationHistory[user];\n        uint256 oldAPY = history.actualAPY;\n        history.actualAPY = actualAPY;\n\n        uint256 improvement = actualAPY > oldAPY ? actualAPY - oldAPY : 0;\n\n        emit RebalanceExecuted(\n            user,\n            userPortfolios[user].totalValue,\n            userPortfolios[user].totalValue, // Same value, different APY\n            improvement\n        );\n    }\n    \n    // ===== ANALYTICS AND ADMIN FUNCTIONS =====\n\n    /**\n     * @notice Get platform statistics\n     * @return totalOptimizations_ Total optimizations executed\n     * @return totalUsers_ Total number of users\n     * @return averagePortfolioSize Average portfolio size\n     */\n    function getPlatformStats()\n        external\n        view\n        returns (\n            uint256 totalOptimizations_,\n            uint256 totalUsers_,\n            uint256 averagePortfolioSize\n        )\n    {\n        totalOptimizations_ = totalOptimizations;\n        totalUsers_ = totalUsers;\n\n        // Calculate average portfolio size (simplified)\n        averagePortfolioSize = totalUsers > 0 ? (address(this).balance / totalUsers) : 0;\n    }\n\n    /**\n     * @notice Check if user has a smart wallet\n     * @param user User address\n     * @return hasWallet True if user has a smart wallet\n     * @return walletAddress Address of the smart wallet\n     */\n    function hasSmartWallet(address user)\n        external\n        view\n        returns (bool hasWallet, address walletAddress)\n    {\n        walletAddress = userPortfolios[user].smartWallet;\n        hasWallet = walletAddress != address(0);\n    }\n\n    /**\n     * @notice Get user's smart wallet address\n     * @param user User address\n     * @return smartWallet Smart wallet address\n     */\n    function getUserSmartWallet(address user)\n        external\n        view\n        returns (address smartWallet)\n    {\n        return userPortfolios[user].smartWallet;\n    }\n\n    /**\n     * @notice Update contract addresses (admin only)\n     * @param newRegistry New ChainRegistry address\n     * @param newWalletFactory New SmartWalletFactory address\n     */\n    function updateContracts(\n        address newRegistry,\n        address newWalletFactory\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (newRegistry != address(0)) {\n            registry = ChainRegistry(newRegistry);\n        }\n        if (newWalletFactory != address(0)) {\n            walletFactory = SmartWalletFactory(newWalletFactory);\n        }\n    }\n\n    /**\n     * @notice Grant AI backend role to address\n     * @param backend Backend address to grant role\n     */\n    function grantBackendRole(address backend) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _grantRole(AI_BACKEND_ROLE, backend);\n    }\n\n    /**\n     * @notice Revoke AI backend role from address\n     * @param backend Backend address to revoke role\n     */\n    function revokeBackendRole(address backend) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _revokeRole(AI_BACKEND_ROLE, backend);\n    }\n\n    /**\n     * @notice Get contract version\n     * @return version Contract version\n     */\n    function version() external pure returns (string memory) {\n        return \"2.0.0\";\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}