{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "contracts/ChainRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\ncontract ChainRegistry is Initializable, AccessControlUpgradeable {\n    bytes32 public constant ADMIN_ROLE = DEFAULT_ADMIN_ROLE;\n    bytes32 public constant PROTOCOL_MANAGER_ROLE = keccak256(\"PROTOCOL_MANAGER_ROLE\");\n    \n    // Protocol management\n    mapping(string => address) public protocolAdapters;\n    mapping(string => ProtocolInfo) public protocolInfo;\n    mapping(uint256 => string[]) public chainProtocols; // chainId => protocols\n    string[] public protocols;\n    \n    // Chain management\n    mapping(uint256 => ChainInfo) public chainInfo;\n    uint256[] public supportedChains;\n    \n    struct ProtocolInfo {\n        address adapter;\n        uint256 chainId;\n        uint256 riskScore; // 0-100, lower is safer\n        uint256 minAPY; // Minimum expected APY in basis points\n        uint256 maxAPY; // Maximum expected APY in basis points\n        bool isActive;\n        uint256 tvl; // Total Value Locked\n        uint256 lastUpdate;\n    }\n    \n    struct ChainInfo {\n        string name;\n        address nativeToken; // USDC address on this chain\n        uint256 gasPrice; // Average gas price\n        bool isActive;\n        uint256 bridgeCost; // Cost to bridge to this chain\n    }\n    \n    event ProtocolAdded(string indexed protocol, address adapter, uint256 chainId, uint256 riskScore);\n    event ProtocolUpdated(string indexed protocol, uint256 riskScore, uint256 minAPY, uint256 maxAPY);\n    event ChainAdded(uint256 indexed chainId, string name, address nativeToken);\n    event ProtocolDeactivated(string indexed protocol);\n\n    function initialize(address admin) public initializer {\n        __AccessControl_init();\n        _grantRole(ADMIN_ROLE, admin);\n        _grantRole(PROTOCOL_MANAGER_ROLE, admin);\n    }\n\n    function addProtocol(\n        string calldata name,\n        address adapter,\n        uint256 chainId,\n        uint256 riskScore,\n        uint256 minAPY,\n        uint256 maxAPY\n    ) external onlyRole(PROTOCOL_MANAGER_ROLE) {\n        require(adapter != address(0), \"Invalid adapter\");\n        require(riskScore <= 100, \"Risk score too high\");\n        require(minAPY <= maxAPY, \"Invalid APY range\");\n        \n        protocolAdapters[name] = adapter;\n        protocolInfo[name] = ProtocolInfo({\n            adapter: adapter,\n            chainId: chainId,\n            riskScore: riskScore,\n            minAPY: minAPY,\n            maxAPY: maxAPY,\n            isActive: true,\n            tvl: 0,\n            lastUpdate: block.timestamp\n        });\n        \n        protocols.push(name);\n        chainProtocols[chainId].push(name);\n        \n        emit ProtocolAdded(name, adapter, chainId, riskScore);\n    }\n    \n    function updateProtocolInfo(\n        string calldata name,\n        uint256 riskScore,\n        uint256 minAPY,\n        uint256 maxAPY,\n        uint256 tvl\n    ) external onlyRole(PROTOCOL_MANAGER_ROLE) {\n        require(protocolAdapters[name] != address(0), \"Protocol not found\");\n        require(riskScore <= 100, \"Risk score too high\");\n        require(minAPY <= maxAPY, \"Invalid APY range\");\n        \n        ProtocolInfo storage info = protocolInfo[name];\n        info.riskScore = riskScore;\n        info.minAPY = minAPY;\n        info.maxAPY = maxAPY;\n        info.tvl = tvl;\n        info.lastUpdate = block.timestamp;\n        \n        emit ProtocolUpdated(name, riskScore, minAPY, maxAPY);\n    }\n    \n    function deactivateProtocol(string calldata name) external onlyRole(PROTOCOL_MANAGER_ROLE) {\n        require(protocolAdapters[name] != address(0), \"Protocol not found\");\n        protocolInfo[name].isActive = false;\n        emit ProtocolDeactivated(name);\n    }\n    \n    function addChain(\n        uint256 chainId,\n        string calldata name,\n        address nativeToken,\n        uint256 gasPrice,\n        uint256 bridgeCost\n    ) external onlyRole(ADMIN_ROLE) {\n        require(nativeToken != address(0), \"Invalid native token\");\n        \n        chainInfo[chainId] = ChainInfo({\n            name: name,\n            nativeToken: nativeToken,\n            gasPrice: gasPrice,\n            isActive: true,\n            bridgeCost: bridgeCost\n        });\n        \n        supportedChains.push(chainId);\n        emit ChainAdded(chainId, name, nativeToken);\n    }\n    \n    function getAdapter(string calldata name) public view returns (address) {\n        return protocolAdapters[name];\n    }\n    \n    function getProtocolInfo(string calldata name) external view returns (ProtocolInfo memory) {\n        return protocolInfo[name];\n    }\n    \n    function getAllProtocols() external view returns (string[] memory) {\n        return protocols;\n    }\n    \n    function getChainProtocols(uint256 chainId) external view returns (string[] memory) {\n        return chainProtocols[chainId];\n    }\n    \n    function getSupportedChains() external view returns (uint256[] memory) {\n        return supportedChains;\n    }\n    \n    function getChainInfo(uint256 chainId) external view returns (ChainInfo memory) {\n        return chainInfo[chainId];\n    }\n    \n    // AI optimization helpers\n    function getOptimalProtocols(\n        uint256 minAPY,\n        uint256 maxRiskScore,\n        uint256 chainId\n    ) external view returns (string[] memory optimalProtocols) {\n        string[] memory chainProtocolsList = chainProtocols[chainId];\n        uint256 count = 0;\n        \n        // Count optimal protocols\n        for (uint256 i = 0; i < chainProtocolsList.length; i++) {\n            ProtocolInfo memory info = protocolInfo[chainProtocolsList[i]];\n            if (info.isActive && info.minAPY >= minAPY && info.riskScore <= maxRiskScore) {\n                count++;\n            }\n        }\n        \n        // Create result array\n        optimalProtocols = new string[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 0; i < chainProtocolsList.length; i++) {\n            ProtocolInfo memory info = protocolInfo[chainProtocolsList[i]];\n            if (info.isActive && info.minAPY >= minAPY && info.riskScore <= maxRiskScore) {\n                optimalProtocols[index] = chainProtocolsList[i];\n                index++;\n            }\n        }\n    }\n    \n    function getProtocolsByRiskScore(uint256 maxRiskScore) external view returns (string[] memory) {\n        uint256 count = 0;\n        \n        // Count protocols within risk limit\n        for (uint256 i = 0; i < protocols.length; i++) {\n            if (protocolInfo[protocols[i]].riskScore <= maxRiskScore && protocolInfo[protocols[i]].isActive) {\n                count++;\n            }\n        }\n        \n        string[] memory result = new string[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 0; i < protocols.length; i++) {\n            if (protocolInfo[protocols[i]].riskScore <= maxRiskScore && protocolInfo[protocols[i]].isActive) {\n                result[index] = protocols[i];\n                index++;\n            }\n        }\n        \n        return result;\n    }\n    \n    function getCrossChainOpportunities(\n        uint256 sourceChainId,\n        uint256 targetChainId,\n        uint256 minAPYImprovement\n    ) external view returns (string[] memory opportunities) {\n        string[] memory sourceProtocols = chainProtocols[sourceChainId];\n        string[] memory targetProtocols = chainProtocols[targetChainId];\n        \n        uint256 count = 0;\n        \n        // Count opportunities\n        for (uint256 i = 0; i < sourceProtocols.length; i++) {\n            for (uint256 j = 0; j < targetProtocols.length; j++) {\n                ProtocolInfo memory sourceInfo = protocolInfo[sourceProtocols[i]];\n                ProtocolInfo memory targetInfo = protocolInfo[targetProtocols[j]];\n                \n                if (sourceInfo.isActive && targetInfo.isActive && \n                    targetInfo.minAPY > sourceInfo.maxAPY + minAPYImprovement) {\n                    count++;\n                }\n            }\n        }\n        \n        opportunities = new string[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 0; i < sourceProtocols.length; i++) {\n            for (uint256 j = 0; j < targetProtocols.length; j++) {\n                ProtocolInfo memory sourceInfo = protocolInfo[sourceProtocols[i]];\n                ProtocolInfo memory targetInfo = protocolInfo[targetProtocols[j]];\n                \n                if (sourceInfo.isActive && targetInfo.isActive && \n                    targetInfo.minAPY > sourceInfo.maxAPY + minAPYImprovement) {\n                    opportunities[index] = targetProtocols[j];\n                    index++;\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/ProtocolAdaptor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// Adapter interface for the YieldRouter\ninterface IProtocolAdapter {\n    function deposit(address user, uint256 amount) external;\n    function withdraw(address user, uint256 amount) external;\n    function balanceOf(address user) external view returns (uint256);\n}\n\n// ERC-4626 vault adapter (Yearn, Beefy, etc.)\ninterface IERC4626 {\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract ERC4626Adapter is IProtocolAdapter {\n    address public vault;\n    address public asset;\n\n    constructor(address _vault, address _asset) {\n        vault = _vault;\n        asset = _asset;\n    }\n\n    function deposit(address user, uint256 amount) external override {\n        IERC20(asset).approve(vault, amount);\n        IERC4626(vault).deposit(amount, user);\n    }\n\n    function withdraw(address user, uint256 amount) external override {\n        IERC4626(vault).withdraw(amount, user, user);\n    }\n\n    function balanceOf(address user) external view override returns (uint256) {\n        return IERC4626(vault).balanceOf(user);\n    }\n}\n\n// For lending protocols, stub example for Aave V3 (modify for production)\ninterface IAavePool {\n    function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\n    function getUserAccountData(address user) external view returns (\n        uint256 totalCollateralETH, uint256, uint256, uint256, uint256, uint256\n    );\n}\n\ncontract AaveAdapter is IProtocolAdapter {\n    address public pool;\n    address public asset;\n\n    constructor(address _pool, address _asset) {\n        pool = _pool;\n        asset = _asset;\n    }\n\n    function deposit(address user, uint256 amount) external override {\n        IERC20(asset).approve(pool, amount);\n        IAavePool(pool).supply(asset, amount, user, 0);\n    }\n\n    function withdraw(address user, uint256 amount) external override {\n        IAavePool(pool).withdraw(asset, amount, user);\n    }\n\n    function balanceOf(address user) external view override returns (uint256) {\n        (uint256 totalCollateralETH,,,,,) = IAavePool(pool).getUserAccountData(user);\n        return totalCollateralETH;\n    }\n}\n\n// Moonwell Protocol Adapter (Base, Arbitrum)\ninterface IMoonwellComptroller {\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n    function exitMarket(address cToken) external returns (uint256);\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\n}\n\ninterface IMoonwellCToken {\n    function mint(uint256 mintAmount) external returns (uint256);\n    function redeem(uint256 redeemTokens) external returns (uint256);\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n    function balanceOf(address owner) external view returns (uint256);\n    function borrowBalanceStored(address account) external view returns (uint256);\n}\n\ncontract MoonwellAdapter is IProtocolAdapter {\n    address public comptroller;\n    address public cToken;\n    address public underlying;\n\n    constructor(address _comptroller, address _cToken, address _underlying) {\n        comptroller = _comptroller;\n        cToken = _cToken;\n        underlying = _underlying;\n    }\n\n    function deposit(address user, uint256 amount) external override {\n        IERC20(underlying).approve(cToken, amount);\n        IMoonwellCToken(cToken).mint(amount);\n    }\n\n    function withdraw(address user, uint256 amount) external override {\n        IMoonwellCToken(cToken).redeemUnderlying(amount);\n    }\n\n    function balanceOf(address user) external view override returns (uint256) {\n        return IMoonwellCToken(cToken).balanceOf(user);\n    }\n}\n\n// Radiant Capital Adapter (Arbitrum)\ninterface IRadiantPool {\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\n    function getUserAccountData(address user) external view returns (\n        uint256 totalCollateralETH, uint256, uint256, uint256, uint256, uint256\n    );\n}\n\ncontract RadiantAdapter is IProtocolAdapter {\n    address public pool;\n    address public asset;\n\n    constructor(address _pool, address _asset) {\n        pool = _pool;\n        asset = _asset;\n    }\n\n    function deposit(address user, uint256 amount) external override {\n        IERC20(asset).approve(pool, amount);\n        IRadiantPool(pool).deposit(asset, amount, user, 0);\n    }\n\n    function withdraw(address user, uint256 amount) external override {\n        IRadiantPool(pool).withdraw(asset, amount, user);\n    }\n\n    function balanceOf(address user) external view override returns (uint256) {\n        (uint256 totalCollateralETH,,,,,) = IRadiantPool(pool).getUserAccountData(user);\n        return totalCollateralETH;\n    }\n}\n\n// Curve Finance Adapter\ninterface ICurvePool {\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\n    function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts) external;\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract CurveAdapter is IProtocolAdapter {\n    address public pool;\n    address public lpToken;\n\n    constructor(address _pool, address _lpToken) {\n        pool = _pool;\n        lpToken = _lpToken;\n    }\n\n    function deposit(address user, uint256 amount) external override {\n        // For Curve, we assume the user already has the LP tokens\n        // In practice, you'd need to handle the token swapping\n        IERC20(lpToken).transferFrom(user, address(this), amount);\n    }\n\n    function withdraw(address user, uint256 amount) external override {\n        IERC20(lpToken).transfer(user, amount);\n    }\n\n    function balanceOf(address user) external view override returns (uint256) {\n        return IERC20(lpToken).balanceOf(user);\n    }\n}\n\n// Beefy Finance Adapter (Multi-chain)\ninterface IBeefyVault {\n    function deposit(uint256 amount) external;\n    function withdraw(uint256 shares) external;\n    function balanceOf(address account) external view returns (uint256);\n    function getPricePerFullShare() external view returns (uint256);\n}\n\ncontract BeefyAdapter is IProtocolAdapter {\n    address public vault;\n    address public want; // Underlying token\n\n    constructor(address _vault, address _want) {\n        vault = _vault;\n        want = _want;\n    }\n\n    function deposit(address user, uint256 amount) external override {\n        IERC20(want).approve(vault, amount);\n        IBeefyVault(vault).deposit(amount);\n    }\n\n    function withdraw(address user, uint256 amount) external override {\n        IBeefyVault(vault).withdraw(amount);\n    }\n\n    function balanceOf(address user) external view override returns (uint256) {\n        return IBeefyVault(vault).balanceOf(user);\n    }\n}\n\n// Yearn Finance Adapter\ninterface IYearnVault {\n    function deposit(uint256 amount, address recipient) external returns (uint256);\n    function withdraw(uint256 maxShares, address recipient, uint256 maxLoss) external returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract YearnAdapter is IProtocolAdapter {\n    address public vault;\n    address public token;\n\n    constructor(address _vault, address _token) {\n        vault = _vault;\n        token = _token;\n    }\n\n    function deposit(address user, uint256 amount) external override {\n        IERC20(token).approve(vault, amount);\n        IYearnVault(vault).deposit(amount, user);\n    }\n\n    function withdraw(address user, uint256 amount) external override {\n        IYearnVault(vault).withdraw(amount, user, 100); // 1% max loss\n    }\n\n    function balanceOf(address user) external view override returns (uint256) {\n        return IYearnVault(vault).balanceOf(user);\n    }\n}\n\n// Compound V3 Adapter\ninterface ICompoundV3Comet {\n    function supply(address asset, uint256 amount) external;\n    function withdraw(address asset, uint256 amount) external;\n    function balanceOf(address account) external view returns (uint256);\n}\n\ncontract CompoundV3Adapter is IProtocolAdapter {\n    address public comet;\n    address public baseToken;\n\n    constructor(address _comet, address _baseToken) {\n        comet = _comet;\n        baseToken = _baseToken;\n    }\n\n    function deposit(address user, uint256 amount) external override {\n        IERC20(baseToken).approve(comet, amount);\n        ICompoundV3Comet(comet).supply(baseToken, amount);\n    }\n\n    function withdraw(address user, uint256 amount) external override {\n        ICompoundV3Comet(comet).withdraw(baseToken, amount);\n    }\n\n    function balanceOf(address user) external view override returns (uint256) {\n        return ICompoundV3Comet(comet).balanceOf(user);\n    }\n}\n\n// Generic Swap Adapter for 1inch integration\ninterface ISwapRouter {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n}\n\ncontract SwapAdapter is IProtocolAdapter {\n    address public router;\n    address public tokenIn;\n    address public tokenOut;\n\n    constructor(address _router, address _tokenIn, address _tokenOut) {\n        router = _router;\n        tokenIn = _tokenIn;\n        tokenOut = _tokenOut;\n    }\n\n    function deposit(address user, uint256 amount) external override {\n        // This would be used for reward token conversion\n        IERC20(tokenIn).approve(router, amount);\n        address[] memory path = new address[](2);\n        path[0] = tokenIn;\n        path[1] = tokenOut;\n        \n        ISwapRouter(router).swapExactTokensForTokens(\n            amount,\n            0, // Accept any amount out\n            path,\n            user,\n            block.timestamp + 300\n        );\n    }\n\n    function withdraw(address user, uint256 amount) external override {\n        // For swap adapter, withdraw means converting back\n        // This would need to be implemented differently for actual withdrawal\n        // For now, we'll just transfer the token\n        IERC20(tokenOut).transfer(user, amount);\n    }\n\n    function balanceOf(address user) external view override returns (uint256) {\n        return IERC20(tokenOut).balanceOf(user);\n    }\n}"
    },
    "contracts/YieldRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./ChainRegistry.sol\";\nimport \"./ProtocolAdaptor.sol\";\n\ncontract YieldRouter is Initializable, AccessControlUpgradeable, UUPSUpgradeable {\n    bytes32 public constant KEEPER_ROLE = keccak256(\"KEEPER_ROLE\");\n    bytes32 public constant AI_AGENT_ROLE = keccak256(\"AI_AGENT_ROLE\");\n    bytes32 public constant REBALANCER_ROLE = keccak256(\"REBALANCER_ROLE\");\n    \n    ChainRegistry public registry;\n    address public feeRecipient;\n    uint256 public feeBasisPoints; // e.g. 50 = 0.5%\n    \n    // Cross-chain support\n    mapping(uint256 => address) public chainRouters; // chainId => router address\n    mapping(address => UserPortfolio) public userPortfolios;\n    \n    // AI optimization tracking\n    mapping(address => OptimizationHistory) public optimizationHistory;\n    uint256 public totalOptimizations;\n    \n    struct UserPortfolio {\n        mapping(string => uint256) protocolBalances; // protocol => balance\n        mapping(uint256 => uint256) chainBalances; // chainId => balance\n        uint256 totalValue;\n        uint256 lastOptimization;\n        uint256 optimizationCount;\n    }\n    \n    struct OptimizationHistory {\n        uint256 timestamp;\n        uint256 expectedAPY;\n        uint256 actualAPY;\n        string[] protocols;\n        uint256[] chainIds;\n        uint256 gasCost;\n        bool success;\n    }\n    \n    struct RebalanceParams {\n        address user;\n        string[] fromProtocols;\n        string[] toProtocols;\n        uint256[] amounts;\n        uint256[] fromChainIds;\n        uint256[] toChainIds;\n        uint256 expectedAPY;\n        uint256 maxGasCost;\n    }\n    \n    struct AIStrategy {\n        address user;\n        uint256 totalAmount;\n        string[] protocols;\n        uint256[] amounts;\n        uint256[] chainIds;\n        uint256 expectedAPY;\n        uint256 riskScore;\n        uint256 executionDeadline;\n    }\n\n    event FeeCharged(address indexed user, uint256 amount, string protocol);\n    event Allocated(address indexed user, string protocol, uint256 amount);\n    event Rebalanced(address indexed user, string fromProtocol, string toProtocol, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event AIStrategyExecuted(address indexed user, uint256 strategyId, uint256 expectedAPY, uint256 gasCost);\n    event CrossChainTransfer(address indexed user, uint256 fromChain, uint256 toChain, uint256 amount);\n    event PortfolioOptimized(address indexed user, uint256 oldAPY, uint256 newAPY, uint256 improvement);\n\n    function initialize(address _registry, address _feeRecipient, uint256 _feeBps, address admin) public initializer {\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n        registry = ChainRegistry(_registry);\n        feeRecipient = _feeRecipient;\n        feeBasisPoints = _feeBps;\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n    \n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\n    \n    // Cross-chain router management\n    function setChainRouter(uint256 chainId, address router) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        chainRouters[chainId] = router;\n    }\n    \n    // AI Agent Functions\n    function executeAIStrategy(AIStrategy calldata strategy) external onlyRole(AI_AGENT_ROLE) returns (uint256 strategyId) {\n        require(strategy.executionDeadline > block.timestamp, \"Strategy expired\");\n        require(strategy.riskScore <= 100, \"Risk score too high\");\n        \n        strategyId = totalOptimizations++;\n        \n        // Execute the AI strategy\n        for (uint256 i = 0; i < strategy.protocols.length; i++) {\n            _allocateToProtocol(\n                strategy.user,\n                strategy.protocols[i],\n                strategy.amounts[i],\n                strategy.chainIds[i]\n            );\n        }\n        \n        // Update user portfolio\n        UserPortfolio storage portfolio = userPortfolios[strategy.user];\n        portfolio.lastOptimization = block.timestamp;\n        portfolio.optimizationCount++;\n        \n        // Record optimization history\n        optimizationHistory[strategy.user] = OptimizationHistory({\n            timestamp: block.timestamp,\n            expectedAPY: strategy.expectedAPY,\n            actualAPY: 0, // Will be updated later\n            protocols: strategy.protocols,\n            chainIds: strategy.chainIds,\n            gasCost: 0, // Will be calculated\n            success: true\n        });\n        \n        emit AIStrategyExecuted(strategy.user, strategyId, strategy.expectedAPY, 0);\n    }\n    \n    function executeRebalance(RebalanceParams calldata params) external onlyRole(REBALANCER_ROLE) {\n        require(params.fromProtocols.length == params.toProtocols.length, \"Array length mismatch\");\n        require(params.fromProtocols.length == params.amounts.length, \"Array length mismatch\");\n        \n        uint256 totalGasCost = 0;\n        \n        for (uint256 i = 0; i < params.fromProtocols.length; i++) {\n            // Withdraw from source protocol\n            address fromAdapter = registry.getAdapter(params.fromProtocols[i]);\n            require(fromAdapter != address(0), \"Source protocol not supported\");\n            \n            IProtocolAdapter(fromAdapter).withdraw(params.user, params.amounts[i]);\n            \n            // Handle cross-chain transfer if needed\n            if (params.fromChainIds[i] != params.toChainIds[i]) {\n                emit CrossChainTransfer(params.user, params.fromChainIds[i], params.toChainIds[i], params.amounts[i]);\n                // Cross-chain transfer logic would be handled by backend/CCTP\n            }\n            \n            // Allocate to destination protocol\n            address toAdapter = registry.getAdapter(params.toProtocols[i]);\n            require(toAdapter != address(0), \"Destination protocol not supported\");\n            \n            IProtocolAdapter(toAdapter).deposit(params.user, params.amounts[i]);\n            \n            emit Rebalanced(params.user, params.fromProtocols[i], params.toProtocols[i], params.amounts[i]);\n        }\n        \n        require(totalGasCost <= params.maxGasCost, \"Gas cost exceeds limit\");\n    }\n    \n    // Enhanced allocation with cross-chain support\n    function _allocateToProtocol(address user, string calldata protocol, uint256 amount, uint256 chainId) internal {\n        address adapter = registry.getAdapter(protocol);\n        require(adapter != address(0), \"Protocol not supported\");\n        \n        // Update portfolio tracking\n        UserPortfolio storage portfolio = userPortfolios[user];\n        portfolio.protocolBalances[protocol] += amount;\n        portfolio.chainBalances[chainId] += amount;\n        portfolio.totalValue += amount;\n        \n        emit Allocated(user, protocol, amount);\n    }\n    \n    // Portfolio management functions\n    function getUserPortfolio(address user) external view returns (\n        uint256 totalValue,\n        uint256 lastOptimization,\n        uint256 optimizationCount\n    ) {\n        UserPortfolio storage portfolio = userPortfolios[user];\n        return (portfolio.totalValue, portfolio.lastOptimization, portfolio.optimizationCount);\n    }\n    \n    function getUserProtocolBalance(address user, string calldata protocol) external view returns (uint256) {\n        return userPortfolios[user].protocolBalances[protocol];\n    }\n    \n    function getUserChainBalance(address user, uint256 chainId) external view returns (uint256) {\n        return userPortfolios[user].chainBalances[chainId];\n    }\n    \n    // Performance tracking\n    function updateOptimizationResult(address user, uint256 actualAPY, uint256 gasCost) external onlyRole(AI_AGENT_ROLE) {\n        OptimizationHistory storage history = optimizationHistory[user];\n        history.actualAPY = actualAPY;\n        history.gasCost = gasCost;\n        \n        uint256 improvement = actualAPY > history.expectedAPY ? actualAPY - history.expectedAPY : 0;\n        emit PortfolioOptimized(user, history.expectedAPY, actualAPY, improvement);\n    }\n    \n    // Emergency functions\n    function emergencyWithdraw(address user, string calldata protocol, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        address adapter = registry.getAdapter(protocol);\n        require(adapter != address(0), \"Protocol not supported\");\n        \n        IProtocolAdapter(adapter).withdraw(user, amount);\n        \n        // Update portfolio\n        UserPortfolio storage portfolio = userPortfolios[user];\n        portfolio.protocolBalances[protocol] -= amount;\n        portfolio.totalValue -= amount;\n        \n        emit Withdrawn(user, amount);\n    }\n\n    // Legacy functions for backward compatibility\n    function allocate(string calldata protocol, uint256 amount, address user, address asset) external onlyRole(KEEPER_ROLE) {\n        address adapter = registry.getAdapter(protocol);\n        require(adapter != address(0), \"Protocol not supported\");\n        uint256 fee = (amount * feeBasisPoints) / 10000;\n        uint256 netAmount = amount - fee;\n        IERC20(asset).transferFrom(user, address(this), amount);\n        if (fee > 0) {\n            IERC20(asset).transfer(feeRecipient, fee);\n            emit FeeCharged(user, fee, protocol);\n        }\n        IERC20(asset).approve(adapter, netAmount);\n        IProtocolAdapter(adapter).deposit(user, netAmount);\n        \n        // Update portfolio tracking\n        UserPortfolio storage portfolio = userPortfolios[user];\n        portfolio.protocolBalances[protocol] += netAmount;\n        portfolio.totalValue += netAmount;\n        \n        emit Allocated(user, protocol, netAmount);\n    }\n\n    function rebalance(string calldata fromProtocol, string calldata toProtocol, uint256 amount, address user, address asset) external onlyRole(KEEPER_ROLE) {\n        address adapterFrom = registry.getAdapter(fromProtocol);\n        address adapterTo = registry.getAdapter(toProtocol);\n        require(adapterFrom != address(0) && adapterTo != address(0), \"Protocol not supported\");\n        \n        IProtocolAdapter(adapterFrom).withdraw(user, amount);\n        IERC20(asset).approve(adapterTo, amount);\n        IProtocolAdapter(adapterTo).deposit(user, amount);\n        \n        // Update portfolio tracking\n        UserPortfolio storage portfolio = userPortfolios[user];\n        portfolio.protocolBalances[fromProtocol] -= amount;\n        portfolio.protocolBalances[toProtocol] += amount;\n        \n        emit Rebalanced(user, fromProtocol, toProtocol, amount);\n    }\n\n    function withdraw(string calldata protocol, uint256 amount, address user, address asset) external onlyRole(KEEPER_ROLE) {\n        address adapter = registry.getAdapter(protocol);\n        require(adapter != address(0), \"Protocol not supported\");\n        IProtocolAdapter(adapter).withdraw(user, amount);\n        IERC20(asset).transfer(user, amount);\n        \n        // Update portfolio tracking\n        UserPortfolio storage portfolio = userPortfolios[user];\n        portfolio.protocolBalances[protocol] -= amount;\n        portfolio.totalValue -= amount;\n        \n        emit Withdrawn(user, amount);\n    }\n    \n    // Advanced functions for AI optimization\n    function batchAllocate(\n        string[] calldata protocols,\n        uint256[] calldata amounts,\n        uint256[] calldata chainIds,\n        address user,\n        address asset\n    ) external onlyRole(AI_AGENT_ROLE) {\n        require(protocols.length == amounts.length && amounts.length == chainIds.length, \"Array length mismatch\");\n        \n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < amounts.length; i++) {\n            totalAmount += amounts[i];\n        }\n        \n        uint256 fee = (totalAmount * feeBasisPoints) / 10000;\n        uint256 netTotalAmount = totalAmount - fee;\n        \n        IERC20(asset).transferFrom(user, address(this), totalAmount);\n        if (fee > 0) {\n            IERC20(asset).transfer(feeRecipient, fee);\n            emit FeeCharged(user, fee, \"batch\");\n        }\n        \n        _executeBatchAllocation(protocols, amounts, chainIds, user, asset, netTotalAmount, totalAmount);\n    }\n    \n    function _executeBatchAllocation(\n        string[] calldata protocols,\n        uint256[] calldata amounts,\n        uint256[] calldata chainIds,\n        address user,\n        address asset,\n        uint256 netTotalAmount,\n        uint256 totalAmount\n    ) internal {\n        UserPortfolio storage portfolio = userPortfolios[user];\n        \n        for (uint256 i = 0; i < protocols.length; i++) {\n            address adapter = registry.getAdapter(protocols[i]);\n            require(adapter != address(0), \"Protocol not supported\");\n            \n            uint256 netAmount = (amounts[i] * netTotalAmount) / totalAmount;\n            IERC20(asset).approve(adapter, netAmount);\n            IProtocolAdapter(adapter).deposit(user, netAmount);\n            \n            // Update portfolio tracking\n            portfolio.protocolBalances[protocols[i]] += netAmount;\n            portfolio.chainBalances[chainIds[i]] += netAmount;\n            portfolio.totalValue += netAmount;\n            \n            emit Allocated(user, protocols[i], netAmount);\n        }\n    }\n    \n    // Cross-chain optimization functions\n    function optimizeCrossChain(\n        address user,\n        uint256[] calldata sourceChains,\n        uint256[] calldata targetChains,\n        uint256[] calldata amounts,\n        string[] calldata targetProtocols\n    ) external onlyRole(AI_AGENT_ROLE) {\n        require(sourceChains.length == targetChains.length && targetChains.length == amounts.length, \"Array length mismatch\");\n        require(targetChains.length == targetProtocols.length, \"Array length mismatch\");\n        \n        _executeCrossChainOptimization(user, sourceChains, targetChains, amounts, targetProtocols);\n    }\n    \n    function _executeCrossChainOptimization(\n        address user,\n        uint256[] calldata sourceChains,\n        uint256[] calldata targetChains,\n        uint256[] calldata amounts,\n        string[] calldata targetProtocols\n    ) internal {\n        UserPortfolio storage portfolio = userPortfolios[user];\n        \n        for (uint256 i = 0; i < sourceChains.length; i++) {\n            if (sourceChains[i] != targetChains[i]) {\n                emit CrossChainTransfer(user, sourceChains[i], targetChains[i], amounts[i]);\n                // Cross-chain transfer would be handled by backend/CCTP\n            }\n            \n            // Allocate to target protocol\n            address adapter = registry.getAdapter(targetProtocols[i]);\n            require(adapter != address(0), \"Protocol not supported\");\n            \n            IProtocolAdapter(adapter).deposit(user, amounts[i]);\n            \n            // Update portfolio tracking\n            portfolio.protocolBalances[targetProtocols[i]] += amounts[i];\n            portfolio.chainBalances[targetChains[i]] += amounts[i];\n            portfolio.totalValue += amounts[i];\n            \n            emit Allocated(user, targetProtocols[i], amounts[i]);\n        }\n    }\n    \n    // Performance analytics\n    function getOptimizationStats(address user) external view returns (\n        uint256 userOptimizations,\n        uint256 averageAPY,\n        uint256 bestAPY,\n        uint256 totalGasSpent\n    ) {\n        OptimizationHistory storage history = optimizationHistory[user];\n        UserPortfolio storage portfolio = userPortfolios[user];\n        \n        return (\n            portfolio.optimizationCount,\n            history.actualAPY, // This would need to be calculated from multiple optimizations\n            history.actualAPY, // This would need to track best performance\n            history.gasCost // This would need to be accumulated\n        );\n    }\n    \n    // Risk management\n    function checkRiskLimits(address user, string calldata protocol, uint256 amount) external view returns (bool withinLimits) {\n        UserPortfolio storage portfolio = userPortfolios[user];\n        uint256 currentBalance = portfolio.protocolBalances[protocol];\n        uint256 newBalance = currentBalance + amount;\n        \n        // Check if allocation exceeds 60% of total portfolio\n        return (newBalance * 100) / (portfolio.totalValue + amount) <= 60;\n    }\n    \n    // Fee management\n    function updateFeeStructure(uint256 newFeeBps) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(newFeeBps <= 1000, \"Fee too high\"); // Max 10%\n        feeBasisPoints = newFeeBps;\n    }\n    \n    function setFeeRecipient(address newRecipient) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(newRecipient != address(0), \"Invalid address\");\n        feeRecipient = newRecipient;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}