{
  "address": "0x9c18A0863F62b141D766Ec2AC0E712FA35857D6f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_backendCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidUser",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletCreationFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldCoordinator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newCoordinator",
          "type": "address"
        }
      ],
      "name": "BackendCoordinatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "WalletCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "backendCoordinator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "createWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "createWalletsBatch",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "wallets",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "disableWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalWallets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWalletBytecodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "getWalletOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasWallet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isValidWallet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "isWalletValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "predictWalletAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "predictedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0dc3e4e55b41a5ef82c73f6069821125b71429f4781e027ba2b34cf0641b3a1f",
  "receipt": {
    "to": null,
    "from": "0xCE54cF5a0dE3843011cF20389C1b6a4AaC442d6A",
    "contractAddress": "0x9c18A0863F62b141D766Ec2AC0E712FA35857D6f",
    "transactionIndex": 73,
    "gasUsed": "3219342",
    "logsBloom": "0x
    "blockHash": "0xa502fe30f23e43245a6f785d9b57cde316d0bd9cf499b4c91ce6846121fa19bc",
    "transactionHash": "0x0dc3e4e55b41a5ef82c73f6069821125b71429f4781e027ba2b34cf0641b3a1f",
    "logs": [
      {
        "transactionIndex": 73,
        "blockNumber": 9293222,
        "transactionHash": "0x0dc3e4e55b41a5ef82c73f6069821125b71429f4781e027ba2b34cf0641b3a1f",
        "address": "0x9c18A0863F62b141D766Ec2AC0E712FA35857D6f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ce54cf5a0de3843011cf20389c1b6a4aac442d6a"
        ],
        "data": "0x",
        "logIndex": 107,
        "blockHash": "0xa502fe30f23e43245a6f785d9b57cde316d0bd9cf499b4c91ce6846121fa19bc"
      }
    ],
    "blockNumber": 9293222,
    "cumulativeGasUsed": "9765536",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCE54cF5a0dE3843011cF20389C1b6a4AaC442d6A",
    "0xCE54cF5a0dE3843011cF20389C1b6a4AaC442d6A"
  ],
  "numDeployments": 1,
  "solcInputHash": "44980de99fe5e3da10a5960b71b30e10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_backendCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidUser\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletCreationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCoordinator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCoordinator\",\"type\":\"address\"}],\"name\":\"BackendCoordinatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"WalletCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"backendCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"createWalletsBatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"disableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalWallets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWalletBytecodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isWalletValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"predictWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"predictedAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Uses CREATE2 for predictable wallet addresses across chains\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_backendCoordinator\":\"Address of the backend coordinator\",\"_owner\":\"Address of the contract owner\"}},\"createWallet(address)\":{\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"wallet\":\"Address of the created smart wallet\"}},\"createWalletsBatch(address[])\":{\"params\":{\"users\":\"Array of user addresses\"},\"returns\":{\"wallets\":\"Array of created wallet addresses\"}},\"disableWallet(address)\":{\"details\":\"Only owner can call this function\",\"params\":{\"wallet\":\"Address of the wallet to disable\"}},\"getTotalWallets()\":{\"returns\":{\"count\":\"Total wallet count\"}},\"getWallet(address)\":{\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"wallet\":\"Address of the user's smart wallet (0x0 if doesn't exist)\"}},\"getWalletBytecodeHash()\":{\"returns\":{\"hash\":\"The bytecode hash\"}},\"getWalletOwner(address)\":{\"params\":{\"wallet\":\"Address of the smart wallet\"},\"returns\":{\"owner\":\"Address of the wallet owner\"}},\"hasWallet(address)\":{\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"exists\":\"True if wallet exists\"}},\"isWalletValid(address)\":{\"params\":{\"wallet\":\"Address to check\"},\"returns\":{\"valid\":\"True if it's a valid wallet\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"predictWalletAddress(address)\":{\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"predictedAddress\":\"The predicted wallet address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"version()\":{\"returns\":{\"_0\":\"version The contract version\"}}},\"title\":\"SmartWalletFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"createWallet(address)\":{\"notice\":\"Create a smart wallet for a user\"},\"createWalletsBatch(address[])\":{\"notice\":\"Create smart wallet for multiple users in batch\"},\"disableWallet(address)\":{\"notice\":\"Emergency function to disable a compromised wallet\"},\"getTotalWallets()\":{\"notice\":\"Get total number of wallets created\"},\"getWallet(address)\":{\"notice\":\"Get the smart wallet address for a user\"},\"getWalletBytecodeHash()\":{\"notice\":\"Get wallet creation bytecode hash (for verification)\"},\"getWalletOwner(address)\":{\"notice\":\"Get the owner of a smart wallet\"},\"hasWallet(address)\":{\"notice\":\"Check if a wallet exists for a user\"},\"isWalletValid(address)\":{\"notice\":\"Check if an address is a valid smart wallet created by this factory\"},\"predictWalletAddress(address)\":{\"notice\":\"Predict the smart wallet address for a user (before creation)\"},\"version()\":{\"notice\":\"Get contract version\"}},\"notice\":\"Factory contract for creating deterministic user smart wallets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartWalletFactory.sol\":\"SmartWalletFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/SmartWalletFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./UserSmartWallet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SmartWalletFactory\\n * @notice Factory contract for creating deterministic user smart wallets\\n * @dev Uses CREATE2 for predictable wallet addresses across chains\\n */\\ncontract SmartWalletFactory is Ownable {\\n\\n    // State variables\\n    mapping(address => address) public userWallets;\\n    mapping(address => bool) public isValidWallet;\\n    address public immutable backendCoordinator;\\n\\n    // Events\\n    event WalletCreated(address indexed user, address indexed wallet, bytes32 salt);\\n    event BackendCoordinatorUpdated(address indexed oldCoordinator, address indexed newCoordinator);\\n\\n    // Errors\\n    error WalletAlreadyExists();\\n    error InvalidUser();\\n    error WalletCreationFailed();\\n\\n    /**\\n     * @notice Constructor\\n     * @param _backendCoordinator Address of the backend coordinator\\n     * @param _owner Address of the contract owner\\n     */\\n    constructor(address _backendCoordinator, address _owner) Ownable(_owner) {\\n        require(_backendCoordinator != address(0), \\\"Invalid backend coordinator\\\");\\n        backendCoordinator = _backendCoordinator;\\n    }\\n\\n    /**\\n     * @notice Create a smart wallet for a user\\n     * @param user Address of the user\\n     * @return wallet Address of the created smart wallet\\n     */\\n    function createWallet(address user) external returns (address wallet) {\\n        if (user == address(0)) revert InvalidUser();\\n        if (userWallets[user] != address(0)) revert WalletAlreadyExists();\\n\\n        // Generate deterministic salt based on user address\\n        bytes32 salt = _generateSalt(user);\\n\\n        // Deploy smart wallet using CREATE2\\n        wallet = address(new UserSmartWallet{salt: salt}(\\n            user,\\n            backendCoordinator,\\n            address(this)\\n        ));\\n\\n        if (wallet == address(0)) revert WalletCreationFailed();\\n\\n        // Store wallet mapping\\n        userWallets[user] = wallet;\\n        isValidWallet[wallet] = true;\\n\\n        emit WalletCreated(user, wallet, salt);\\n    }\\n\\n    /**\\n     * @notice Get the smart wallet address for a user\\n     * @param user Address of the user\\n     * @return wallet Address of the user's smart wallet (0x0 if doesn't exist)\\n     */\\n    function getWallet(address user) external view returns (address wallet) {\\n        return userWallets[user];\\n    }\\n\\n    /**\\n     * @notice Predict the smart wallet address for a user (before creation)\\n     * @param user Address of the user\\n     * @return predictedAddress The predicted wallet address\\n     */\\n    function predictWalletAddress(address user) external view returns (address predictedAddress) {\\n        bytes32 salt = _generateSalt(user);\\n\\n        bytes memory bytecode = abi.encodePacked(\\n            type(UserSmartWallet).creationCode,\\n            abi.encode(user, backendCoordinator, address(this))\\n        );\\n\\n        bytes32 hash = keccak256(abi.encodePacked(\\n            bytes1(0xff),\\n            address(this),\\n            salt,\\n            keccak256(bytecode)\\n        ));\\n\\n        return address(uint160(uint256(hash)));\\n    }\\n\\n    /**\\n     * @notice Check if a wallet exists for a user\\n     * @param user Address of the user\\n     * @return exists True if wallet exists\\n     */\\n    function hasWallet(address user) external view returns (bool exists) {\\n        return userWallets[user] != address(0);\\n    }\\n\\n    /**\\n     * @notice Check if an address is a valid smart wallet created by this factory\\n     * @param wallet Address to check\\n     * @return valid True if it's a valid wallet\\n     */\\n    function isWalletValid(address wallet) external view returns (bool valid) {\\n        return isValidWallet[wallet];\\n    }\\n\\n    /**\\n     * @notice Get the owner of a smart wallet\\n     * @param wallet Address of the smart wallet\\n     * @return owner Address of the wallet owner\\n     */\\n    function getWalletOwner(address wallet) external view returns (address owner) {\\n        if (!isValidWallet[wallet]) return address(0);\\n        return UserSmartWallet(payable(wallet)).owner();\\n    }\\n\\n    /**\\n     * @notice Get total number of wallets created\\n     * @return count Total wallet count\\n     */\\n    function getTotalWallets() external view returns (uint256 count) {\\n        // This would require additional tracking in production\\n        // For now, we'll implement a basic counter\\n        return 0; // TODO: Implement counter\\n    }\\n\\n    /**\\n     * @notice Emergency function to disable a compromised wallet\\n     * @param wallet Address of the wallet to disable\\n     * @dev Only owner can call this function\\n     */\\n    function disableWallet(address wallet) external onlyOwner {\\n        require(isValidWallet[wallet], \\\"Wallet not valid\\\");\\n        isValidWallet[wallet] = false;\\n\\n        // Find and remove from userWallets mapping\\n        // This is gas-intensive but needed for security\\n        // In production, consider using a different approach\\n    }\\n\\n    /**\\n     * @notice Create smart wallet for multiple users in batch\\n     * @param users Array of user addresses\\n     * @return wallets Array of created wallet addresses\\n     */\\n    function createWalletsBatch(address[] calldata users)\\n        external\\n        returns (address[] memory wallets)\\n    {\\n        uint256 length = users.length;\\n        require(length > 0 && length <= 100, \\\"Invalid batch size\\\"); // Limit batch size\\n\\n        wallets = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            // Skip if wallet already exists\\n            if (userWallets[users[i]] != address(0)) {\\n                wallets[i] = userWallets[users[i]];\\n                continue;\\n            }\\n\\n            wallets[i] = this.createWallet(users[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate deterministic salt for CREATE2\\n     * @param user Address of the user\\n     * @return salt The generated salt\\n     */\\n    function _generateSalt(address user) internal pure returns (bytes32 salt) {\\n        return keccak256(abi.encodePacked(\\\"CrossYield_SmartWallet_\\\", user));\\n    }\\n\\n    /**\\n     * @notice Get wallet creation bytecode hash (for verification)\\n     * @return hash The bytecode hash\\n     */\\n    function getWalletBytecodeHash() external pure returns (bytes32 hash) {\\n        return keccak256(type(UserSmartWallet).creationCode);\\n    }\\n\\n    /**\\n     * @notice Get contract version\\n     * @return version The contract version\\n     */\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n}\",\"keccak256\":\"0x5898798d49db6576bbad21f4bb72bf9f43f08d078619281c1df3d9316b655b0e\",\"license\":\"MIT\"},\"contracts/UserSmartWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IProtocolAdapter.sol\\\";\\n\\n/**\\n * @title UserSmartWallet\\n * @notice Individual smart wallet for non-custodial USDC yield optimization\\n * @dev Each user gets their own wallet with automated execution capabilities\\n */\\ncontract UserSmartWallet is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // State variables\\n    address public immutable owner;\\n    address public immutable backendCoordinator;\\n    address public immutable factory;\\n\\n    // USDC token address (will be set per chain)\\n    IERC20 public constant USDC = IERC20(0xA0B86a33E6417C33B2f2e5D8A7c0c5A3c0f9E2b3); // Placeholder\\n\\n    // Wallet state\\n    bool public isActive;\\n    uint256 public totalDeposited;\\n    uint256 public totalWithdrawn;\\n\\n    // Protocol allocations tracking\\n    mapping(string => uint256) public protocolBalances;\\n    mapping(address => uint256) public adapterBalances;\\n    string[] public activeProtocols;\\n\\n    // Events\\n    event Deposited(address indexed user, uint256 amount, string strategy, uint256 timestamp);\\n    event Withdrawn(address indexed user, uint256 amount, uint256 timestamp);\\n    event EmergencyWithdrawal(address indexed user, uint256 amount, uint256 timestamp);\\n    event ProtocolAllocation(string indexed protocol, address adapter, uint256 amount, uint256 timestamp);\\n    event ProtocolWithdrawal(string indexed protocol, address adapter, uint256 amount, uint256 timestamp);\\n    event CCTPTransferInitiated(uint256 amount, uint32 destinationDomain, address recipient, uint256 timestamp);\\n    event WalletDeactivated(uint256 timestamp);\\n    event BackendActionExecuted(string action, bytes data, uint256 timestamp);\\n    event AllocationExecuted(string[] protocolNames, address[] adapters, uint256[] amounts);\\n\\n    // Errors\\n    error OnlyOwner();\\n    error OnlyBackendOrOwner();\\n    error OnlyFactory();\\n    error WalletNotActive();\\n    error InsufficientBalance();\\n    error InvalidAmount();\\n    error InvalidProtocol();\\n    error TransferFailed();\\n    error ZeroAddress();\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert OnlyOwner();\\n        _;\\n    }\\n\\n    modifier onlyBackendOrOwner() {\\n        if (msg.sender != backendCoordinator && msg.sender != owner) revert OnlyBackendOrOwner();\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        if (msg.sender != factory) revert OnlyFactory();\\n        _;\\n    }\\n\\n    modifier onlyActive() {\\n        if (!isActive) revert WalletNotActive();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param _owner Address of the wallet owner (user)\\n     * @param _backendCoordinator Address of the backend coordinator\\n     * @param _factory Address of the factory contract\\n     */\\n    constructor(\\n        address _owner,\\n        address _backendCoordinator,\\n        address _factory\\n    ) {\\n        if (_owner == address(0) || _backendCoordinator == address(0) || _factory == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        owner = _owner;\\n        backendCoordinator = _backendCoordinator;\\n        factory = _factory;\\n        isActive = true;\\n    }\\n\\n    /**\\n     * @notice Deposit USDC to start yield optimization\\n     * @param amount Amount of USDC to deposit\\n     * @param strategy Strategy preference (\\\"conservative\\\", \\\"balanced\\\", \\\"aggressive\\\")\\n     */\\n    function deposit(uint256 amount, string memory strategy)\\n        external\\n        onlyOwner\\n        onlyActive\\n        nonReentrant\\n    {\\n        if (amount == 0) revert InvalidAmount();\\n\\n        // Transfer USDC from owner to this wallet\\n        USDC.safeTransferFrom(owner, address(this), amount);\\n\\n        // Update tracking\\n        totalDeposited += amount;\\n\\n        emit Deposited(owner, amount, strategy, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Execute CCTP cross-chain transfer (called by backend)\\n     * @param amount Amount to transfer\\n     * @param destinationDomain CCTP destination domain\\n     * @param recipient Recipient address on destination chain\\n     */\\n    function executeCCTP(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        address recipient\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (recipient == address(0)) revert ZeroAddress();\\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\\n\\n        // For now, we'll implement a simple transfer to recipient\\n        // In production, this would integrate with Circle's CCTP contracts\\n        USDC.safeTransfer(recipient, amount);\\n\\n        emit CCTPTransferInitiated(amount, destinationDomain, recipient, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Allocate funds to a DeFi protocol\\n     * @param protocolName Name of the protocol\\n     * @param adapter Address of the protocol adapter\\n     * @param amount Amount to allocate\\n     */\\n    function allocateToProtocol(\\n        string memory protocolName,\\n        address adapter,\\n        uint256 amount\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (adapter == address(0)) revert ZeroAddress();\\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\\n\\n        // Approve and deposit to protocol\\n        USDC.safeTransfer(adapter, amount);\\n        IProtocolAdapter(adapter).deposit(owner, amount);\\n\\n        // Update tracking\\n        if (protocolBalances[protocolName] == 0) {\\n            activeProtocols.push(protocolName);\\n        }\\n        protocolBalances[protocolName] += amount;\\n        adapterBalances[adapter] += amount;\\n\\n        emit ProtocolAllocation(protocolName, adapter, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from a DeFi protocol\\n     * @param protocolName Name of the protocol\\n     * @param adapter Address of the protocol adapter\\n     * @param amount Amount to withdraw\\n     */\\n    function withdrawFromProtocol(\\n        string memory protocolName,\\n        address adapter,\\n        uint256 amount\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (adapter == address(0)) revert ZeroAddress();\\n        if (protocolBalances[protocolName] < amount) revert InsufficientBalance();\\n\\n        // Withdraw from protocol\\n        IProtocolAdapter(adapter).withdraw(owner, amount);\\n\\n        // Update tracking\\n        protocolBalances[protocolName] -= amount;\\n        adapterBalances[adapter] -= amount;\\n\\n        // Remove from active protocols if balance is zero\\n        if (protocolBalances[protocolName] == 0) {\\n            _removeProtocol(protocolName);\\n        }\\n\\n        emit ProtocolWithdrawal(protocolName, adapter, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Batch allocate to multiple protocols\\n     * @param protocolNames Array of protocol names\\n     * @param adapters Array of adapter addresses\\n     * @param amounts Array of amounts\\n     */\\n    function batchAllocate(\\n        string[] memory protocolNames,\\n        address[] memory adapters,\\n        uint256[] memory amounts\\n    ) external onlyBackendOrOwner onlyActive nonReentrant {\\n        uint256 length = protocolNames.length;\\n        require(\\n            length == adapters.length && length == amounts.length,\\n            \\\"Array length mismatch\\\"\\n        );\\n\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < length; i++) {\\n            totalAmount += amounts[i];\\n        }\\n\\n        if (USDC.balanceOf(address(this)) < totalAmount) revert InsufficientBalance();\\n\\n        // Protocol allocation will be implemented later with chain-specific adapters\\n        // For now, just emit an event for the backend to track\\n        emit AllocationExecuted(protocolNames, adapters, amounts);\\n    }\\n\\n    /**\\n     * @notice Emergency withdrawal by owner (bypass all restrictions)\\n     * @dev Withdraws all USDC balance to owner\\n     */\\n    function emergencyWithdraw() external onlyOwner nonReentrant {\\n        uint256 balance = USDC.balanceOf(address(this));\\n        if (balance == 0) revert InsufficientBalance();\\n\\n        USDC.safeTransfer(owner, balance);\\n        totalWithdrawn += balance;\\n\\n        emit EmergencyWithdrawal(owner, balance, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Regular withdrawal by owner\\n     * @param amount Amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external onlyOwner onlyActive nonReentrant {\\n        if (amount == 0) revert InvalidAmount();\\n        if (USDC.balanceOf(address(this)) < amount) revert InsufficientBalance();\\n\\n        USDC.safeTransfer(owner, amount);\\n        totalWithdrawn += amount;\\n\\n        emit Withdrawn(owner, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Deactivate wallet (emergency only, by owner)\\n     */\\n    function deactivateWallet() external onlyOwner {\\n        isActive = false;\\n        emit WalletDeactivated(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Reactivate wallet (can be called by owner or factory)\\n     */\\n    function reactivateWallet() external {\\n        if (msg.sender != owner && msg.sender != factory) {\\n            revert OnlyBackendOrOwner();\\n        }\\n        isActive = true;\\n    }\\n\\n    /**\\n     * @notice Execute arbitrary backend action (with restrictions)\\n     * @param target Target contract address\\n     * @param data Encoded function call data\\n     */\\n    function executeBackendAction(address target, bytes calldata data)\\n        external\\n        onlyBackendOrOwner\\n        onlyActive\\n        nonReentrant\\n        returns (bytes memory result)\\n    {\\n        // Security checks\\n        require(target != address(USDC), \\\"Cannot call USDC directly\\\");\\n        require(target != address(this), \\\"Cannot call self\\\");\\n\\n        (bool success, bytes memory returnData) = target.call(data);\\n        require(success, \\\"Backend action failed\\\");\\n\\n        emit BackendActionExecuted(\\\"external_call\\\", data, block.timestamp);\\n        return returnData;\\n    }\\n\\n    // View functions\\n\\n    /**\\n     * @notice Get USDC balance of this wallet\\n     * @return balance Current USDC balance\\n     */\\n    function getBalance() external view returns (uint256 balance) {\\n        return USDC.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Get protocol balance for a specific protocol\\n     * @param protocolName Name of the protocol\\n     * @return balance Balance in that protocol\\n     */\\n    function getProtocolBalance(string memory protocolName)\\n        external\\n        view\\n        returns (uint256 balance)\\n    {\\n        return protocolBalances[protocolName];\\n    }\\n\\n    /**\\n     * @notice Get all active protocols\\n     * @return protocols Array of active protocol names\\n     */\\n    function getActiveProtocols() external view returns (string[] memory protocols) {\\n        return activeProtocols;\\n    }\\n\\n    /**\\n     * @notice Get total value across all protocols and wallet\\n     * @return totalValue Total value in USDC\\n     */\\n    function getTotalValue() external view returns (uint256 totalValue) {\\n        totalValue = USDC.balanceOf(address(this));\\n\\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\\n            totalValue += protocolBalances[activeProtocols[i]];\\n        }\\n    }\\n\\n    /**\\n     * @notice Get wallet summary\\n     * @return usdcBalance Current USDC balance\\n     * @return totalAllocated Total amount allocated to protocols\\n     * @return protocolCount Number of active protocols\\n     * @return active Whether the wallet is active\\n     */\\n    function getWalletSummary() external view returns (\\n        uint256 usdcBalance,\\n        uint256 totalAllocated,\\n        uint256 protocolCount,\\n        bool active\\n    ) {\\n        usdcBalance = USDC.balanceOf(address(this));\\n\\n        totalAllocated = 0;\\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\\n            totalAllocated += protocolBalances[activeProtocols[i]];\\n        }\\n\\n        protocolCount = activeProtocols.length;\\n        active = isActive;\\n    }\\n\\n    /**\\n     * @notice Check if wallet has sufficient balance for amount\\n     * @param amount Amount to check\\n     * @return sufficient True if balance is sufficient\\n     */\\n    function hasSufficientBalance(uint256 amount) external view returns (bool sufficient) {\\n        return USDC.balanceOf(address(this)) >= amount;\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @notice Remove protocol from active list\\n     * @param protocolName Protocol to remove\\n     */\\n    function _removeProtocol(string memory protocolName) internal {\\n        for (uint256 i = 0; i < activeProtocols.length; i++) {\\n            if (keccak256(bytes(activeProtocols[i])) == keccak256(bytes(protocolName))) {\\n                activeProtocols[i] = activeProtocols[activeProtocols.length - 1];\\n                activeProtocols.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Receive ETH (for gas if needed)\\n     */\\n    receive() external payable {\\n        // Allow receiving ETH for gas payments\\n    }\\n\\n    /**\\n     * @notice Get contract version\\n     * @return version Contract version\\n     */\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n}\",\"keccak256\":\"0xa53c5d51c3d6fc6cde44cfef7c977bf4048a306253de040d4dda8787b292d413\",\"license\":\"MIT\"},\"contracts/interfaces/IProtocolAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IProtocolAdapter\\n * @notice Interface for protocol adapters in the CrossYield system\\n * @dev All protocol adapters must implement this interface\\n */\\ninterface IProtocolAdapter {\\n    /**\\n     * @notice Deposit assets into the protocol on behalf of a user\\n     * @param user Address of the user\\n     * @param amount Amount to deposit\\n     */\\n    function deposit(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraw assets from the protocol for a user\\n     * @param user Address of the user\\n     * @param amount Amount to withdraw\\n     */\\n    function withdraw(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the balance of a user in this protocol\\n     * @param user Address of the user\\n     * @return balance User's balance in the protocol\\n     */\\n    function balanceOf(address user) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Get the current APY offered by this protocol\\n     * @return apy Current APY in basis points (e.g., 500 = 5%)\\n     */\\n    function getCurrentAPY() external view returns (uint256 apy);\\n\\n    /**\\n     * @notice Get protocol information\\n     * @return name Protocol name\\n     * @return riskScore Risk score (0-100, lower is safer)\\n     * @return tvl Total value locked in USD\\n     */\\n    function getProtocolInfo() external view returns (\\n        string memory name,\\n        uint256 riskScore,\\n        uint256 tvl\\n    );\\n\\n    /**\\n     * @notice Check if deposits are currently allowed\\n     * @return allowed True if deposits are allowed\\n     */\\n    function isDepositAllowed() external view returns (bool allowed);\\n\\n    /**\\n     * @notice Check if withdrawals are currently allowed\\n     * @return allowed True if withdrawals are allowed\\n     */\\n    function isWithdrawAllowed() external view returns (bool allowed);\\n}\",\"keccak256\":\"0xb4a000f5a5357d196443a2afc21c1c1b2d9beff1bcc393325fa250ff0d589465\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405162003a8738038062003a878339810160408190526100319161013f565b806001600160a01b03811661006157604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61006a816100d3565b506001600160a01b0382166100c15760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206261636b656e6420636f6f7264696e61746f7200000000006044820152606401610058565b506001600160a01b0316608052610172565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461013a57600080fd5b919050565b6000806040838503121561015257600080fd5b61015b83610123565b915061016960208401610123565b90509250929050565b6080516138eb6200019c600039600081816101910152818161035b015261083f01526138eb6000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806383657f77116100a2578063ab9ae6ec11610071578063ab9ae6ec146102a5578063b054a9e8146102bb578063ba51a7b3146102ce578063f2fde38b146102fa578063f5f50eb11461030d57600080fd5b806383657f771461024e5780638da5cb5b1461026e578063966708a51461027f578063a926819f1461029257600080fd5b806363e6ffdd116100de57806363e6ffdd146101da578063713bb95c14610203578063715018a61461021657806380dc8b061461022057600080fd5b806304d0a64714610110578063439a3012146101595780634b19f2551461018c57806354fd4d50146101b3575b600080fd5b61013c61011e366004610a94565b6001600160a01b039081166000908152600160205260409020541690565b6040516001600160a01b0390911681526020015b60405180910390f35b61017c610167366004610a94565b60026020526000908152604090205460ff1681565b6040519015158152602001610150565b61013c7f000000000000000000000000000000000000000000000000000000000000000081565b60408051808201825260058152640312e302e360dc1b602082015290516101509190610adc565b61013c6101e8366004610a94565b6001602052600090815260409020546001600160a01b031681565b61013c610211366004610a94565b610314565b61021e610414565b005b61017c61022e366004610a94565b6001600160a01b0390811660009081526001602052604090205416151590565b61026161025c366004610b0f565b610428565b6040516101509190610b84565b6000546001600160a01b031661013c565b61013c61028d366004610a94565b610686565b61021e6102a0366004610a94565b610716565b6102ad61079a565b604051908152602001610150565b61013c6102c9366004610a94565b6107cc565b61017c6102dc366004610a94565b6001600160a01b031660009081526002602052604090205460ff1690565b61021e610308366004610a94565b610952565b60006102ad565b60008061032083610990565b905060006040518060200161033490610a72565b601f1982820381018352601f9091011660408181526001600160a01b0387811660208401527f0000000000000000000000000000000000000000000000000000000000000000169082015230606082015260800160408051601f19818403018152908290526103a69291602001610bd1565b60408051808303601f1901815282825280516020918201206001600160f81b0319828501523060601b6bffffffffffffffffffffffff191660218501526035840195909552605580840195909552815180840390950185526075909201905282519201919091209392505050565b61041c6109f5565b6104266000610a22565b565b606081801580159061043b575060648111155b6104815760405162461bcd60e51b8152602060048201526012602482015271496e76616c69642062617463682073697a6560701b60448201526064015b60405180910390fd5b8067ffffffffffffffff81111561049a5761049a610c00565b6040519080825280602002602001820160405280156104c3578160200160208202803683370190505b50915060005b8181101561067e5760006001818787858181106104e8576104e8610c16565b90506020020160208101906104fd9190610a94565b6001600160a01b03908116825260208201929092526040016000205416146105a2576001600086868481811061053557610535610c16565b905060200201602081019061054a9190610a94565b6001600160a01b039081168252602082019290925260400160002054845191169084908390811061057d5761057d610c16565b60200260200101906001600160a01b031690816001600160a01b03168152505061066c565b3063b054a9e88686848181106105ba576105ba610c16565b90506020020160208101906105cf9190610a94565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024016020604051808303816000875af1158015610615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106399190610c2c565b83828151811061064b5761064b610c16565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8061067681610c49565b9150506104c9565b505092915050565b6001600160a01b03811660009081526002602052604081205460ff166106ae57506000919050565b816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107109190610c2c565b92915050565b61071e6109f5565b6001600160a01b03811660009081526002602052604090205460ff166107795760405162461bcd60e51b815260206004820152601060248201526f15d85b1b195d081b9bdd081d985b1a5960821b6044820152606401610478565b6001600160a01b03166000908152600260205260409020805460ff19169055565b6000604051806020016107ac90610a72565b6020820181038252601f19601f8201166040525080519060200120905090565b60006001600160a01b0382166107f55760405163fd684c3b60e01b815260040160405180910390fd5b6001600160a01b03828116600090815260016020526040902054161561082e57604051630f721df160e31b815260040160405180910390fd5b600061083983610990565b905080837f00000000000000000000000000000000000000000000000000000000000000003060405161086b90610a72565b6001600160a01b039384168152918316602083015290911660408201526060018190604051809103906000f59050801580156108ab573d6000803e3d6000fd5b5091506001600160a01b0382166108d5576040516303792e6560e61b815260040160405180910390fd5b6001600160a01b03838116600081815260016020818152604080842080546001600160a01b03191696891696871790558584526002825292839020805460ff191690921790915590518481527fbdbcb584581e4f688b28038d847fa0c73130b688da678029bcb98e32fec769a2910160405180910390a350919050565b61095a6109f5565b6001600160a01b03811661098457604051631e4fbdf760e01b815260006004820152602401610478565b61098d81610a22565b50565b6040517f43726f73735969656c645f536d61727457616c6c65745f00000000000000000060208201526bffffffffffffffffffffffff19606083901b166037820152600090604b01604051602081830303815290604052805190602001209050919050565b6000546001600160a01b031633146104265760405163118cdaa760e01b8152336004820152602401610478565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612c4580610c7183390190565b6001600160a01b038116811461098d57600080fd5b600060208284031215610aa657600080fd5b8135610ab181610a7f565b9392505050565b60005b83811015610ad3578181015183820152602001610abb565b50506000910152565b6020815260008251806020840152610afb816040850160208701610ab8565b601f01601f19169190910160400192915050565b60008060208385031215610b2257600080fd5b823567ffffffffffffffff80821115610b3a57600080fd5b818501915085601f830112610b4e57600080fd5b813581811115610b5d57600080fd5b8660208260051b8501011115610b7257600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015610bc55783516001600160a01b031683529284019291840191600101610ba0565b50909695505050505050565b60008351610be3818460208801610ab8565b835190830190610bf7818360208801610ab8565b01949350505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215610c3e57600080fd5b8151610ab181610a7f565b600060018201610c6957634e487b7160e01b600052601160045260246000fd5b506001019056fe60e06040523480156200001157600080fd5b5060405162002c4538038062002c458339810160408190526200003491620000d0565b60016000556001600160a01b03831615806200005757506001600160a01b038216155b806200006a57506001600160a01b038116155b15620000895760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0392831660805290821660a0521660c0526001805460ff1916811790556200011a565b80516001600160a01b0381168114620000cb57600080fd5b919050565b600080600060608486031215620000e657600080fd5b620000f184620000b3565b92506200010160208501620000b3565b91506200011160408501620000b3565b90509250925092565b60805160a05160c051612a53620001f260003960008181610487015261139a0152600081816102b40152818161060f01528181610a9c01528181610d84015281816110d0015261141c0152600081816103fe01528181610643015281816108b7015281816109e301528181610a3601528181610ad001528181610cfc01528181610db801528181610f2a0152818161110401528181611366015281816114500152818161155a0152818161189501528181611982015281816119d501528181611b1201528181611bb00152611bf10152612a536000f3fe6080604052600436106101a05760003560e01c806383e554a2116100ec578063caa648b41161008a578063ef97108a11610064578063ef97108a1461050a578063f081e36814610537578063f1215d2514610559578063ff50abdc1461057957600080fd5b8063caa648b4146104a9578063cd156c6a146104be578063db2e21bc146104f557600080fd5b806394b38524116100c657806394b3852414610420578063aae29f3814610435578063ad67efe014610455578063c45a01551461047557600080fd5b806383e554a2146103aa57806389a30271146103ca5780638da5cb5b146103ec57600080fd5b80633e0ac1af116101595780634f9ac0af116101335780634f9ac0af1461030457806354fd4d50146103245780635dce2fa9146103525780637bd2d8ac1461038a57600080fd5b80633e0ac1af1461028d5780634b19f255146102a25780634b319713146102ee57600080fd5b806312065fe0146101ac578063167c0245146101d457806322f3e2d4146101f65780632a0d47c1146102205780632e1a7d4d1461024d57806337d7c2c81461026d57600080fd5b366101a757005b600080fd5b3480156101b857600080fd5b506101c161058f565b6040519081526020015b60405180910390f35b3480156101e057600080fd5b506101f46101ef366004612011565b610604565b005b34801561020257600080fd5b506001546102109060ff1681565b60405190151581526020016101cb565b34801561022c57600080fd5b5061024061023b366004612058565b610800565b6040516101cb91906120c1565b34801561025957600080fd5b506101f4610268366004612058565b6108ac565b34801561027957600080fd5b506102406102883660046120d4565b610a8f565b34801561029957600080fd5b506101f4610cf1565b3480156102ae57600080fd5b506102d67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101cb565b3480156102fa57600080fd5b506101c160035481565b34801561031057600080fd5b506101f461031f36600461220e565b610d79565b34801561033057600080fd5b506040805180820190915260058152640312e302e360dc1b6020820152610240565b34801561035e57600080fd5b506101c161036d366004612265565b805160208183018101805160048252928201919093012091525481565b34801561039657600080fd5b506101f46103a5366004612393565b6110c5565b3480156103b657600080fd5b506102106103c5366004612058565b6112e1565b3480156103d657600080fd5b506102d66000805160206129fe83398151915281565b3480156103f857600080fd5b506102d67f000000000000000000000000000000000000000000000000000000000000000081565b34801561042c57600080fd5b506101f461135b565b34801561044157600080fd5b506101c1610450366004612265565b6113e9565b34801561046157600080fd5b506101f461047036600461220e565b611411565b34801561048157600080fd5b506102d67f000000000000000000000000000000000000000000000000000000000000000081565b3480156104b557600080fd5b506101c16116b3565b3480156104ca57600080fd5b506104d3611790565b60408051948552602085019390935291830152151560608201526080016101cb565b34801561050157600080fd5b506101f461188a565b34801561051657600080fd5b506101c161052536600461248b565b60056020526000908152604090205481565b34801561054357600080fd5b5061054c611a2e565b6040516101cb91906124fb565b34801561056557600080fd5b506101f461057436600461250e565b611b07565b34801561058557600080fd5b506101c160025481565b6040516370a0823160e01b81523060048201526000906000805160206129fe833981519152906370a0823190602401602060405180830381865afa1580156105db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ff9190612555565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906106665750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156106845760405163e506ea2960e01b815260040160405180910390fd5b60015460ff166106a757604051631f11e7a160e01b815260040160405180910390fd5b6106af611c62565b826000036106d05760405163162908e360e11b815260040160405180910390fd5b6001600160a01b0381166106f75760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015283906000805160206129fe833981519152906370a0823190602401602060405180830381865afa158015610742573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107669190612555565b101561078557604051631e9acf1760e31b815260040160405180910390fd5b61079e6000805160206129fe8339815191528285611c8c565b6040805184815263ffffffff841660208201526001600160a01b0383168183015242606082015290517f62df96a9a8ad6e3ecb58a687895a1b41be3c171dbf693d43aa3b1c69841fd5fa9181900360800190a16107fb6001600055565b505050565b6006818154811061081057600080fd5b90600052602060002001600091509050805461082b9061256e565b80601f01602080910402602001604051908101604052809291908181526020018280546108579061256e565b80156108a45780601f10610879576101008083540402835291602001916108a4565b820191906000526020600020905b81548152906001019060200180831161088757829003601f168201915b505050505081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108f557604051635fc483c560e01b815260040160405180910390fd5b60015460ff1661091857604051631f11e7a160e01b815260040160405180910390fd5b610920611c62565b806000036109415760405163162908e360e11b815260040160405180910390fd5b6040516370a0823160e01b815230600482015281906000805160206129fe833981519152906370a0823190602401602060405180830381865afa15801561098c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b09190612555565b10156109cf57604051631e9acf1760e31b815260040160405180910390fd5b610a086000805160206129fe8339815191527f000000000000000000000000000000000000000000000000000000000000000083611c8c565b8060036000828254610a1a91906125be565b9091555050604080518281524260208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a2610a8c6001600055565b50565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610af35750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15610b115760405163e506ea2960e01b815260040160405180910390fd5b60015460ff16610b3457604051631f11e7a160e01b815260040160405180910390fd5b610b3c611c62565b73a0b86a33e6417c33b2f2e5d8a7c0c5a3c0f9e2b2196001600160a01b03851601610bae5760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742063616c6c2055534443206469726563746c790000000000000060448201526064015b60405180910390fd5b306001600160a01b03851603610bf95760405162461bcd60e51b815260206004820152601060248201526f21b0b73737ba1031b0b6361039b2b63360811b6044820152606401610ba5565b600080856001600160a01b03168585604051610c169291906125d1565b6000604051808303816000865af19150503d8060008114610c53576040519150601f19603f3d011682016040523d82523d6000602084013e610c58565b606091505b509150915081610ca25760405162461bcd60e51b8152602060048201526015602482015274109858dad95b99081858dd1a5bdb8819985a5b1959605a1b6044820152606401610ba5565b7f61b1db00fa46b85aac40d41d854693dc167433f5e067021d1d6689cd5d6ad9e9858542604051610cd5939291906125e1565b60405180910390a1915050610cea6001600055565b9392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d3a57604051635fc483c560e01b815260040160405180910390fd5b6001805460ff191690556040514281527fa195e25d5f54c88c4b12f36a9379ed681d0a5d83b64baada004ca76278b22cfc9060200160405180910390a1565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801590610ddb5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15610df95760405163e506ea2960e01b815260040160405180910390fd5b60015460ff16610e1c57604051631f11e7a160e01b815260040160405180910390fd5b610e24611c62565b80600003610e455760405163162908e360e11b815260040160405180910390fd5b6001600160a01b038216610e6c5760405163d92e233d60e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015281906000805160206129fe833981519152906370a0823190602401602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190612555565b1015610efa57604051631e9acf1760e31b815260040160405180910390fd5b610f136000805160206129fe8339815191528383611c8c565b6040516311f9fbc960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390528316906347e7ef2490604401600060405180830381600087803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b50505050600483604051610fa5919061263e565b908152602001604051809103902054600003610ff957600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01610ff784826126a8565b505b8060048460405161100a919061263e565b9081526020016040518091039020600082825461102791906125be565b90915550506001600160a01b038216600090815260056020526040812080548392906110549084906125be565b909155505060405161106790849061263e565b604080519182900382206001600160a01b0385168352602083018490524291830191909152907f704fa75bdda643242cc116c3a73ed29267a841ff3023581c2275cf6cb77119bd906060015b60405180910390a26107fb6001600055565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906111275750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156111455760405163e506ea2960e01b815260040160405180910390fd5b60015460ff1661116857604051631f11e7a160e01b815260040160405180910390fd5b611170611c62565b82518251811480156111825750815181145b6111c65760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610ba5565b6000805b8281101561120b578381815181106111e4576111e4612768565b6020026020010151826111f791906125be565b9150806112038161277e565b9150506111ca565b506040516370a0823160e01b815230600482015281906000805160206129fe833981519152906370a0823190602401602060405180830381865afa158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b9190612555565b101561129a57604051631e9acf1760e31b815260040160405180910390fd5b7f755a9d37c1df505691fdf90a892fc4bbda4bd7134ba469c9ce720e88f876bf298585856040516112cd93929190612797565b60405180910390a150506107fb6001600055565b6040516370a0823160e01b815230600482015260009082906000805160206129fe833981519152906370a0823190602401602060405180830381865afa15801561132f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113539190612555565b101592915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906113bd5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156113db5760405163e506ea2960e01b815260040160405180910390fd5b6001805460ff191681179055565b60006004826040516113fb919061263e565b9081526020016040518091039020549050919050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906114735750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b156114915760405163e506ea2960e01b815260040160405180910390fd5b60015460ff166114b457604051631f11e7a160e01b815260040160405180910390fd5b6114bc611c62565b806000036114dd5760405163162908e360e11b815260040160405180910390fd5b6001600160a01b0382166115045760405163d92e233d60e01b815260040160405180910390fd5b80600484604051611515919061263e565b908152602001604051809103902054101561154357604051631e9acf1760e31b815260040160405180910390fd5b60405163f3fef3a360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905283169063f3fef3a390604401600060405180830381600087803b1580156115ad57600080fd5b505af11580156115c1573d6000803e3d6000fd5b50505050806004846040516115d6919061263e565b908152602001604051809103902060008282546115f3919061282f565b90915550506001600160a01b0382166000908152600560205260408120805483929061162090849061282f565b909155505060405160049061163690859061263e565b9081526020016040518091039020546000036116555761165583611ceb565b82604051611663919061263e565b604080519182900382206001600160a01b0385168352602083018490524291830191909152907f28438eb4aa4aac87166e3bf802ea80284870d452c16e7d6f1680d2b4b10774c6906060016110b3565b6040516370a0823160e01b81523060048201526000906000805160206129fe833981519152906370a0823190602401602060405180830381865afa1580156116ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117239190612555565b905060005b60065481101561178c5760046006828154811061174757611747612768565b9060005260206000200160405161175e91906128b5565b9081526020016040518091039020548261177891906125be565b9150806117848161277e565b915050611728565b5090565b6040516370a0823160e01b81523060048201526000908190819081906000805160206129fe833981519152906370a0823190602401602060405180830381865afa1580156117e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118069190612555565b93506000925060005b6006548110156118735760046006828154811061182e5761182e612768565b9060005260206000200160405161184591906128b5565b9081526020016040518091039020548461185f91906125be565b93508061186b8161277e565b91505061180f565b505060065460015493949293909260ff9091169150565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118d357604051635fc483c560e01b815260040160405180910390fd5b6118db611c62565b6040516370a0823160e01b81523060048201526000906000805160206129fe833981519152906370a0823190602401602060405180830381865afa158015611927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194b9190612555565b90508060000361196e57604051631e9acf1760e31b815260040160405180910390fd5b6119a76000805160206129fe8339815191527f000000000000000000000000000000000000000000000000000000000000000083611c8c565b80600360008282546119b991906125be565b9091555050604080518281524260208201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016917f56da9a5ae0bcf6e7c3fdd78a10550e7d0458de1c39bfb7f6e96a3e92dd344a68910160405180910390a250611a2c6001600055565b565b60606006805480602002602001604051908101604052809291908181526020016000905b82821015611afe578382906000526020600020018054611a719061256e565b80601f0160208091040260200160405190810160405280929190818152602001828054611a9d9061256e565b8015611aea5780601f10611abf57610100808354040283529160200191611aea565b820191906000526020600020905b815481529060010190602001808311611acd57829003601f168201915b505050505081526020019060010190611a52565b50505050905090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611b5057604051635fc483c560e01b815260040160405180910390fd5b60015460ff16611b7357604051631f11e7a160e01b815260040160405180910390fd5b611b7b611c62565b81600003611b9c5760405163162908e360e11b815260040160405180910390fd5b611bd66000805160206129fe8339815191527f00000000000000000000000000000000000000000000000000000000000000003085611dd0565b8160026000828254611be891906125be565b925050819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f2157592e75ae7c48a11728aef822bc883f3eb4b0929956be2a5e4250f5622aac838342604051611c4c939291906128c1565b60405180910390a2611c5e6001600055565b5050565b600260005403611c8557604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b038381166024830152604482018390526107fb91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611e0f565b60005b600654811015611c5e57818051906020012060068281548110611d1357611d13612768565b90600052602060002001604051611d2a91906128b5565b604051809103902003611dbe5760068054611d479060019061282f565b81548110611d5757611d57612768565b9060005260206000200160068281548110611d7457611d74612768565b906000526020600020019081611d8a91906128ea565b506006805480611d9c57611d9c6129c5565b600190038181906000526020600020016000611db89190611fab565b90555050565b80611dc88161277e565b915050611cee565b6040516001600160a01b038481166024830152838116604483015260648201839052611e099186918216906323b872dd90608401611cb9565b50505050565b6000611e246001600160a01b03841683611e72565b90508051600014158015611e49575080806020019051810190611e4791906129db565b155b156107fb57604051635274afe760e01b81526001600160a01b0384166004820152602401610ba5565b6060611e8083836000611e89565b90505b92915050565b606081471015611eae5760405163cd78605960e01b8152306004820152602401610ba5565b600080856001600160a01b03168486604051611eca919061263e565b60006040518083038185875af1925050503d8060008114611f07576040519150601f19603f3d011682016040523d82523d6000602084013e611f0c565b606091505b5091509150611f1c868383611f26565b9695505050505050565b606082611f3b57611f3682611f82565b610cea565b8151158015611f5257506001600160a01b0384163b155b15611f7b57604051639996b31560e01b81526001600160a01b0385166004820152602401610ba5565b5080610cea565b805115611f925780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b508054611fb79061256e565b6000825580601f10611fc7575050565b601f016020900490600052602060002090810190610a8c91905b8082111561178c5760008155600101611fe1565b80356001600160a01b038116811461200c57600080fd5b919050565b60008060006060848603121561202657600080fd5b83359250602084013563ffffffff8116811461204157600080fd5b915061204f60408501611ff5565b90509250925092565b60006020828403121561206a57600080fd5b5035919050565b60005b8381101561208c578181015183820152602001612074565b50506000910152565b600081518084526120ad816020860160208601612071565b601f01601f19169290920160200192915050565b602081526000611e806020830184612095565b6000806000604084860312156120e957600080fd5b6120f284611ff5565b9250602084013567ffffffffffffffff8082111561210f57600080fd5b818601915086601f83011261212357600080fd5b81358181111561213257600080fd5b87602082850101111561214457600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561219657612196612157565b604052919050565b600082601f8301126121af57600080fd5b813567ffffffffffffffff8111156121c9576121c9612157565b6121dc601f8201601f191660200161216d565b8181528460208386010111156121f157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561222357600080fd5b833567ffffffffffffffff81111561223a57600080fd5b6122468682870161219e565b93505061225560208501611ff5565b9150604084013590509250925092565b60006020828403121561227757600080fd5b813567ffffffffffffffff81111561228e57600080fd5b61229a8482850161219e565b949350505050565b600067ffffffffffffffff8211156122bc576122bc612157565b5060051b60200190565b600082601f8301126122d757600080fd5b813560206122ec6122e7836122a2565b61216d565b82815260059290921b8401810191818101908684111561230b57600080fd5b8286015b8481101561232d5761232081611ff5565b835291830191830161230f565b509695505050505050565b600082601f83011261234957600080fd5b813560206123596122e7836122a2565b82815260059290921b8401810191818101908684111561237857600080fd5b8286015b8481101561232d578035835291830191830161237c565b6000806000606084860312156123a857600080fd5b833567ffffffffffffffff808211156123c057600080fd5b818601915086601f8301126123d457600080fd5b813560206123e46122e7836122a2565b82815260059290921b8401810191818101908a84111561240357600080fd5b8286015b8481101561243b5780358681111561241f5760008081fd5b61242d8d86838b010161219e565b845250918301918301612407565b509750508701359250508082111561245257600080fd5b61245e878388016122c6565b9350604086013591508082111561247457600080fd5b5061248186828701612338565b9150509250925092565b60006020828403121561249d57600080fd5b611e8082611ff5565b600081518084526020808501808196508360051b8101915082860160005b858110156124ee5782840389526124dc848351612095565b988501989350908401906001016124c4565b5091979650505050505050565b602081526000611e8060208301846124a6565b6000806040838503121561252157600080fd5b82359150602083013567ffffffffffffffff81111561253f57600080fd5b61254b8582860161219e565b9150509250929050565b60006020828403121561256757600080fd5b5051919050565b600181811c9082168061258257607f821691505b6020821081036125a257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611e8357611e836125a8565b8183823760009101908152919050565b60608152600d60608201526c195e1d195c9b985b17d8d85b1b609a1b608082015260a060208201528260a0820152828460c0830137600060c08483010152600060c0601f19601f8601168301019050826040830152949350505050565b60008251612650818460208701612071565b9190910192915050565b601f8211156107fb57600081815260208120601f850160051c810160208610156126815750805b601f850160051c820191505b818110156126a05782815560010161268d565b505050505050565b815167ffffffffffffffff8111156126c2576126c2612157565b6126d6816126d0845461256e565b8461265a565b602080601f83116001811461270b57600084156126f35750858301515b600019600386901b1c1916600185901b1785556126a0565b600085815260208120601f198616915b8281101561273a5788860151825594840194600190910190840161271b565b50858210156127585787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201612790576127906125a8565b5060010190565b6060815260006127aa60608301866124a6565b82810360208481019190915285518083528682019282019060005b818110156127ea5784516001600160a01b0316835293830193918301916001016127c5565b50508481036040860152855180825290820192508186019060005b8181101561282157825185529383019391830191600101612805565b509298975050505050505050565b81810381811115611e8357611e836125a8565b6000815461284f8161256e565b60018281168015612867576001811461287c576128ab565b60ff19841687528215158302870194506128ab565b8560005260208060002060005b858110156128a25781548a820152908401908201612889565b50505082870194505b5050505092915050565b6000611e808284612842565b8381526060602082015260006128da6060830185612095565b9050826040830152949350505050565b8181036128f5575050565b6128ff825461256e565b67ffffffffffffffff81111561291757612917612157565b612925816126d0845461256e565b6000601f82116001811461295957600083156129415750848201545b600019600385901b1c1916600184901b1784556129be565b600085815260209020601f19841690600086815260209020845b838110156129935782860154825560019586019590910190602001612973565b50858310156129b15781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b6000602082840312156129ed57600080fd5b81518015158114610cea57600080fdfe000000000000000000000000a0b86a33e6417c33b2f2e5d8a7c0c5a3c0f9e2b3a26469706673582212204b616b538d9c0e9867d685d549e720b9d31bf416c4b923b0d54ba52636ce594664736f6c63430008140033a26469706673582212208f79f0d0747f48a7f5f77ded23162c78adaf6d5f9eccc8875e48e1371bd97aa364736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Uses CREATE2 for predictable wallet addresses across chains",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_backendCoordinator": "Address of the backend coordinator",
          "_owner": "Address of the contract owner"
        }
      },
      "createWallet(address)": {
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "wallet": "Address of the created smart wallet"
        }
      },
      "createWalletsBatch(address[])": {
        "params": {
          "users": "Array of user addresses"
        },
        "returns": {
          "wallets": "Array of created wallet addresses"
        }
      },
      "disableWallet(address)": {
        "details": "Only owner can call this function",
        "params": {
          "wallet": "Address of the wallet to disable"
        }
      },
      "getTotalWallets()": {
        "returns": {
          "count": "Total wallet count"
        }
      },
      "getWallet(address)": {
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "wallet": "Address of the user's smart wallet (0x0 if doesn't exist)"
        }
      },
      "getWalletBytecodeHash()": {
        "returns": {
          "hash": "The bytecode hash"
        }
      },
      "getWalletOwner(address)": {
        "params": {
          "wallet": "Address of the smart wallet"
        },
        "returns": {
          "owner": "Address of the wallet owner"
        }
      },
      "hasWallet(address)": {
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "exists": "True if wallet exists"
        }
      },
      "isWalletValid(address)": {
        "params": {
          "wallet": "Address to check"
        },
        "returns": {
          "valid": "True if it's a valid wallet"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "predictWalletAddress(address)": {
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "predictedAddress": "The predicted wallet address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "version()": {
        "returns": {
          "_0": "version The contract version"
        }
      }
    },
    "title": "SmartWalletFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "createWallet(address)": {
        "notice": "Create a smart wallet for a user"
      },
      "createWalletsBatch(address[])": {
        "notice": "Create smart wallet for multiple users in batch"
      },
      "disableWallet(address)": {
        "notice": "Emergency function to disable a compromised wallet"
      },
      "getTotalWallets()": {
        "notice": "Get total number of wallets created"
      },
      "getWallet(address)": {
        "notice": "Get the smart wallet address for a user"
      },
      "getWalletBytecodeHash()": {
        "notice": "Get wallet creation bytecode hash (for verification)"
      },
      "getWalletOwner(address)": {
        "notice": "Get the owner of a smart wallet"
      },
      "hasWallet(address)": {
        "notice": "Check if a wallet exists for a user"
      },
      "isWalletValid(address)": {
        "notice": "Check if an address is a valid smart wallet created by this factory"
      },
      "predictWalletAddress(address)": {
        "notice": "Predict the smart wallet address for a user (before creation)"
      },
      "version()": {
        "notice": "Get contract version"
      }
    },
    "notice": "Factory contract for creating deterministic user smart wallets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 976,
        "contract": "contracts/SmartWalletFactory.sol:SmartWalletFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3182,
        "contract": "contracts/SmartWalletFactory.sol:SmartWalletFactory",
        "label": "userWallets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3186,
        "contract": "contracts/SmartWalletFactory.sol:SmartWalletFactory",
        "label": "isValidWallet",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}